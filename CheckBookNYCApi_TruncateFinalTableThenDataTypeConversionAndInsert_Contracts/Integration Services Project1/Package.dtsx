<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="6/10/2020 5:11:34 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DOT-JCKWHB2"
  DTS:CreatorName="DOT\ykuang"
  DTS:DTSID="{6B353E58-A202-4BC2-B46F-93CD68600CF1}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="12.0.5626.31"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="152"
  DTS:VersionGUID="{E395FF71-31B8-4B7B-8A83-1C57DBF7F72A}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{FCA46042-184A-4048-B9D6-000F61268699}"
      DTS:ObjectName="DOTDEV55SQLEE03.CheckBookNYC">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=DOTDEV55SQLEE03;Initial Catalog=CheckBookNYC;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{1E7A7445-8DB9-49F1-B54D-6EF7A7264E38}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion"
              componentClassID="Microsoft.DataConvert"
              contactInfo="Data Conversion;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Data Conversion"
              name="Data Conversion"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input]"
                  name="Data Conversion Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input].Columns[prime_contract_current_amount_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_current_amount_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_current_amount_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input].Columns[prime_contract_original_amount_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_original_amount_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_original_amount_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input].Columns[prime_vendor_spent_to_date_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_vendor_spent_to_date_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_vendor_spent_to_date_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input].Columns[prime_contract_start_date_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_start_date_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_start_date_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input].Columns[prime_contract_end_date_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_end_date_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_end_date_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input].Columns[prime_contract_registration_date_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_registration_date_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_registration_date_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input].Columns[prime_contract_version_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_version_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_version_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input].Columns[sub_contract_current_amount_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_contract_current_amount_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_current_amount_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input].Columns[sub_contract_original_amount_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_contract_original_amount_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_original_amount_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input].Columns[sub_vendor_paid_to_date_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_vendor_paid_to_date_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_vendor_paid_to_date_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input].Columns[sub_contract_start_date_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_contract_start_date_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_start_date_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input].Columns[sub_contract_end_date_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_contract_end_date_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_end_date_STAGING]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output]"
                  exclusionGroup="1"
                  name="Data Conversion Output"
                  synchronousInputId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[prime_contract_current_amount_STAGING_DataTypeConverted]"
                      dataType="cy"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[prime_contract_current_amount_STAGING_DataTypeConverted]"
                      name="prime_contract_current_amount_STAGING_DataTypeConverted"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the input column used as the source of data for the conversion."
                          name="SourceInputColumnLineageID">#{Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_current_amount_STAGING]}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[prime_contract_original_amount_STAGING_DataTypeConverted]"
                      dataType="cy"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[prime_contract_original_amount_STAGING_DataTypeConverted]"
                      name="prime_contract_original_amount_STAGING_DataTypeConverted"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the input column used as the source of data for the conversion."
                          name="SourceInputColumnLineageID">#{Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_original_amount_STAGING]}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[prime_vendor_spent_to_date_STAGING_DataTypeConverted]"
                      dataType="cy"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[prime_vendor_spent_to_date_STAGING_DataTypeConverted]"
                      name="prime_vendor_spent_to_date_STAGING_DataTypeConverted"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the input column used as the source of data for the conversion."
                          name="SourceInputColumnLineageID">#{Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_vendor_spent_to_date_STAGING]}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[prime_contract_start_date_STAGING_DataTypeConverted]"
                      dataType="dbDate"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[prime_contract_start_date_STAGING_DataTypeConverted]"
                      name="prime_contract_start_date_STAGING_DataTypeConverted"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the input column used as the source of data for the conversion."
                          name="SourceInputColumnLineageID">#{Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_start_date_STAGING]}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[prime_contract_end_date_STAGING_DataTypeConverted]"
                      dataType="dbDate"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[prime_contract_end_date_STAGING_DataTypeConverted]"
                      name="prime_contract_end_date_STAGING_DataTypeConverted"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the input column used as the source of data for the conversion."
                          name="SourceInputColumnLineageID">#{Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_end_date_STAGING]}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[prime_contract_registration_date_STAGING_DataTypeConverted]"
                      dataType="dbDate"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[prime_contract_registration_date_STAGING_DataTypeConverted]"
                      name="prime_contract_registration_date_STAGING_DataTypeConverted"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the input column used as the source of data for the conversion."
                          name="SourceInputColumnLineageID">#{Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_registration_date_STAGING]}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[prime_contract_version_STAGING_DataTypeConverted]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[prime_contract_version_STAGING_DataTypeConverted]"
                      name="prime_contract_version_STAGING_DataTypeConverted"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the input column used as the source of data for the conversion."
                          name="SourceInputColumnLineageID">#{Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_version_STAGING]}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[sub_contract_current_amount_STAGING_DataTypeConverted]"
                      dataType="cy"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[sub_contract_current_amount_STAGING_DataTypeConverted]"
                      name="sub_contract_current_amount_STAGING_DataTypeConverted"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the input column used as the source of data for the conversion."
                          name="SourceInputColumnLineageID">#{Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_current_amount_STAGING]}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[sub_contract_original_amount_STAGING_DataTypeConverted]"
                      dataType="cy"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[sub_contract_original_amount_STAGING_DataTypeConverted]"
                      name="sub_contract_original_amount_STAGING_DataTypeConverted"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the input column used as the source of data for the conversion."
                          name="SourceInputColumnLineageID">#{Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_original_amount_STAGING]}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[sub_vendor_paid_to_date_STAGING_DataTypeConverted]"
                      dataType="cy"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[sub_vendor_paid_to_date_STAGING_DataTypeConverted]"
                      name="sub_vendor_paid_to_date_STAGING_DataTypeConverted"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the input column used as the source of data for the conversion."
                          name="SourceInputColumnLineageID">#{Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_vendor_paid_to_date_STAGING]}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[sub_contract_start_date_STAGING_DataTypeConverted]"
                      dataType="dbDate"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[sub_contract_start_date_STAGING_DataTypeConverted]"
                      name="sub_contract_start_date_STAGING_DataTypeConverted"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the input column used as the source of data for the conversion."
                          name="SourceInputColumnLineageID">#{Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_start_date_STAGING]}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[sub_contract_end_date_STAGING_DataTypeConverted]"
                      dataType="dbDate"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[sub_contract_end_date_STAGING_DataTypeConverted]"
                      name="sub_contract_end_date_STAGING_DataTypeConverted"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the input column used as the source of data for the conversion."
                          name="SourceInputColumnLineageID">#{Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_end_date_STAGING]}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Data Conversion Error Output"
                  synchronousInputId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, and Registration for Final Contracts table"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;9"
              description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
              name="Derive Code, Dept, and Registration for Final Contracts table"
              version="9">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="30">
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        /*
         * Add your code here
         */
        string contractid = Row.primecontractidSTAGING;
        try
        {
            if (contractid != null && contractid.Length >= 9)
            {
                if (contractid.Substring(0, 3) == "CT1")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 3);
                    Row.DeptSTAGINGDerived = contractid.Substring(3, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(6);
                }
                else if (contractid.Substring(0, 4) == "CTA1")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 4);
                    Row.DeptSTAGINGDerived = contractid.Substring(4, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(7);
                }
                else if (contractid.Substring(0, 3) == "DO1")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 3);
                    Row.DeptSTAGINGDerived = contractid.Substring(3, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(6);
                }
                else if (contractid.Substring(0, 4) == "MMA1")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 4);
                    Row.DeptSTAGINGDerived = contractid.Substring(4, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(7);
                }
                else if (contractid.Substring(0, 4) == "RCT1")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 4);
                    Row.DeptSTAGINGDerived = contractid.Substring(4, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(7);
                }
                else if (contractid.Substring(0, 4) == "PRC2")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 4);
                    Row.DeptSTAGINGDerived = contractid.Substring(4, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(7);
                }
                else if (contractid.Substring(0, 3) == "POD")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 3);
                    Row.DeptSTAGINGDerived = contractid.Substring(3, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(6);
                }
                else if (contractid.Substring(0, 3) == "POC")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 3);
                    Row.DeptSTAGINGDerived = contractid.Substring(3, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(6);
                }
                else if (contractid.Substring(0, 4) == "PON1")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 4);
                    Row.DeptSTAGINGDerived = contractid.Substring(4, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(7);
                }
                else if (contractid.Substring(0, 4) == "PRM1")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 4);
                    Row.DeptSTAGINGDerived = contractid.Substring(4, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(7);
                }
                else if (contractid.Substring(0, 4) == "PCC1")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 4);
                    Row.DeptSTAGINGDerived = contractid.Substring(4, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(7);
                }
                else if (contractid.Substring(0, 4) == "CTA2")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 4);
                    Row.DeptSTAGINGDerived = contractid.Substring(4, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(7);
                }
                else if (contractid.Substring(0, 5) == "RTGPF")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 5);
                    Row.DeptSTAGINGDerived = contractid.Substring(5, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(8);
                }
                else
                {
                    Row.CodeSTAGINGDerived = "N/A";
                    Row.DeptSTAGINGDerived = "N/A";
                    Row.RegistrationSTAGINGDerived = "N/A";
                }

            }
            else if (contractid != null && contractid.Length < 9)
            {
                Row.CodeSTAGINGDerived = "N/A";
                Row.DeptSTAGINGDerived = "N/A";
                Row.RegistrationSTAGINGDerived = "N/A";
            }
            else if (contractid == null)
            {
                Row.CodeSTAGINGDerived = null;
                Row.DeptSTAGINGDerived = null;
                Row.RegistrationSTAGINGDerived = null;
            }
            else
            {
                Row.CodeSTAGINGDerived = "N/A";
                Row.DeptSTAGINGDerived = "N/A";
                Row.RegistrationSTAGINGDerived = "N/A";
            }
        }
        catch (Exception ex)
        {
            Row.CodeSTAGINGDerived = "ERROR: an exception has occured";
            Row.DeptSTAGINGDerived = "ERROR: an exception has occured";
            Row.RegistrationSTAGINGDerived = "ERROR: an exception has occured";
            //MessageBox.Show(ex.ToString());
        }
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String primecontractidSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[0]);
        }
    }
    public bool primecontractidSTAGING_IsNull
    {
        get
        {
            return IsNull(0);
        }
    }

    public String RegistrationSTAGINGDerived
    {
        set
        {
            this[1] = value;
        }
    }
    public bool RegistrationSTAGINGDerived_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String DeptSTAGINGDerived
    {
        set
        {
            this[2] = value;
        }
    }
    public bool DeptSTAGINGDerived_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String CodeSTAGINGDerived
    {
        set
        {
            this[3] = value;
        }
    }
    public bool CodeSTAGINGDerived_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_fde36916989d446b8a484b213dcf533d.Properties.Settings.get_Default():SC_fde36916989d446b8a484b213dcf533d.Properties.Sett" +
    "ings")]

namespace SC_fde36916989d446b8a484b213dcf533d.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_fde36916989d446b8a484b213dcf533d.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{ea126c3e-945b-400f-9cd6-befd223ae95b}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_fde36916989d446b8a484b213dcf533d</RootNamespace>
    <AssemblyName>SC_fde36916989d446b8a484b213dcf533d</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptComponent" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptComponent" GeneratedNamespace="SC_fde36916989d446b8a484b213dcf533d" IconIndex="0"></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_SC120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>SC_fde36916989d446b8a484b213dcf533d</msb:CodeName>
		<msb:DisplayName>SC_fde36916989d446b8a484b213dcf533d</msb:DisplayName>
		<msb:ProjectId>{971174AB-3BB2-42CA-98BB-9A4A7CABDD19}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_fde36916989d446b8a484b213dcf533d.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ComponentWrapper.cs"/>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_fde36916989d446b8a484b213dcf533d")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_fde36916989d446b8a484b213dcf533d")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_fde36916989d446b8a484b213dcf533d.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_fde36916989d446b8a484b213dcf533d.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_fde36916989d446b8a484b213dcf533d.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_fde36916989d446b8a484b213dcf533d.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_fde36916989d446b8a484b213dcf533d.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="2">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_fde36916989d446b8a484b213dcf533d.dll]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAMErH18AAAAAAAAAAOAAAiELAQsAABoAAAAIAAAAAAAAvjkA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAGQ5AABXAAAAAEAAAAgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAxBkAAAAgAAAAGgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAgEAAAAQAAAAAYAAAAcAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAIgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACg
OQAAAAAAAEgAAAACAAUA+CYAAGwSAAABAAAAAAAAAEAmAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH4CKA0AAAoCAnMUAAAGfQEAAAQCAnMVAAAGfQIAAAQqkgRy
AQAAcBpvDgAACiwVAgUCAygPAAAKDgRzCQAABm8DAAAGKkorBwIDbwQAAAYDbxIAAAYt8SoGKh4C
KBEAAAoqHgIoEgAACioAABswBAApBAAAAQAAEQNvCgAABgoGOYoDAAAGbxMAAAofCT99AwAABhYZ
bxQAAApyEQAAcCgVAAAKLC4DBhYZbxQAAApvEAAABgMGGRlvFAAACm8OAAAGAwYcbxYAAApvDAAA
BjimAwAABhYabxQAAApyGQAAcCgVAAAKLC4DBhYabxQAAApvEAAABgMGGhlvFAAACm8OAAAGAwYd
bxYAAApvDAAABjhkAwAABhYZbxQAAApyIwAAcCgVAAAKLC4DBhYZbxQAAApvEAAABgMGGRlvFAAA
Cm8OAAAGAwYcbxYAAApvDAAABjgiAwAABhYabxQAAApyKwAAcCgVAAAKLC4DBhYabxQAAApvEAAA
BgMGGhlvFAAACm8OAAAGAwYdbxYAAApvDAAABjjgAgAABhYabxQAAApyNQAAcCgVAAAKLC4DBhYa
bxQAAApvEAAABgMGGhlvFAAACm8OAAAGAwYdbxYAAApvDAAABjieAgAABhYabxQAAApyPwAAcCgV
AAAKLC4DBhYabxQAAApvEAAABgMGGhlvFAAACm8OAAAGAwYdbxYAAApvDAAABjhcAgAABhYZbxQA
AApySQAAcCgVAAAKLC4DBhYZbxQAAApvEAAABgMGGRlvFAAACm8OAAAGAwYcbxYAAApvDAAABjga
AgAABhYZbxQAAApyUQAAcCgVAAAKLC4DBhYZbxQAAApvEAAABgMGGRlvFAAACm8OAAAGAwYcbxYA
AApvDAAABjjYAQAABhYabxQAAApyWQAAcCgVAAAKLC4DBhYabxQAAApvEAAABgMGGhlvFAAACm8O
AAAGAwYdbxYAAApvDAAABjiWAQAABhYabxQAAApyYwAAcCgVAAAKLC4DBhYabxQAAApvEAAABgMG
GhlvFAAACm8OAAAGAwYdbxYAAApvDAAABjhUAQAABhYabxQAAApybQAAcCgVAAAKLC4DBhYabxQA
AApvEAAABgMGGhlvFAAACm8OAAAGAwYdbxYAAApvDAAABjgSAQAABhYabxQAAApydwAAcCgVAAAK
LC4DBhYabxQAAApvEAAABgMGGhlvFAAACm8OAAAGAwYdbxYAAApvDAAABjjQAAAABhYbbxQAAApy
gQAAcCgVAAAKLC4DBhYbbxQAAApvEAAABgMGGxlvFAAACm8OAAAGAwYebxYAAApvDAAABjiOAAAA
A3KNAABwbxAAAAYDco0AAHBvDgAABgNyjQAAcG8MAAAGK2sGLC0GbxMAAAofCS8jA3KNAABwbxAA
AAYDco0AAHBvDgAABgNyjQAAcG8MAAAGKzsGLRcDFG8QAAAGAxRvDgAABgMUbwwAAAYrIQNyjQAA
cG8QAAAGA3KNAABwbw4AAAYDco0AAHBvDAAABt4kJgNylQAAcG8QAAAGA3KVAABwbw4AAAYDcpUA
AHBvDAAABt4AKgAAAEEcAAAAAAAABwAAAP0DAAAEBAAAJAAAABgAAAEeAigBAAAGKioCAwQFKBcA
AAoqUgJ7GAAACgJ7GQAAChaUbxoAAAoqIgIWKBsAAAoqJgIXAygcAAAKKloDLAgCFygdAAAKKnLV
AABwcx4AAAp6JgIYAygcAAAKKloDLAgCGCgdAAAKKnLVAABwcx4AAAp6JgIZAygcAAAKKloDLAgC
GSgdAAAKKnLVAABwcx4AAAp6HgIoHwAACioeAiggAAAKKjoCKCEAAAoCA30DAAAEKjoCKCEAAAoC
A30EAAAEKh4CKCEAAAoqAAATMAIALQAAAAIAABF+BQAABC0gcnIBAHDQBwAAAigjAAAKbyQAAApz
JQAACgoGgAUAAAR+BQAABCoafgYAAAQqHgKABgAABCoafgcAAAQqLnMbAAAGgAcAAAQqHgIoKAAA
CioAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2Nv
cmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3
N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAA
AAAAAABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAAwGAAAj
fgAAeAYAAEwIAAAjU3RyaW5ncwAAAADEDgAA5AEAACNVUwCoEAAAEAAAACNHVUlEAAAAuBAAALQB
AAAjQmxvYgAAAAAAAAACAAABVxWiAQkBAAAA+iUzABYAAAEAAAAgAAAACAAAAAcAAAAcAAAAEwAA
ACgAAAAPAAAAAgAAAAMAAAALAAAADAAAAAEAAAAEAAAAAQAAAAAACgABAAAAAAAGAO4AzQAGAP4A
zQAKABsBFAEOADcBIgESAHYBzQAGAIUBzQAKAM8DvgMKAAAE6wMKANkEvwQKAAQF8gQKABsF8gQK
ADgF8gQKAFcF8gQKAHAF8gQKAIkF8gQKAKQF8gQKAL8F8gQKANgF8gQKABEG8QUKADEG8QUKAHMG
FAEKAHoGFAEGAKMGzQAKAOsGFAEKABcHFAEKAEQHMQcKAGEHFAEKAGYHFAEKAIoH8gQOALYHoAcO
AM8HoAcKAOQH8QUAAAAAAQAAAAAAAQABAAEAEAAyAAAABQABAAEAAQAQAEAAAAAIAAMABQABABAA
SwAAAAkAAwAJAAEAEABYAAAADQADABQAAQAQAGQAAAANAAQAFQAAABAAbgB4AA0ABQAWAAABEACn
AHgAEQAHABoABgBYABMABgBkABcAAQCuA1MAAQCuA1MAEQDfA10AEQAMBGEAEQBQBH8AUCAAAAAA
hhhPARsAAQBwIAAAAADGAJMBHwABAJUgAAAAAMYBoAEpAAUAqCAAAAAAxgG0ASkABgCqIAAAAADG
AMsBGwAHALIgAAAAAMYA1gEbAAcAvCAAAAAAxgC0ASkABwAQJQAAAACGGE8BGwAIABglAAAAAIYY
TwEvAAgAIyUAAAAAhgjiATkACwA4JQAAAACGCP0BPQALAEElAAAAAIYIHwJBAAsASyUAAAAAhgg+
AkYADABiJQAAAACGCGQCQQANAGwlAAAAAIYIewJGAA4AgyUAAAAAhgiZAkEADwCNJQAAAACGCLAC
RgAQAKQlAAAAAIYAzgI9ABEArCUAAAAAhgDWAj0AEQC0JQAAAACGGE8BVwARAMMlAAAAAIYYTwFX
ABIA0iUAAAAAgxhPARsAEwDcJQAAAACTCBwEZQATABUmAAAAAJMIMARqABMAHCYAAAAAkwg8BG8A
EwAkJgAAAACWCGAEgwAUADcmAAAAAIYYTwEbABQAKyYAAAAAkRj/B/cAFAAAAAEAdAQAAAIAfAQA
AAMAhgQAAAQAjQQAAAEAhgQAAAEAlwQAAAEAlwQAAAEAhgQAAAIAmwQAAAMAjQQAAAEArwQAAAEA
rwQAAAEArwQAAAEArwQAAAEArwQAAAEArwQAAAEAtQQAAAEAtQQAAAEArwRJAE8BQQBRAE8BQQBZ
AE8BQQBhAE8BQQBpAE8BQQBxAE8BQQB5AE8BQQCBAE8BQQCJAE8BQQCRAE8BQQCZAE8BjQChAE8B
GwAJAE8BGwCpAIsGkgAJAJIGmQC5AE8BGwAJAMsBGwAJANYBGwCpAMoGpACpANUGqACpAN8GrgCp
ANUGtAARAE8BLwARAIYEvQARAJsEwQApAPUGtAARAP8GxQARAAYHygARAA8HjQDJAE8BQQARAM4C
PQARANYCPQAZAE8BGwDRAE8BGwDZAHgH0ADZAJMH1wA5AE8B3ADxAE8B6AABAU8BGwAhAE8BGwAu
ABsAbAEuAGMAkgEuAAsA+wAuABMAQwEuACMAbAEuACsAbAEuADMAQwEuADsAcgEuAEMAbAEuAFsA
iQFjAIMAnwDhADsBnwDjABMBnwApATMB7gBJATMB7gC5AOMABAABAAcACQAIAAsAAADiAksAAAD5
Ak8AAAAXA0sAAAAyA08AAABUA0sAAABnA08AAACBA0sAAACUA08AAADPA3UAAABIBHoAAABsBIgA
AgAKAAMAAgALAAUAAQAMAAcAAQANAAkAAQAOAAsAAQAPAA0AAQAQAA8AAQARABEAAgAXABMAAgAY
ABUAAQAZABUAAgAaABcABIAAAAEAAABZHThmAAAAAAAATwYAAAwAAAAAAAAAAAAAAAEAsAAAAAAA
BAAAAAAAAAAAAAAACgALAQAAAAAEAAAAAAAAAAAAAAAKABQBAAAAAAwAAAAAAAAAAAAAAAEAVQEA
AAAAAAAAAAEAAAAGCAAAAAAAAAA8TW9kdWxlPgBTQ19mZGUzNjkxNjk4OWQ0NDZiOGE0ODRiMjEz
ZGNmNTMzZC5kbGwAVXNlckNvbXBvbmVudABTY3JpcHRNYWluAElucHV0MEJ1ZmZlcgBDb25uZWN0
aW9ucwBWYXJpYWJsZXMAUmVzb3VyY2VzAFNDX2ZkZTM2OTE2OTg5ZDQ0NmI4YTQ4NGIyMTNkY2Y1
MzNkLlByb3BlcnRpZXMAU2V0dGluZ3MATWljcm9zb2Z0LlNxbFNlcnZlci5UeFNjcmlwdABNaWNy
b3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZQBTY3JpcHRDb21wb25lbnQAU2NyaXB0QnVmZmVy
AG1zY29ybGliAFN5c3RlbQBPYmplY3QAU3lzdGVtLkNvbmZpZ3VyYXRpb24AQXBwbGljYXRpb25T
ZXR0aW5nc0Jhc2UALmN0b3IATWljcm9zb2Z0LlNxbFNlcnZlci5QaXBlbGluZUhvc3QAUGlwZWxp
bmVCdWZmZXIAT3V0cHV0TmFtZU1hcABQcm9jZXNzSW5wdXQASW5wdXQwX1Byb2Nlc3NJbnB1dABJ
bnB1dDBfUHJvY2Vzc0lucHV0Um93AFByZUV4ZWN1dGUAUG9zdEV4ZWN1dGUAZ2V0X3ByaW1lY29u
dHJhY3RpZFNUQUdJTkcAZ2V0X3ByaW1lY29udHJhY3RpZFNUQUdJTkdfSXNOdWxsAHNldF9SZWdp
c3RyYXRpb25TVEFHSU5HRGVyaXZlZABzZXRfUmVnaXN0cmF0aW9uU1RBR0lOR0Rlcml2ZWRfSXNO
dWxsAHNldF9EZXB0U1RBR0lOR0Rlcml2ZWQAc2V0X0RlcHRTVEFHSU5HRGVyaXZlZF9Jc051bGwA
c2V0X0NvZGVTVEFHSU5HRGVyaXZlZABzZXRfQ29kZVNUQUdJTkdEZXJpdmVkX0lzTnVsbABOZXh0
Um93AEVuZE9mUm93c2V0AHByaW1lY29udHJhY3RpZFNUQUdJTkcAcHJpbWVjb250cmFjdGlkU1RB
R0lOR19Jc051bGwAUmVnaXN0cmF0aW9uU1RBR0lOR0Rlcml2ZWQAUmVnaXN0cmF0aW9uU1RBR0lO
R0Rlcml2ZWRfSXNOdWxsAERlcHRTVEFHSU5HRGVyaXZlZABEZXB0U1RBR0lOR0Rlcml2ZWRfSXNO
dWxsAENvZGVTVEFHSU5HRGVyaXZlZABDb2RlU1RBR0lOR0Rlcml2ZWRfSXNOdWxsAFBhcmVudENv
bXBvbmVudABTeXN0ZW0uUmVzb3VyY2VzAFJlc291cmNlTWFuYWdlcgByZXNvdXJjZU1hbgBTeXN0
ZW0uR2xvYmFsaXphdGlvbgBDdWx0dXJlSW5mbwByZXNvdXJjZUN1bHR1cmUAZ2V0X1Jlc291cmNl
TWFuYWdlcgBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQBDdWx0dXJlAGRlZmF1bHRJbnN0YW5jZQBn
ZXRfRGVmYXVsdABEZWZhdWx0AElucHV0SUQASW5wdXROYW1lAEJ1ZmZlcgBPdXRwdXRNYXAAUm93
AEJ1ZmZlckNvbHVtbkluZGV4ZXMAdmFsdWUAQ29tcG9uZW50AFN5c3RlbS5SdW50aW1lLlZlcnNp
b25pbmcAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAFN5c3RlbS5SZWZsZWN0aW9uAEFzc2VtYmx5
VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbmZp
Z3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAEFzc2VtYmx5UHJvZHVj
dEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0
dHJpYnV0ZQBBc3NlbWJseUN1bHR1cmVBdHRyaWJ1dGUAQXNzZW1ibHlWZXJzaW9uQXR0cmlidXRl
AFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0
dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBTQ19mZGUzNjkxNjk4OWQ0NDZi
OGE0ODRiMjEzZGNmNTMzZABTdHJpbmcAU3RyaW5nQ29tcGFyaXNvbgBFcXVhbHMAR2V0Q29sdW1u
SW5kZXhlcwBTU0lTU2NyaXB0Q29tcG9uZW50RW50cnlQb2ludEF0dHJpYnV0ZQBnZXRfTGVuZ3Ro
AFN1YnN0cmluZwBvcF9FcXVhbGl0eQBFeGNlcHRpb24AR2V0U3RyaW5nAElzTnVsbABzZXRfSXRl
bQBTZXROdWxsAEludmFsaWRPcGVyYXRpb25FeGNlcHRpb24AU3lzdGVtLkRpYWdub3N0aWNzAERl
YnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUAVHlwZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBl
RnJvbUhhbmRsZQBBc3NlbWJseQBnZXRfQXNzZW1ibHkAU3lzdGVtLkNvbXBvbmVudE1vZGVsAEVk
aXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVy
YXRlZEF0dHJpYnV0ZQAuY2N0b3IAU0NfZmRlMzY5MTY5ODlkNDQ2YjhhNDg0YjIxM2RjZjUzM2Qu
UHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAAAAAAAPSQBuAHAAdQB0ACAAMAAAB0MAVAAx
AAAJQwBUAEEAMQAAB0QATwAxAAAJTQBNAEEAMQAACVIAQwBUADEAAAlQAFIAQwAyAAAHUABPAEQA
AAdQAE8AQwAACVAATwBOADEAAAlQAFIATQAxAAAJUABDAEMAMQAACUMAVABBADIAAAtSAFQARwBQ
AEYAAAdOAC8AQQAAP0UAUgBSAE8AUgA6ACAAYQBuACAAZQB4AGMAZQBwAHQAaQBvAG4AIABoAGEA
cwAgAG8AYwBjAHUAcgBlAGQAAICbSQBzAE4AdQBsAGwAIABwAHIAbwBwAGUAcgB0AHkAIABjAGEA
bgBuAG8AdAAgAGIAZQAgAHMAZQB0ACAAdABvACAARgBhAGwAcwBlAC4AIABBAHMAcwBpAGcAbgAg
AGEAIAB2AGEAbAB1AGUAIAB0AG8AIAB0AGgAZQAgAGMAbwBsAHUAbQBuACAAaQBuAHMAdABlAGEA
ZAAuAABxUwBDAF8AZgBkAGUAMwA2ADkAMQA2ADkAOAA5AGQANAA0ADYAYgA4AGEANAA4ADQAYgAy
ADEAMwBkAGMAZgA1ADMAMwBkAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMA
ZQBzAADmetlP+rJVTpmwxqVavb/YAAiJhF3NgIDMkQi3elxWGTTgiQMGEhQDBhIYAyAAAQkgBAEI
DhIVEhkFIAEBEhAJIAMBEhUdCBIZAyAADgMgAAIEIAEBDgQgAQECAygADgMoAAIDBhIFBSABARIF
AwYSHQMGEiEEAAASHQQAABIhBQABARIhBAgAEh0ECAASIQMGEiAEAAASIAQIABIgBCABAQgGIAIC
DhFZBSABHQgIBAEAAAADIAAIBSACDggIBQACAg4OBCABDggDBwEOAwYSFQMGHQgEIAECCAUgAgEI
HAYAARJtEXEEIAASdQYgAgEOEnUEBwESHQUgAQERfQgBAAIAAAAAAAMAAAFHAQAaLk5FVEZyYW1l
d29yayxWZXJzaW9uPXY0LjABAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEC5ORVQgRnJhbWV3b3Jr
IDQoAQAjU0NfZmRlMzY5MTY5ODlkNDQ2YjhhNDg0YjIxM2RjZjUzM2QAAAUBAAAAABYBABFDb3B5
cmlnaHQgQCAgMjAyMAAACAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQAA
AIw5AAAAAAAAAAAAAK45AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgOQAAAAAAAAAAAAAAAAAA
AAAAAAAAX0NvckRsbE1haW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAA
AFhAAACwAwAAAAAAAAAAAACwAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAA
vQTv/gAAAQAAAAEAOGZZHQAAAQA4ZlkdPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAAB
AFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAA
AAAAALAEEAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAA7AIAAAEAMAAwADAAMAAw
ADQAYgAwAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAQwBfAGYA
ZABlADMANgA5ADEANgA5ADgAOQBkADQANAA2AGIAOABhADQAOAA0AGIAMgAxADMAZABjAGYANQAz
ADMAZAAAAEAADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3ADUAMQAzAC4A
MgA2ADEANgA4AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAQwBfAGYAZABl
ADMANgA5ADEANgA5ADgAOQBkADQANAA2AGIAOABhADQAOAA0AGIAMgAxADMAZABjAGYANQAzADMA
ZAAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQBy
AGkAZwBoAHQAIABAACAAIAAyADAAMgAwAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUA
bgBhAG0AZQAAAFMAQwBfAGYAZABlADMANgA5ADEANgA5ADgAOQBkADQANAA2AGIAOABhADQAOAA0
AGIAMgAxADMAZABjAGYANQAzADMAZAAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEA
bQBlAAAAAABTAEMAXwBmAGQAZQAzADYAOQAxADYAOQA4ADkAZAA0ADQANgBiADgAYQA0ADgANABi
ADIAMQAzAGQAYwBmADUAMwAzAGQAAABEAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4A
AAAxAC4AMAAuADcANQAxADMALgAyADYAMQA2ADgAAAAAAEgADwABAEEAcwBzAGUAbQBiAGwAeQAg
AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcANQAxADMALgAyADYAMQA2ADgAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAAwDkAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_fde36916989d446b8a484b213dcf533d</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum"
                  typeConverter="NOTBROWSABLE">da8cfeb6743ca6080437250ae036c70e</property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataShaChecksum"
                  typeConverter="NOTBROWSABLE">c78b29979211644fb59f22053dccf8231561d8a0</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, and Registration for Final Contracts table.Inputs[Input 0]"
                  hasSideEffects="true"
                  name="Input 0">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, and Registration for Final Contracts table.Inputs[Input 0].Columns[prime_contract_id_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_id_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_id_STAGING]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, and Registration for Final Contracts table.Outputs[Output 0]"
                  name="Output 0"
                  synchronousInputId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, and Registration for Final Contracts table.Inputs[Input 0]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, and Registration for Final Contracts table.Outputs[Output 0].Columns[RegistrationSTAGINGDerived]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, and Registration for Final Contracts table.Outputs[Output 0].Columns[RegistrationSTAGINGDerived]"
                      name="RegistrationSTAGINGDerived" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, and Registration for Final Contracts table.Outputs[Output 0].Columns[DeptSTAGINGDerived]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, and Registration for Final Contracts table.Outputs[Output 0].Columns[DeptSTAGINGDerived]"
                      name="DeptSTAGINGDerived" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, and Registration for Final Contracts table.Outputs[Output 0].Columns[CodeSTAGINGDerived]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, and Registration for Final Contracts table.Outputs[Output 0].Columns[CodeSTAGINGDerived]"
                      name="CodeSTAGINGDerived" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime"
              componentClassID="Microsoft.DerivedColumn"
              contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
              name="Derive Current Datetime"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Inputs[Derived Column Input]"
                  description="Input to the Derived Column Transformation"
                  name="Derived Column Input">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Output]"
                  description="Default Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  name="Derived Column Output"
                  synchronousInputId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Inputs[Derived Column Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Output].Columns[LastUpdatedTimestamp_Derived]"
                      dataType="dbTimeStamp"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Output].Columns[LastUpdatedTimestamp_Derived]"
                      name="LastUpdatedTimestamp_Derived"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Derived Column Expression"
                          name="Expression">[GETDATE]()</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Derived Column Friendly Expression"
                          expressionType="Notify"
                          name="FriendlyExpression">GETDATE()</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Error Output]"
                  description="Error Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Derived Column Error Output"
                  synchronousInputId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Inputs[Derived Column Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000"
              componentClassID="Microsoft.OLEDBDestination"
              contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
              description="OLE DB Destination"
              name="Insert records (Final - Contracts) - Batch 100,000"
              usesDispositions="true"
              version="4">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[dbo].[Contracts]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">3</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepIdentity">false</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                  name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                <property
                  dataType="System.Int32"
                  description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                  name="FastLoadMaxInsertCommitSize">100000</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  connectionManagerRefId="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input]"
                  errorOrTruncationOperation="Insert"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[LastUpdatedTimestamp_Derived]"
                      cachedDataType="dbTimeStamp"
                      cachedName="LastUpdatedTimestamp_Derived"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[LastUpdatedTimestamp]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Output].Columns[LastUpdatedTimestamp_Derived]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[prime_contract_current_amount_STAGING_DataTypeConverted]"
                      cachedDataType="cy"
                      cachedName="prime_contract_current_amount_STAGING_DataTypeConverted"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_current_amount]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[prime_contract_current_amount_STAGING_DataTypeConverted]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[prime_contract_original_amount_STAGING_DataTypeConverted]"
                      cachedDataType="cy"
                      cachedName="prime_contract_original_amount_STAGING_DataTypeConverted"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_original_amount]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[prime_contract_original_amount_STAGING_DataTypeConverted]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[prime_vendor_spent_to_date_STAGING_DataTypeConverted]"
                      cachedDataType="cy"
                      cachedName="prime_vendor_spent_to_date_STAGING_DataTypeConverted"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_vendor_spent_to_date]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[prime_vendor_spent_to_date_STAGING_DataTypeConverted]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[prime_contract_start_date_STAGING_DataTypeConverted]"
                      cachedDataType="dbDate"
                      cachedName="prime_contract_start_date_STAGING_DataTypeConverted"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_start_date]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[prime_contract_start_date_STAGING_DataTypeConverted]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[prime_contract_end_date_STAGING_DataTypeConverted]"
                      cachedDataType="dbDate"
                      cachedName="prime_contract_end_date_STAGING_DataTypeConverted"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_end_date]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[prime_contract_end_date_STAGING_DataTypeConverted]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[prime_contract_registration_date_STAGING_DataTypeConverted]"
                      cachedDataType="dbDate"
                      cachedName="prime_contract_registration_date_STAGING_DataTypeConverted"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_registration_date]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[prime_contract_registration_date_STAGING_DataTypeConverted]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[prime_contract_version_STAGING_DataTypeConverted]"
                      cachedDataType="i4"
                      cachedName="prime_contract_version_STAGING_DataTypeConverted"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_version]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[prime_contract_version_STAGING_DataTypeConverted]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[sub_contract_current_amount_STAGING_DataTypeConverted]"
                      cachedDataType="cy"
                      cachedName="sub_contract_current_amount_STAGING_DataTypeConverted"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_contract_current_amount]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[sub_contract_current_amount_STAGING_DataTypeConverted]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[sub_contract_original_amount_STAGING_DataTypeConverted]"
                      cachedDataType="cy"
                      cachedName="sub_contract_original_amount_STAGING_DataTypeConverted"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_contract_original_amount]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[sub_contract_original_amount_STAGING_DataTypeConverted]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[sub_vendor_paid_to_date_STAGING_DataTypeConverted]"
                      cachedDataType="cy"
                      cachedName="sub_vendor_paid_to_date_STAGING_DataTypeConverted"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_vendor_paid_to_date]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[sub_vendor_paid_to_date_STAGING_DataTypeConverted]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[sub_contract_start_date_STAGING_DataTypeConverted]"
                      cachedDataType="dbDate"
                      cachedName="sub_contract_start_date_STAGING_DataTypeConverted"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_contract_start_date]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[sub_contract_start_date_STAGING_DataTypeConverted]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[sub_contract_end_date_STAGING_DataTypeConverted]"
                      cachedDataType="dbDate"
                      cachedName="sub_contract_end_date_STAGING_DataTypeConverted"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_contract_end_date]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[sub_contract_end_date_STAGING_DataTypeConverted]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[CodeSTAGINGDerived]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="CodeSTAGINGDerived"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_code]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, and Registration for Final Contracts table.Outputs[Output 0].Columns[CodeSTAGINGDerived]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[DeptSTAGINGDerived]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="DeptSTAGINGDerived"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_dept]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, and Registration for Final Contracts table.Outputs[Output 0].Columns[DeptSTAGINGDerived]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[RegistrationSTAGINGDerived]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="RegistrationSTAGINGDerived"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_registration]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, and Registration for Final Contracts table.Outputs[Output 0].Columns[RegistrationSTAGINGDerived]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[ID_STAGING]"
                      cachedDataType="i4"
                      cachedName="ID_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[StagingID]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[ID_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[document_code_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="document_code_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[document_code]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[document_code_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[prime_contract_id_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_id_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_id]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_id_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[contract_includes_sub_vendors_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="contract_includes_sub_vendors_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[contract_includes_sub_vendors]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[contract_includes_sub_vendors_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[vendor_record_type_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="vendor_record_type_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[vendor_record_type]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[vendor_record_type_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[prime_vendor_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_vendor_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_vendor]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_vendor_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[prime_vendor_mwbe_category_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_vendor_mwbe_category_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_vendor_mwbe_category]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_vendor_mwbe_category_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[prime_contract_purpose_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_purpose_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_purpose]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_purpose_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[prime_contracting_agency_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contracting_agency_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contracting_agency]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contracting_agency_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[parent_contract_id_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="parent_contract_id_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[parent_contract_id]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[parent_contract_id_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[prime_contract_type_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_type_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_type]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_type_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[prime_contract_award_method_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_award_method_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_award_method]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_award_method_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[prime_contract_expense_category_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="265"
                      cachedName="prime_contract_expense_category_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_expense_category]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_expense_category_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[prime_contract_industry_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_industry_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_industry]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_industry_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[prime_contract_pin_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_pin_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_pin]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_pin_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[prime_contract_apt_pin_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_apt_pin_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_apt_pin]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_apt_pin_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[sub_vendor_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_vendor_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_vendor]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_vendor_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[sub_vendor_mwbe_category_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_vendor_mwbe_category_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_vendor_mwbe_category]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_vendor_mwbe_category_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[sub_contract_purpose_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="476"
                      cachedName="sub_contract_purpose_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_contract_purpose]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_purpose_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[sub_vendor_status_in_pip_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_vendor_status_in_pip_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_vendor_status_in_pip]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_vendor_status_in_pip_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[sub_contract_industry_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_contract_industry_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_contract_industry]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_industry_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[sub_contract_reference_id_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_contract_reference_id_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_contract_reference_id]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_reference_id_STAGING]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[ID]"
                      dataType="i4"
                      name="ID" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[LastUpdatedTimestamp]"
                      dataType="dbTimeStamp"
                      name="LastUpdatedTimestamp" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[document_code]"
                      dataType="wstr"
                      length="255"
                      name="document_code" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_id]"
                      dataType="wstr"
                      length="255"
                      name="prime_contract_id" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[contract_includes_sub_vendors]"
                      dataType="wstr"
                      length="255"
                      name="contract_includes_sub_vendors" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[vendor_record_type]"
                      dataType="wstr"
                      length="255"
                      name="vendor_record_type" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_vendor]"
                      dataType="wstr"
                      length="255"
                      name="prime_vendor" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_vendor_mwbe_category]"
                      dataType="wstr"
                      length="255"
                      name="prime_vendor_mwbe_category" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_purpose]"
                      dataType="wstr"
                      length="255"
                      name="prime_contract_purpose" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_current_amount]"
                      dataType="cy"
                      name="prime_contract_current_amount" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_original_amount]"
                      dataType="cy"
                      name="prime_contract_original_amount" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_vendor_spent_to_date]"
                      dataType="cy"
                      name="prime_vendor_spent_to_date" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_start_date]"
                      dataType="dbDate"
                      name="prime_contract_start_date" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_end_date]"
                      dataType="dbDate"
                      name="prime_contract_end_date" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_registration_date]"
                      dataType="dbDate"
                      name="prime_contract_registration_date" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contracting_agency]"
                      dataType="wstr"
                      length="255"
                      name="prime_contracting_agency" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_version]"
                      dataType="i4"
                      name="prime_contract_version" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[parent_contract_id]"
                      dataType="wstr"
                      length="255"
                      name="parent_contract_id" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_type]"
                      dataType="wstr"
                      length="255"
                      name="prime_contract_type" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_award_method]"
                      dataType="wstr"
                      length="255"
                      name="prime_contract_award_method" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_expense_category]"
                      dataType="wstr"
                      length="265"
                      name="prime_contract_expense_category" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_industry]"
                      dataType="wstr"
                      length="255"
                      name="prime_contract_industry" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_pin]"
                      dataType="wstr"
                      length="255"
                      name="prime_contract_pin" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_contract_apt_pin]"
                      dataType="wstr"
                      length="255"
                      name="prime_contract_apt_pin" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_vendor]"
                      dataType="wstr"
                      length="255"
                      name="sub_vendor" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_vendor_mwbe_category]"
                      dataType="wstr"
                      length="255"
                      name="sub_vendor_mwbe_category" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_contract_purpose]"
                      dataType="wstr"
                      length="476"
                      name="sub_contract_purpose" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_vendor_status_in_pip]"
                      dataType="wstr"
                      length="255"
                      name="sub_vendor_status_in_pip" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_contract_industry]"
                      dataType="wstr"
                      length="255"
                      name="sub_contract_industry" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_contract_current_amount]"
                      dataType="cy"
                      name="sub_contract_current_amount" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_contract_original_amount]"
                      dataType="cy"
                      name="sub_contract_original_amount" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_vendor_paid_to_date]"
                      dataType="cy"
                      name="sub_vendor_paid_to_date" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_contract_start_date]"
                      dataType="dbDate"
                      name="sub_contract_start_date" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_contract_end_date]"
                      dataType="dbDate"
                      name="sub_contract_end_date" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_contract_reference_id]"
                      dataType="wstr"
                      length="255"
                      name="sub_contract_reference_id" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[StagingID]"
                      dataType="i4"
                      name="StagingID" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_code]"
                      dataType="wstr"
                      length="255"
                      name="prime_code" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_dept]"
                      dataType="wstr"
                      length="255"
                      name="prime_dept" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[prime_registration]"
                      dataType="wstr"
                      length="255"
                      name="prime_registration" />
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Outputs[OLE DB Destination Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Destination Error Output"
                  synchronousInputId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;9"
              description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
              name="Replace any column that is &quot;-&quot; with NULL"
              version="9">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="30">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_185d3a14277d4486908fabfbef84fc5e.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{887da88a-aaed-40de-a2d1-8eaaa6494186}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_185d3a14277d4486908fabfbef84fc5e</RootNamespace>
    <AssemblyName>SC_185d3a14277d4486908fabfbef84fc5e</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptComponent" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptComponent" GeneratedNamespace="SC_185d3a14277d4486908fabfbef84fc5e" IconIndex="0"></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_SC120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        /*
         * Add your code here
         */
        try
        {
            Row.documentcodeSTAGING = (Row.documentcodeSTAGING == "-" ? null : Row.documentcodeSTAGING);
            Row.primecontractidSTAGING = (Row.primecontractidSTAGING == "-" ? null : Row.primecontractidSTAGING);
            Row.contractincludessubvendorsSTAGING = (Row.contractincludessubvendorsSTAGING == "-" ? null : Row.contractincludessubvendorsSTAGING);
            Row.vendorrecordtypeSTAGING = (Row.vendorrecordtypeSTAGING == "-" ? null : Row.vendorrecordtypeSTAGING);
            Row.primevendorSTAGING = (Row.primevendorSTAGING == "-" ? null : Row.primevendorSTAGING);
            Row.primevendormwbecategorySTAGING = (Row.primevendormwbecategorySTAGING == "-" ? null : Row.primevendormwbecategorySTAGING);
            Row.primecontractpurposeSTAGING = (Row.primecontractpurposeSTAGING == "-" ? null : Row.primecontractpurposeSTAGING);
            Row.primecontractcurrentamountSTAGING = (Row.primecontractcurrentamountSTAGING == "-" ? null : Row.primecontractcurrentamountSTAGING);
            Row.primecontractoriginalamountSTAGING = (Row.primecontractoriginalamountSTAGING == "-" ? null : Row.primecontractoriginalamountSTAGING);
            Row.primevendorspenttodateSTAGING = (Row.primevendorspenttodateSTAGING == "-" ? null : Row.primevendorspenttodateSTAGING);
            Row.primecontractstartdateSTAGING = (Row.primecontractstartdateSTAGING == "-" ? null : Row.primecontractstartdateSTAGING);
            Row.primecontractenddateSTAGING = (Row.primecontractenddateSTAGING == "-" ? null : Row.primecontractenddateSTAGING);
            Row.primecontractregistrationdateSTAGING = (Row.primecontractregistrationdateSTAGING == "-" ? null : Row.primecontractregistrationdateSTAGING);
            Row.primecontractingagencySTAGING = (Row.primecontractingagencySTAGING == "-" ? null : Row.primecontractingagencySTAGING);
            Row.primecontractversionSTAGING = (Row.primecontractversionSTAGING == "-" ? null : Row.primecontractversionSTAGING);
            Row.parentcontractidSTAGING = (Row.parentcontractidSTAGING == "-" ? null : Row.parentcontractidSTAGING);
            Row.primecontracttypeSTAGING = (Row.primecontracttypeSTAGING == "-" ? null : Row.primecontracttypeSTAGING);
            Row.primecontractawardmethodSTAGING = (Row.primecontractawardmethodSTAGING == "-" ? null : Row.primecontractawardmethodSTAGING);
            Row.primecontractexpensecategorySTAGING = (Row.primecontractexpensecategorySTAGING == "-" ? null : Row.primecontractexpensecategorySTAGING);
            Row.primecontractindustrySTAGING = (Row.primecontractindustrySTAGING == "-" ? null : Row.primecontractindustrySTAGING);
            Row.primecontractpinSTAGING = (Row.primecontractpinSTAGING == "-" ? null : Row.primecontractpinSTAGING);
            Row.primecontractaptpinSTAGING = (Row.primecontractaptpinSTAGING == "-" ? null : Row.primecontractaptpinSTAGING);
            Row.subvendorSTAGING = (Row.subvendorSTAGING == "-" ? null : Row.subvendorSTAGING);
            Row.subvendormwbecategorySTAGING = (Row.subvendormwbecategorySTAGING == "-" ? null : Row.subvendormwbecategorySTAGING);
            Row.subcontractpurposeSTAGING = (Row.subcontractpurposeSTAGING == "-" ? null : Row.subcontractpurposeSTAGING);
            Row.subvendorstatusinpipSTAGING = (Row.subvendorstatusinpipSTAGING == "-" ? null : Row.subvendorstatusinpipSTAGING);
            Row.subcontractindustrySTAGING = (Row.subcontractindustrySTAGING == "-" ? null : Row.subcontractindustrySTAGING);
            Row.subcontractcurrentamountSTAGING = (Row.subcontractcurrentamountSTAGING == "-" ? null : Row.subcontractcurrentamountSTAGING);
            Row.subcontractoriginalamountSTAGING = (Row.subcontractoriginalamountSTAGING == "-" ? null : Row.subcontractoriginalamountSTAGING);
            Row.subvendorpaidtodateSTAGING = (Row.subvendorpaidtodateSTAGING == "-" ? null : Row.subvendorpaidtodateSTAGING);
            Row.subcontractstartdateSTAGING = (Row.subcontractstartdateSTAGING == "-" ? null : Row.subcontractstartdateSTAGING);
            Row.subcontractenddateSTAGING = (Row.subcontractenddateSTAGING == "-" ? null : Row.subcontractenddateSTAGING);
            Row.subcontractreferenceidSTAGING = (Row.subcontractreferenceidSTAGING == "-" ? null : Row.subcontractreferenceidSTAGING);
        }
        catch (Exception ex)
        {
            Row.documentcodeSTAGING = "ERROR";
            Row.primecontractidSTAGING = "ERROR";
            Row.contractincludessubvendorsSTAGING = "ERROR";
            Row.vendorrecordtypeSTAGING = "ERROR";
            Row.primevendorSTAGING = "ERROR";
            Row.primevendormwbecategorySTAGING = "ERROR";
            Row.primecontractpurposeSTAGING = "ERROR";
            Row.primecontractcurrentamountSTAGING = "ERROR";
            Row.primecontractoriginalamountSTAGING = "ERROR";
            Row.primevendorspenttodateSTAGING = "ERROR";
            Row.primecontractstartdateSTAGING = "ERROR";
            Row.primecontractenddateSTAGING = "ERROR";
            Row.primecontractregistrationdateSTAGING = "ERROR";
            Row.primecontractingagencySTAGING = "ERROR";
            Row.primecontractversionSTAGING = "ERROR";
            Row.parentcontractidSTAGING = "ERROR";
            Row.primecontracttypeSTAGING = "ERROR";
            Row.primecontractawardmethodSTAGING = "ERROR";
            Row.primecontractexpensecategorySTAGING = "ERROR";
            Row.primecontractindustrySTAGING = "ERROR";
            Row.primecontractpinSTAGING = "ERROR";
            Row.primecontractaptpinSTAGING = "ERROR";
            Row.subvendorSTAGING = "ERROR";
            Row.subvendormwbecategorySTAGING = "ERROR";
            Row.subcontractpurposeSTAGING = "ERROR";
            Row.subvendorstatusinpipSTAGING = "ERROR";
            Row.subcontractindustrySTAGING = "ERROR";
            Row.subcontractcurrentamountSTAGING = "ERROR";
            Row.subcontractoriginalamountSTAGING = "ERROR";
            Row.subvendorpaidtodateSTAGING = "ERROR";
            Row.subcontractstartdateSTAGING = "ERROR";
            Row.subcontractenddateSTAGING = "ERROR";
            Row.subcontractreferenceidSTAGING = "ERROR";
        }

    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public DateTime LastUpdatedTimestampDerived
    {
        get
        {
            return Buffer.GetDateTime(BufferColumnIndexes[0]);
        }
    }
    public bool LastUpdatedTimestampDerived_IsNull
    {
        get
        {
            return IsNull(0);
        }
    }

    public String documentcodeSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[1]);
        }
        set
        {
            this[1] = value;
        }
    }
    public bool documentcodeSTAGING_IsNull
    {
        get
        {
            return IsNull(1);
        }
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String contractincludessubvendorsSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[2]);
        }
        set
        {
            this[2] = value;
        }
    }
    public bool contractincludessubvendorsSTAGING_IsNull
    {
        get
        {
            return IsNull(2);
        }
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String primecontractidSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[3]);
        }
        set
        {
            this[3] = value;
        }
    }
    public bool primecontractidSTAGING_IsNull
    {
        get
        {
            return IsNull(3);
        }
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String vendorrecordtypeSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[4]);
        }
        set
        {
            this[4] = value;
        }
    }
    public bool vendorrecordtypeSTAGING_IsNull
    {
        get
        {
            return IsNull(4);
        }
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String primevendorSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[5]);
        }
        set
        {
            this[5] = value;
        }
    }
    public bool primevendorSTAGING_IsNull
    {
        get
        {
            return IsNull(5);
        }
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String primevendormwbecategorySTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[6]);
        }
        set
        {
            this[6] = value;
        }
    }
    public bool primevendormwbecategorySTAGING_IsNull
    {
        get
        {
            return IsNull(6);
        }
        set
        {
            if (value)
            {
                SetNull(6);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String primecontractcurrentamountSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[7]);
        }
        set
        {
            this[7] = value;
        }
    }
    public bool primecontractcurrentamountSTAGING_IsNull
    {
        get
        {
            return IsNull(7);
        }
        set
        {
            if (value)
            {
                SetNull(7);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String primecontractpurposeSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[8]);
        }
        set
        {
            this[8] = value;
        }
    }
    public bool primecontractpurposeSTAGING_IsNull
    {
        get
        {
            return IsNull(8);
        }
        set
        {
            if (value)
            {
                SetNull(8);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String primecontractoriginalamountSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[9]);
        }
        set
        {
            this[9] = value;
        }
    }
    public bool primecontractoriginalamountSTAGING_IsNull
    {
        get
        {
            return IsNull(9);
        }
        set
        {
            if (value)
            {
                SetNull(9);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String primevendorspenttodateSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[10]);
        }
        set
        {
            this[10] = value;
        }
    }
    public bool primevendorspenttodateSTAGING_IsNull
    {
        get
        {
            return IsNull(10);
        }
        set
        {
            if (value)
            {
                SetNull(10);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String primecontractstartdateSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[11]);
        }
        set
        {
            this[11] = value;
        }
    }
    public bool primecontractstartdateSTAGING_IsNull
    {
        get
        {
            return IsNull(11);
        }
        set
        {
            if (value)
            {
                SetNull(11);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String primecontractenddateSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[12]);
        }
        set
        {
            this[12] = value;
        }
    }
    public bool primecontractenddateSTAGING_IsNull
    {
        get
        {
            return IsNull(12);
        }
        set
        {
            if (value)
            {
                SetNull(12);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String primecontractregistrationdateSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[13]);
        }
        set
        {
            this[13] = value;
        }
    }
    public bool primecontractregistrationdateSTAGING_IsNull
    {
        get
        {
            return IsNull(13);
        }
        set
        {
            if (value)
            {
                SetNull(13);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String primecontractingagencySTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[14]);
        }
        set
        {
            this[14] = value;
        }
    }
    public bool primecontractingagencySTAGING_IsNull
    {
        get
        {
            return IsNull(14);
        }
        set
        {
            if (value)
            {
                SetNull(14);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String primecontractversionSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[15]);
        }
        set
        {
            this[15] = value;
        }
    }
    public bool primecontractversionSTAGING_IsNull
    {
        get
        {
            return IsNull(15);
        }
        set
        {
            if (value)
            {
                SetNull(15);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String parentcontractidSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[16]);
        }
        set
        {
            this[16] = value;
        }
    }
    public bool parentcontractidSTAGING_IsNull
    {
        get
        {
            return IsNull(16);
        }
        set
        {
            if (value)
            {
                SetNull(16);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String primecontracttypeSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[17]);
        }
        set
        {
            this[17] = value;
        }
    }
    public bool primecontracttypeSTAGING_IsNull
    {
        get
        {
            return IsNull(17);
        }
        set
        {
            if (value)
            {
                SetNull(17);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String primecontractawardmethodSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[18]);
        }
        set
        {
            this[18] = value;
        }
    }
    public bool primecontractawardmethodSTAGING_IsNull
    {
        get
        {
            return IsNull(18);
        }
        set
        {
            if (value)
            {
                SetNull(18);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String primecontractexpensecategorySTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[19]);
        }
        set
        {
            this[19] = value;
        }
    }
    public bool primecontractexpensecategorySTAGING_IsNull
    {
        get
        {
            return IsNull(19);
        }
        set
        {
            if (value)
            {
                SetNull(19);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String primecontractindustrySTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[20]);
        }
        set
        {
            this[20] = value;
        }
    }
    public bool primecontractindustrySTAGING_IsNull
    {
        get
        {
            return IsNull(20);
        }
        set
        {
            if (value)
            {
                SetNull(20);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String primecontractpinSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[21]);
        }
        set
        {
            this[21] = value;
        }
    }
    public bool primecontractpinSTAGING_IsNull
    {
        get
        {
            return IsNull(21);
        }
        set
        {
            if (value)
            {
                SetNull(21);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String primecontractaptpinSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[22]);
        }
        set
        {
            this[22] = value;
        }
    }
    public bool primecontractaptpinSTAGING_IsNull
    {
        get
        {
            return IsNull(22);
        }
        set
        {
            if (value)
            {
                SetNull(22);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String subvendorSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[23]);
        }
        set
        {
            this[23] = value;
        }
    }
    public bool subvendorSTAGING_IsNull
    {
        get
        {
            return IsNull(23);
        }
        set
        {
            if (value)
            {
                SetNull(23);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String subvendormwbecategorySTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[24]);
        }
        set
        {
            this[24] = value;
        }
    }
    public bool subvendormwbecategorySTAGING_IsNull
    {
        get
        {
            return IsNull(24);
        }
        set
        {
            if (value)
            {
                SetNull(24);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String subcontractpurposeSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[25]);
        }
        set
        {
            this[25] = value;
        }
    }
    public bool subcontractpurposeSTAGING_IsNull
    {
        get
        {
            return IsNull(25);
        }
        set
        {
            if (value)
            {
                SetNull(25);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String subvendorstatusinpipSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[26]);
        }
        set
        {
            this[26] = value;
        }
    }
    public bool subvendorstatusinpipSTAGING_IsNull
    {
        get
        {
            return IsNull(26);
        }
        set
        {
            if (value)
            {
                SetNull(26);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String subcontractindustrySTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[27]);
        }
        set
        {
            this[27] = value;
        }
    }
    public bool subcontractindustrySTAGING_IsNull
    {
        get
        {
            return IsNull(27);
        }
        set
        {
            if (value)
            {
                SetNull(27);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String subcontractcurrentamountSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[28]);
        }
        set
        {
            this[28] = value;
        }
    }
    public bool subcontractcurrentamountSTAGING_IsNull
    {
        get
        {
            return IsNull(28);
        }
        set
        {
            if (value)
            {
                SetNull(28);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String subcontractoriginalamountSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[29]);
        }
        set
        {
            this[29] = value;
        }
    }
    public bool subcontractoriginalamountSTAGING_IsNull
    {
        get
        {
            return IsNull(29);
        }
        set
        {
            if (value)
            {
                SetNull(29);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String subvendorpaidtodateSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[30]);
        }
        set
        {
            this[30] = value;
        }
    }
    public bool subvendorpaidtodateSTAGING_IsNull
    {
        get
        {
            return IsNull(30);
        }
        set
        {
            if (value)
            {
                SetNull(30);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String subcontractstartdateSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[31]);
        }
        set
        {
            this[31] = value;
        }
    }
    public bool subcontractstartdateSTAGING_IsNull
    {
        get
        {
            return IsNull(31);
        }
        set
        {
            if (value)
            {
                SetNull(31);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String subcontractenddateSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[32]);
        }
        set
        {
            this[32] = value;
        }
    }
    public bool subcontractenddateSTAGING_IsNull
    {
        get
        {
            return IsNull(32);
        }
        set
        {
            if (value)
            {
                SetNull(32);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String subcontractreferenceidSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[33]);
        }
        set
        {
            this[33] = value;
        }
    }
    public bool subcontractreferenceidSTAGING_IsNull
    {
        get
        {
            return IsNull(33);
        }
        set
        {
            if (value)
            {
                SetNull(33);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 IDSTAGING
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[34]);
        }
    }
    public bool IDSTAGING_IsNull
    {
        get
        {
            return IsNull(34);
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_185d3a14277d4486908fabfbef84fc5e.Properties.Settings.get_Default():SC_185d3a14277d4486908fabfbef84fc5e.Properties.Sett" +
    "ings")]

namespace SC_185d3a14277d4486908fabfbef84fc5e.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>SC_185d3a14277d4486908fabfbef84fc5e</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>SC_185d3a14277d4486908fabfbef84fc5e</msb:DisplayName>
		<msb:ProjectId>{7446BF66-F851-44E7-9262-2B9AA3B8F676}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_185d3a14277d4486908fabfbef84fc5e.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="ComponentWrapper.cs"/>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_185d3a14277d4486908fabfbef84fc5e")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_185d3a14277d4486908fabfbef84fc5e")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_185d3a14277d4486908fabfbef84fc5e.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_185d3a14277d4486908fabfbef84fc5e.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_185d3a14277d4486908fabfbef84fc5e.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_185d3a14277d4486908fabfbef84fc5e.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_185d3a14277d4486908fabfbef84fc5e.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="2">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_185d3a14277d4486908fabfbef84fc5e.dll]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAFF0xV8AAAAAAAAAAOAAAiELAQsAAEoAAAAIAAAAAAAAbmkA
AAAgAAAAgAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAADAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAABRpAABXAAAAAIAAAAgEAAAAAAAAAAAAAAAAAAAA
AAAAAKAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAdEkAAAAgAAAASgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAgEAAAAgAAAAAYAAABMAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAKAAAAACAAAAUgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAABQ
aQAAAAAAAEgAAAACAAUAyDAAAEw4AAABAAAAAAAAABAwAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH4CKA0AAAoCAnOUAAAGfQEAAAQCAnOVAAAGfQIAAAQqkgRy
AQAAcBpvDgAACiwVAgUCAygPAAAKDgRzCQAABm8DAAAGKkorBwIDbwQAAAYDb5IAAAYt8SoGKh4C
KBEAAAoqHgIoEgAACioAAAswAwC1BQAAAAAAAAMDbwwAAAZyEQAAcCgTAAAKLQgDbwwAAAYrARRv
DQAABgMDbxQAAAZyEQAAcCgTAAAKLQgDbxQAAAYrARRvFQAABgMDbxAAAAZyEQAAcCgTAAAKLQgD
bxAAAAYrARRvEQAABgMDbxgAAAZyEQAAcCgTAAAKLQgDbxgAAAYrARRvGQAABgMDbxwAAAZyEQAA
cCgTAAAKLQgDbxwAAAYrARRvHQAABgMDbyAAAAZyEQAAcCgTAAAKLQgDbyAAAAYrARRvIQAABgMD
bygAAAZyEQAAcCgTAAAKLQgDbygAAAYrARRvKQAABgMDbyQAAAZyEQAAcCgTAAAKLQgDbyQAAAYr
ARRvJQAABgMDbywAAAZyEQAAcCgTAAAKLQgDbywAAAYrARRvLQAABgMDbzAAAAZyEQAAcCgTAAAK
LQgDbzAAAAYrARRvMQAABgMDbzQAAAZyEQAAcCgTAAAKLQgDbzQAAAYrARRvNQAABgMDbzgAAAZy
EQAAcCgTAAAKLQgDbzgAAAYrARRvOQAABgMDbzwAAAZyEQAAcCgTAAAKLQgDbzwAAAYrARRvPQAA
BgMDb0AAAAZyEQAAcCgTAAAKLQgDb0AAAAYrARRvQQAABgMDb0QAAAZyEQAAcCgTAAAKLQgDb0QA
AAYrARRvRQAABgMDb0gAAAZyEQAAcCgTAAAKLQgDb0gAAAYrARRvSQAABgMDb0wAAAZyEQAAcCgT
AAAKLQgDb0wAAAYrARRvTQAABgMDb1AAAAZyEQAAcCgTAAAKLQgDb1AAAAYrARRvUQAABgMDb1QA
AAZyEQAAcCgTAAAKLQgDb1QAAAYrARRvVQAABgMDb1gAAAZyEQAAcCgTAAAKLQgDb1gAAAYrARRv
WQAABgMDb1wAAAZyEQAAcCgTAAAKLQgDb1wAAAYrARRvXQAABgMDb2AAAAZyEQAAcCgTAAAKLQgD
b2AAAAYrARRvYQAABgMDb2QAAAZyEQAAcCgTAAAKLQgDb2QAAAYrARRvZQAABgMDb2gAAAZyEQAA
cCgTAAAKLQgDb2gAAAYrARRvaQAABgMDb2wAAAZyEQAAcCgTAAAKLQgDb2wAAAYrARRvbQAABgMD
b3AAAAZyEQAAcCgTAAAKLQgDb3AAAAYrARRvcQAABgMDb3QAAAZyEQAAcCgTAAAKLQgDb3QAAAYr
ARRvdQAABgMDb3gAAAZyEQAAcCgTAAAKLQgDb3gAAAYrARRveQAABgMDb3wAAAZyEQAAcCgTAAAK
LQgDb3wAAAYrARRvfQAABgMDb4AAAAZyEQAAcCgTAAAKLQgDb4AAAAYrARRvgQAABgMDb4QAAAZy
EQAAcCgTAAAKLQgDb4QAAAYrARRvhQAABgMDb4gAAAZyEQAAcCgTAAAKLQgDb4gAAAYrARRviQAA
BgMDb4wAAAZyEQAAcCgTAAAKLQgDb4wAAAYrARRvjQAABt1uAQAAJgNyFQAAcG8NAAAGA3IVAABw
bxUAAAYDchUAAHBvEQAABgNyFQAAcG8ZAAAGA3IVAABwbx0AAAYDchUAAHBvIQAABgNyFQAAcG8p
AAAGA3IVAABwbyUAAAYDchUAAHBvLQAABgNyFQAAcG8xAAAGA3IVAABwbzUAAAYDchUAAHBvOQAA
BgNyFQAAcG89AAAGA3IVAABwb0EAAAYDchUAAHBvRQAABgNyFQAAcG9JAAAGA3IVAABwb00AAAYD
chUAAHBvUQAABgNyFQAAcG9VAAAGA3IVAABwb1kAAAYDchUAAHBvXQAABgNyFQAAcG9hAAAGA3IV
AABwb2UAAAYDchUAAHBvaQAABgNyFQAAcG9tAAAGA3IVAABwb3EAAAYDchUAAHBvdQAABgNyFQAA
cG95AAAGA3IVAABwb30AAAYDchUAAHBvgQAABgNyFQAAcG+FAAAGA3IVAABwb4kAAAYDchUAAHBv
jQAABt4AKgAAAEEcAAAAAAAAAAAAAEYEAABGBAAAbgEAABkAAAEeAigBAAAGKioCAwQFKBQAAAoq
UgJ7FQAACgJ7FgAAChaUbxcAAAoqIgIWKBgAAAoqUgJ7FQAACgJ7FgAACheUbxkAAAoqJgIXAyga
AAAKKiICFygYAAAKKloDLAgCFygbAAAKKnIhAABwcxwAAAp6UgJ7FQAACgJ7FgAAChiUbxkAAAoq
JgIYAygaAAAKKiICGCgYAAAKKloDLAgCGCgbAAAKKnIhAABwcxwAAAp6UgJ7FQAACgJ7FgAAChmU
bxkAAAoqJgIZAygaAAAKKiICGSgYAAAKKloDLAgCGSgbAAAKKnIhAABwcxwAAAp6UgJ7FQAACgJ7
FgAAChqUbxkAAAoqJgIaAygaAAAKKiICGigYAAAKKloDLAgCGigbAAAKKnIhAABwcxwAAAp6UgJ7
FQAACgJ7FgAAChuUbxkAAAoqJgIbAygaAAAKKiICGygYAAAKKloDLAgCGygbAAAKKnIhAABwcxwA
AAp6UgJ7FQAACgJ7FgAAChyUbxkAAAoqJgIcAygaAAAKKiICHCgYAAAKKloDLAgCHCgbAAAKKnIh
AABwcxwAAAp6UgJ7FQAACgJ7FgAACh2UbxkAAAoqJgIdAygaAAAKKiICHSgYAAAKKloDLAgCHSgb
AAAKKnIhAABwcxwAAAp6UgJ7FQAACgJ7FgAACh6UbxkAAAoqJgIeAygaAAAKKiICHigYAAAKKloD
LAgCHigbAAAKKnIhAABwcxwAAAp6VgJ7FQAACgJ7FgAACh8JlG8ZAAAKKioCHwkDKBoAAAoqJgIf
CSgYAAAKKl4DLAkCHwkoGwAACipyIQAAcHMcAAAKelYCexUAAAoCexYAAAofCpRvGQAACioqAh8K
AygaAAAKKiYCHwooGAAACipeAywJAh8KKBsAAAoqciEAAHBzHAAACnpWAnsVAAAKAnsWAAAKHwuU
bxkAAAoqKgIfCwMoGgAACiomAh8LKBgAAAoqXgMsCQIfCygbAAAKKnIhAABwcxwAAAp6VgJ7FQAA
CgJ7FgAACh8MlG8ZAAAKKioCHwwDKBoAAAoqJgIfDCgYAAAKKl4DLAkCHwwoGwAACipyIQAAcHMc
AAAKelYCexUAAAoCexYAAAofDZRvGQAACioqAh8NAygaAAAKKiYCHw0oGAAACipeAywJAh8NKBsA
AAoqciEAAHBzHAAACnpWAnsVAAAKAnsWAAAKHw6UbxkAAAoqKgIfDgMoGgAACiomAh8OKBgAAAoq
XgMsCQIfDigbAAAKKnIhAABwcxwAAAp6VgJ7FQAACgJ7FgAACh8PlG8ZAAAKKioCHw8DKBoAAAoq
JgIfDygYAAAKKl4DLAkCHw8oGwAACipyIQAAcHMcAAAKelYCexUAAAoCexYAAAofEJRvGQAACioq
Ah8QAygaAAAKKiYCHxAoGAAACipeAywJAh8QKBsAAAoqciEAAHBzHAAACnpWAnsVAAAKAnsWAAAK
HxGUbxkAAAoqKgIfEQMoGgAACiomAh8RKBgAAAoqXgMsCQIfESgbAAAKKnIhAABwcxwAAAp6VgJ7
FQAACgJ7FgAACh8SlG8ZAAAKKioCHxIDKBoAAAoqJgIfEigYAAAKKl4DLAkCHxIoGwAACipyIQAA
cHMcAAAKelYCexUAAAoCexYAAAofE5RvGQAACioqAh8TAygaAAAKKiYCHxMoGAAACipeAywJAh8T
KBsAAAoqciEAAHBzHAAACnpWAnsVAAAKAnsWAAAKHxSUbxkAAAoqKgIfFAMoGgAACiomAh8UKBgA
AAoqXgMsCQIfFCgbAAAKKnIhAABwcxwAAAp6VgJ7FQAACgJ7FgAACh8VlG8ZAAAKKioCHxUDKBoA
AAoqJgIfFSgYAAAKKl4DLAkCHxUoGwAACipyIQAAcHMcAAAKelYCexUAAAoCexYAAAofFpRvGQAA
CioqAh8WAygaAAAKKiYCHxYoGAAACipeAywJAh8WKBsAAAoqciEAAHBzHAAACnpWAnsVAAAKAnsW
AAAKHxeUbxkAAAoqKgIfFwMoGgAACiomAh8XKBgAAAoqXgMsCQIfFygbAAAKKnIhAABwcxwAAAp6
VgJ7FQAACgJ7FgAACh8YlG8ZAAAKKioCHxgDKBoAAAoqJgIfGCgYAAAKKl4DLAkCHxgoGwAACipy
IQAAcHMcAAAKelYCexUAAAoCexYAAAofGZRvGQAACioqAh8ZAygaAAAKKiYCHxkoGAAACipeAywJ
Ah8ZKBsAAAoqciEAAHBzHAAACnpWAnsVAAAKAnsWAAAKHxqUbxkAAAoqKgIfGgMoGgAACiomAh8a
KBgAAAoqXgMsCQIfGigbAAAKKnIhAABwcxwAAAp6VgJ7FQAACgJ7FgAACh8blG8ZAAAKKioCHxsD
KBoAAAoqJgIfGygYAAAKKl4DLAkCHxsoGwAACipyIQAAcHMcAAAKelYCexUAAAoCexYAAAofHJRv
GQAACioqAh8cAygaAAAKKiYCHxwoGAAACipeAywJAh8cKBsAAAoqciEAAHBzHAAACnpWAnsVAAAK
AnsWAAAKHx2UbxkAAAoqKgIfHQMoGgAACiomAh8dKBgAAAoqXgMsCQIfHSgbAAAKKnIhAABwcxwA
AAp6VgJ7FQAACgJ7FgAACh8elG8ZAAAKKioCHx4DKBoAAAoqJgIfHigYAAAKKl4DLAkCHx4oGwAA
CipyIQAAcHMcAAAKelYCexUAAAoCexYAAAofH5RvGQAACioqAh8fAygaAAAKKiYCHx8oGAAACipe
AywJAh8fKBsAAAoqciEAAHBzHAAACnpWAnsVAAAKAnsWAAAKHyCUbxkAAAoqKgIfIAMoGgAACiom
Ah8gKBgAAAoqXgMsCQIfICgbAAAKKnIhAABwcxwAAAp6VgJ7FQAACgJ7FgAACh8hlG8ZAAAKKioC
HyEDKBoAAAoqJgIfISgYAAAKKl4DLAkCHyEoGwAACipyIQAAcHMcAAAKelYCexUAAAoCexYAAAof
IpRvHQAACiomAh8iKBgAAAoqHgIoHgAACioeAigfAAAKKjoCKCAAAAoCA30DAAAEKjoCKCAAAAoC
A30EAAAEKh4CKCAAAAoqAAATMAIALQAAAAEAABF+BQAABC0gcr4AAHDQBwAAAigiAAAKbyMAAApz
JAAACgoGgAUAAAR+BQAABCoafgYAAAQqHgKABgAABCoafgcAAAQqLnObAAAGgAcAAAQqHgIoJwAA
CioAAAAAALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwg
bXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tl
bj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAA
AAAAAAAAAAAAUEFEUEFEULQAAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAADk
EgAAI34AAFATAAD4IQAAI1N0cmluZ3MAAAAASDUAADABAAAjVVMAeDYAABAAAAAjR1VJRAAAAIg2
AADEAQAAI0Jsb2IAAAAAAAAAAgAAAVcVogEJAQAAAPolMwAWAAABAAAAIQAAAAgAAAAHAAAAnAAA
AE8AAAAnAAAADwAAAAEAAAADAAAASQAAAIwAAAABAAAABAAAAAEAAAAAAAoAAQAAAAAABgDuAM0A
BgD+AM0ACgAbARQBDgA3ASIBEgB2Ac0ABgCFAc0ACgDiARQBCgB7HWodCgCsHZcdCgCFHmseCgCw
Hp4eCgDHHp4eCgDkHp4eCgADH54eCgAcH54eCgA1H54eCgBQH54eCgBrH54eCgCEH54eCgC9H50f
CgDdH50fCgAfIBQBCgAmIBQBBgBPIM0ACgCCIBQBCgC6IBQBCgDwIN0gCgANIRQBCgASIRQBCgA2
IZ4eDgBiIUwhDgB7IUwhCgCQIZ0fAAAAAAEAAAAAAAEAAQABABAAMgAAAAUAAQABAAEAEABAAAAA
CAADAAUAAQAQAEsAAAAJAAMACQABABAAWAAAAA0AAwCUAAEAEABkAAAADQAEAJUAAAAQAG4AeAAN
AAUAlgAAARAApwB4ABEABwCaAAYAWAATAAYAZAAXAAEAWh1lAAEAWh1lABEAix1vABEAuB1zABEA
/B2RAFAgAAAAAIYYTwEbAAEAcCAAAAAAxgCTAR8AAQCVIAAAAADGAaABKQAFAKggAAAAAMYBtAEp
AAYAqiAAAAAAxgDLARsABwCyIAAAAADGANYBGwAHALwgAAAAAMYAtAEpAAcAnCYAAAAAhhhPARsA
CACkJgAAAACGGE8BLwAIAK8mAAAAAIYI6wE5AAsAxCYAAAAAhggLAj4ACwDNJgAAAACGCDICQgAL
AOImAAAAAIYISgJGAAsA7CYAAAAAhghiAj4ADAD1JgAAAACGCIECSwAMAAwnAAAAAIYIoAJCAA0A
IScAAAAAhgjGAkYADQArJwAAAACGCOwCPgAOADQnAAAAAIYIGQNLAA4ASycAAAAAhghGA0IADwBg
JwAAAACGCGEDRgAPAGonAAAAAIYIfAM+ABAAcycAAAAAhgieA0sAEACKJwAAAACGCMADQgARAJ8n
AAAAAIYI3ANGABEAqScAAAAAhgj4Az4AEgCyJwAAAACGCBsESwASAMknAAAAAIYIPgRCABMA3icA
AAAAhghVBEYAEwDoJwAAAACGCGwEPgAUAPEnAAAAAIYIigRLABQACCgAAAAAhgioBEIAFQAdKAAA
AACGCMsERgAVACcoAAAAAIYI7gQ+ABYAMCgAAAAAhggYBUsAFgBHKAAAAACGCEIFQgAXAFwoAAAA
AIYIaAVGABcAZigAAAAAhgiOBT4AGABvKAAAAACGCLsFSwAYAIYoAAAAAIYI6AVCABkAmygAAAAA
hggIBkYAGQClKAAAAACGCCgGPgAaAK4oAAAAAIYITwZLABoAxSgAAAAAhgh2BkIAGwDbKAAAAACG
CJ0GRgAbAOYoAAAAAIYIxAY+ABwA8CgAAAAAhgjyBksAHAAIKQAAAACGCCAHQgAdAB4pAAAAAIYI
QgdGAB0AKSkAAAAAhghkBz4AHgAzKQAAAACGCI0HSwAeAEspAAAAAIYItgdCAB8AYSkAAAAAhgjY
B0YAHwBsKQAAAACGCPoHPgAgAHYpAAAAAIYIIwhLACAAjikAAAAAhghMCEIAIQCkKQAAAACGCGwI
RgAhAK8pAAAAAIYIjAg+ACIAuSkAAAAAhgizCEsAIgDRKQAAAACGCNoIQgAjAOcpAAAAAIYIAwlG
ACMA8ikAAAAAhggsCT4AJAD8KQAAAACGCFwJSwAkABQqAAAAAIYIjAlCACUAKioAAAAAhgiuCUYA
JQA1KgAAAACGCNAJPgAmAD8qAAAAAIYI+QlLACYAVyoAAAAAhggiCkIAJwBtKgAAAACGCEIKRgAn
AHgqAAAAAIYIYgo+ACgAgioAAAAAhgiJCksAKACaKgAAAACGCLAKQgApALAqAAAAAIYIzApGACkA
uyoAAAAAhgjoCj4AKgDFKgAAAACGCAsLSwAqAN0qAAAAAIYILgtCACsA8yoAAAAAhghLC0YAKwD+
KgAAAACGCGgLPgAsAAgrAAAAAIYIjAtLACwAICsAAAAAhgiwC0IALQA2KwAAAACGCNQLRgAtAEEr
AAAAAIYI+As+AC4ASysAAAAAhggjDEsALgBjKwAAAACGCE4MQgAvAHkrAAAAAIYIdgxGAC8AhCsA
AAAAhgieDD4AMACOKwAAAACGCM0MSwAwAKYrAAAAAIYI/AxCADEAvCsAAAAAhggdDUYAMQDHKwAA
AACGCD4NPgAyANErAAAAAIYIZg1LADIA6SsAAAAAhgiODUIAMwD/KwAAAACGCKoNRgAzAAosAAAA
AIYIxg0+ADQAFCwAAAAAhgjpDUsANAAsLAAAAACGCAwOQgA1AEIsAAAAAIYIKw5GADUATSwAAAAA
hghKDj4ANgBXLAAAAACGCHAOSwA2AG8sAAAAAIYIlg5CADcAhSwAAAAAhgirDkYANwCQLAAAAACG
CMAOPgA4AJosAAAAAIYI3A5LADgAsiwAAAAAhgj4DkIAOQDILAAAAACGCBkPRgA5ANMsAAAAAIYI
Og8+ADoA3SwAAAAAhghiD0sAOgD1LAAAAACGCIoPQgA7AAstAAAAAIYIqA9GADsAFi0AAAAAhgjG
Dz4APAAgLQAAAACGCOsPSwA8ADgtAAAAAIYIEBBCAD0ATi0AAAAAhggwEEYAPQBZLQAAAACGCFAQ
PgA+AGMtAAAAAIYIdxBLAD4Aey0AAAAAhgieEEIAPwCRLQAAAACGCL0QRgA/AJwtAAAAAIYI3BA+
AEAApi0AAAAAhggCEUsAQAC+LQAAAACGCCgRQgBBANQtAAAAAIYITBFGAEEA3y0AAAAAhghwET4A
QgDpLQAAAACGCJsRSwBCAAEuAAAAAIYIxhFCAEMAFy4AAAAAhgjrEUYAQwAiLgAAAACGCBASPgBE
ACwuAAAAAIYIPBJLAEQARC4AAAAAhghoEkIARQBaLgAAAACGCIcSRgBFAGUuAAAAAIYIphI+AEYA
by4AAAAAhgjMEksARgCHLgAAAACGCPISQgBHAJ0uAAAAAIYIEhNGAEcAqC4AAAAAhggyEz4ASACy
LgAAAACGCFkTSwBIAMouAAAAAIYIgBNCAEkA4C4AAAAAhgieE0YASQDrLgAAAACGCLwTPgBKAPUu
AAAAAIYI4RNLAEoADS8AAAAAhggGFEIASwAjLwAAAACGCCgURgBLAC4vAAAAAIYIShQ+AEwAOC8A
AAAAhghzFEsATABQLwAAAACGCJwUUABNAGYvAAAAAIYIqhQ+AE0AcC8AAAAAhgC/FD4ATQB4LwAA
AACGAMcUPgBNAIAvAAAAAIYYTwFpAE0Ajy8AAAAAhhhPAWkATgCeLwAAAACDGE8BGwBPAKgvAAAA
AJMIyB13AE8A4S8AAAAAkwjcHXwATwDoLwAAAACTCOgdgQBPAPAvAAAAAJYIDB6VAFAAAzAAAAAA
hhhPARsAUAD3LwAAAACRGKshBwFQAAAAAQAgHgAAAgAoHgAAAwAyHgAABAA5HgAAAQAyHgAAAQBD
HgAAAQBDHgAAAQAyHgAAAgBHHgAAAwA5HgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAA
AQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBb
HgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAA
AQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBb
HgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAA
AQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBb
HgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAA
AQBbHgAAAQBbHgAAAQBbHgAAAQBbHgAAAQBhHgAAAQBhHgAAAQBbHlEATwFGAFkATwFGAGEATwFG
AGkATwFGAHEATwFGAHkATwFGAIEATwFGAIkATwFGAJEATwFGAJkATwFGAKEATwGfAKkATwEbAAkA
TwEbALEANyCkAAkAPiCrAMEATwEbAAkAywEbAAkA1gEbALEAdiC2ABEATwEvABEAMh68ABEARx7A
ACkAjCDEABEAmCDKACkAnyDPABEAqSDUABEAsiCfANEATwFGACkA1CDaABEAvxQ+ABEAxxQ+ABkA
TwEbANkATwEbAOEAJCHfAOEAPyHmAEEATwHrAPkATwH3AAkBTwEbACEATwEbAC4AGwB8AS4AYwCi
AS4ACwALAS4AEwBTAS4AIwB8AS4AKwB8AS4AMwBTAS4AOwCCAS4AQwB8AS4AWwCZAWMAgwCxAOEA
MwGxAOMACwGxAOkIKwH+AAkJKwH+APIABAABAAcARwAIAEkAAADTFFQAAADvFFkAAAASFV0AAAAm
FVkAAABBFV0AAABjFVkAAACMFV0AAACjFVkAAADBFV0AAADZFVkAAAD4FV0AAAALFlkAAAAlFl0A
AABEFlkAAABqFl0AAACMFlkAAAC1Fl0AAADRFlkAAAD0Fl0AAAAXF1kAAABBF10AAABfF1kAAACE
F10AAACiF1kAAADHF10AAADjF1kAAAAGGF0AAAArGFkAAABXGF0AAAB1GFkAAACaGF0AAAC2GFkA
AADZGF0AAADxGFkAAAAQGV0AAAApGVkAAABJGV0AAABpGVkAAACQGV0AAAC0GVkAAADfGV0AAAD8
GVkAAAAgGl0AAAA4GlkAAABXGl0AAAByGlkAAACUGl0AAAClGlkAAAC9Gl0AAADaGlkAAAD+Gl0A
AAAYG1kAAAA5G10AAABVG1kAAAB4G10AAACTG1kAAAC1G10AAADVG1kAAAD8G10AAAAdHFkAAABF
HF0AAABgHFkAAACCHF0AAACeHFkAAADBHF0AAADbHFkAAAD8HF0AAAAaHVkAAAA/HWEAAABJHVkA
AAB7HYcAAAD0HYwAAAAYHpoAAgAKAAMAAgALAAUAAgAMAAcAAQANAAcAAgAOAAkAAQAPAAkAAgAQ
AAsAAQARAAsAAgASAA0AAQATAA0AAgAUAA8AAQAVAA8AAgAWABEAAQAXABEAAQAZABMAAgAYABMA
AgAaABUAAQAbABUAAgAcABcAAQAdABcAAgAeABkAAQAfABkAAQAhABsAAgAgABsAAgAiAB0AAQAj
AB0AAQAlAB8AAgAkAB8AAQAnACEAAgAmACEAAgAoACMAAQApACMAAQArACUAAgAqACUAAgAsACcA
AQAtACcAAgAuACkAAQAvACkAAgAwACsAAQAxACsAAQAzAC0AAgAyAC0AAgA0AC8AAQA1AC8AAQA3
ADEAAgA2ADEAAQA5ADMAAgA4ADMAAgA6ADUAAQA7ADUAAgA8ADcAAQA9ADcAAgA+ADkAAQA/ADkA
AgBAADsAAQBBADsAAgBCAD0AAQBDAD0AAQBFAD8AAgBEAD8AAgBGAEEAAQBHAEEAAQBJAEMAAgBI
AEMAAQBLAEUAAgBKAEUAAgBMAEcAAQBNAEcAAQBPAEkAAgBOAEkAAgBQAEsAAQBRAEsAAgBSAE0A
AQBTAE0AAgBUAE8AAQBVAE8AAQBXAFEAAgBWAFEAAgBYAFMAAQBZAFMAAQBbAFUAAgBaAFUAAQBd
AFcAAgBcAFcAAgBeAFkAAQBfAFkAAgBgAFsAAQBhAFsAAgBiAF0AAQBjAF0AAgBkAF8AAQBlAF8A
AgBmAGEAAQBnAGEAAQBpAGMAAgBoAGMAAgBqAGUAAQBrAGUAAQBtAGcAAgBsAGcAAQBvAGkAAgBu
AGkAAgBwAGsAAQBxAGsAAgByAG0AAQBzAG0AAgB0AG8AAQB1AG8AAgB2AHEAAQB3AHEAAgB4AHMA
AQB5AHMAAQB7AHUAAgB6AHUAAgB8AHcAAQB9AHcAAQB/AHkAAgB+AHkAAQCBAHsAAgCAAHsAAgCC
AH0AAQCDAH0AAgCEAH8AAQCFAH8AAgCGAIEAAQCHAIEAAgCIAIMAAQCJAIMAAgCKAIUAAQCLAIUA
AQCNAIcAAgCMAIcAAgCOAIkAAQCPAIkAAgCQAIsAAgCRAI0AAgCXAI8AAgCYAJEAAQCZAJEAAgCa
AJMABIAAAAEAAADXHQB8AAAAAAAA+x8AAAwAAAAAAAAAAAAAAAEAsAAAAAAABAAAAAAAAAAAAAAA
CgALAQAAAAAEAAAAAAAAAAAAAAAKABQBAAAAAAwAAAAAAAAAAAAAAAEAVQEAAAAAAAAAAAEAAACy
IQAAAAAAPE1vZHVsZT4AU0NfMTg1ZDNhMTQyNzdkNDQ4NjkwOGZhYmZiZWY4NGZjNWUuZGxsAFVz
ZXJDb21wb25lbnQAU2NyaXB0TWFpbgBJbnB1dDBCdWZmZXIAQ29ubmVjdGlvbnMAVmFyaWFibGVz
AFJlc291cmNlcwBTQ18xODVkM2ExNDI3N2Q0NDg2OTA4ZmFiZmJlZjg0ZmM1ZS5Qcm9wZXJ0aWVz
AFNldHRpbmdzAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuVHhTY3JpcHQATWljcm9zb2Z0LlNxbFNlcnZl
ci5EdHMuUGlwZWxpbmUAU2NyaXB0Q29tcG9uZW50AFNjcmlwdEJ1ZmZlcgBtc2NvcmxpYgBTeXN0
ZW0AT2JqZWN0AFN5c3RlbS5Db25maWd1cmF0aW9uAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAC5j
dG9yAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuUGlwZWxpbmVIb3N0AFBpcGVsaW5lQnVmZmVyAE91dHB1
dE5hbWVNYXAAUHJvY2Vzc0lucHV0AElucHV0MF9Qcm9jZXNzSW5wdXQASW5wdXQwX1Byb2Nlc3NJ
bnB1dFJvdwBQcmVFeGVjdXRlAFBvc3RFeGVjdXRlAERhdGVUaW1lAGdldF9MYXN0VXBkYXRlZFRp
bWVzdGFtcERlcml2ZWQAZ2V0X0xhc3RVcGRhdGVkVGltZXN0YW1wRGVyaXZlZF9Jc051bGwAZ2V0
X2RvY3VtZW50Y29kZVNUQUdJTkcAc2V0X2RvY3VtZW50Y29kZVNUQUdJTkcAZ2V0X2RvY3VtZW50
Y29kZVNUQUdJTkdfSXNOdWxsAHNldF9kb2N1bWVudGNvZGVTVEFHSU5HX0lzTnVsbABnZXRfY29u
dHJhY3RpbmNsdWRlc3N1YnZlbmRvcnNTVEFHSU5HAHNldF9jb250cmFjdGluY2x1ZGVzc3VidmVu
ZG9yc1NUQUdJTkcAZ2V0X2NvbnRyYWN0aW5jbHVkZXNzdWJ2ZW5kb3JzU1RBR0lOR19Jc051bGwA
c2V0X2NvbnRyYWN0aW5jbHVkZXNzdWJ2ZW5kb3JzU1RBR0lOR19Jc051bGwAZ2V0X3ByaW1lY29u
dHJhY3RpZFNUQUdJTkcAc2V0X3ByaW1lY29udHJhY3RpZFNUQUdJTkcAZ2V0X3ByaW1lY29udHJh
Y3RpZFNUQUdJTkdfSXNOdWxsAHNldF9wcmltZWNvbnRyYWN0aWRTVEFHSU5HX0lzTnVsbABnZXRf
dmVuZG9ycmVjb3JkdHlwZVNUQUdJTkcAc2V0X3ZlbmRvcnJlY29yZHR5cGVTVEFHSU5HAGdldF92
ZW5kb3JyZWNvcmR0eXBlU1RBR0lOR19Jc051bGwAc2V0X3ZlbmRvcnJlY29yZHR5cGVTVEFHSU5H
X0lzTnVsbABnZXRfcHJpbWV2ZW5kb3JTVEFHSU5HAHNldF9wcmltZXZlbmRvclNUQUdJTkcAZ2V0
X3ByaW1ldmVuZG9yU1RBR0lOR19Jc051bGwAc2V0X3ByaW1ldmVuZG9yU1RBR0lOR19Jc051bGwA
Z2V0X3ByaW1ldmVuZG9ybXdiZWNhdGVnb3J5U1RBR0lORwBzZXRfcHJpbWV2ZW5kb3Jtd2JlY2F0
ZWdvcnlTVEFHSU5HAGdldF9wcmltZXZlbmRvcm13YmVjYXRlZ29yeVNUQUdJTkdfSXNOdWxsAHNl
dF9wcmltZXZlbmRvcm13YmVjYXRlZ29yeVNUQUdJTkdfSXNOdWxsAGdldF9wcmltZWNvbnRyYWN0
Y3VycmVudGFtb3VudFNUQUdJTkcAc2V0X3ByaW1lY29udHJhY3RjdXJyZW50YW1vdW50U1RBR0lO
RwBnZXRfcHJpbWVjb250cmFjdGN1cnJlbnRhbW91bnRTVEFHSU5HX0lzTnVsbABzZXRfcHJpbWVj
b250cmFjdGN1cnJlbnRhbW91bnRTVEFHSU5HX0lzTnVsbABnZXRfcHJpbWVjb250cmFjdHB1cnBv
c2VTVEFHSU5HAHNldF9wcmltZWNvbnRyYWN0cHVycG9zZVNUQUdJTkcAZ2V0X3ByaW1lY29udHJh
Y3RwdXJwb3NlU1RBR0lOR19Jc051bGwAc2V0X3ByaW1lY29udHJhY3RwdXJwb3NlU1RBR0lOR19J
c051bGwAZ2V0X3ByaW1lY29udHJhY3RvcmlnaW5hbGFtb3VudFNUQUdJTkcAc2V0X3ByaW1lY29u
dHJhY3RvcmlnaW5hbGFtb3VudFNUQUdJTkcAZ2V0X3ByaW1lY29udHJhY3RvcmlnaW5hbGFtb3Vu
dFNUQUdJTkdfSXNOdWxsAHNldF9wcmltZWNvbnRyYWN0b3JpZ2luYWxhbW91bnRTVEFHSU5HX0lz
TnVsbABnZXRfcHJpbWV2ZW5kb3JzcGVudHRvZGF0ZVNUQUdJTkcAc2V0X3ByaW1ldmVuZG9yc3Bl
bnR0b2RhdGVTVEFHSU5HAGdldF9wcmltZXZlbmRvcnNwZW50dG9kYXRlU1RBR0lOR19Jc051bGwA
c2V0X3ByaW1ldmVuZG9yc3BlbnR0b2RhdGVTVEFHSU5HX0lzTnVsbABnZXRfcHJpbWVjb250cmFj
dHN0YXJ0ZGF0ZVNUQUdJTkcAc2V0X3ByaW1lY29udHJhY3RzdGFydGRhdGVTVEFHSU5HAGdldF9w
cmltZWNvbnRyYWN0c3RhcnRkYXRlU1RBR0lOR19Jc051bGwAc2V0X3ByaW1lY29udHJhY3RzdGFy
dGRhdGVTVEFHSU5HX0lzTnVsbABnZXRfcHJpbWVjb250cmFjdGVuZGRhdGVTVEFHSU5HAHNldF9w
cmltZWNvbnRyYWN0ZW5kZGF0ZVNUQUdJTkcAZ2V0X3ByaW1lY29udHJhY3RlbmRkYXRlU1RBR0lO
R19Jc051bGwAc2V0X3ByaW1lY29udHJhY3RlbmRkYXRlU1RBR0lOR19Jc051bGwAZ2V0X3ByaW1l
Y29udHJhY3RyZWdpc3RyYXRpb25kYXRlU1RBR0lORwBzZXRfcHJpbWVjb250cmFjdHJlZ2lzdHJh
dGlvbmRhdGVTVEFHSU5HAGdldF9wcmltZWNvbnRyYWN0cmVnaXN0cmF0aW9uZGF0ZVNUQUdJTkdf
SXNOdWxsAHNldF9wcmltZWNvbnRyYWN0cmVnaXN0cmF0aW9uZGF0ZVNUQUdJTkdfSXNOdWxsAGdl
dF9wcmltZWNvbnRyYWN0aW5nYWdlbmN5U1RBR0lORwBzZXRfcHJpbWVjb250cmFjdGluZ2FnZW5j
eVNUQUdJTkcAZ2V0X3ByaW1lY29udHJhY3RpbmdhZ2VuY3lTVEFHSU5HX0lzTnVsbABzZXRfcHJp
bWVjb250cmFjdGluZ2FnZW5jeVNUQUdJTkdfSXNOdWxsAGdldF9wcmltZWNvbnRyYWN0dmVyc2lv
blNUQUdJTkcAc2V0X3ByaW1lY29udHJhY3R2ZXJzaW9uU1RBR0lORwBnZXRfcHJpbWVjb250cmFj
dHZlcnNpb25TVEFHSU5HX0lzTnVsbABzZXRfcHJpbWVjb250cmFjdHZlcnNpb25TVEFHSU5HX0lz
TnVsbABnZXRfcGFyZW50Y29udHJhY3RpZFNUQUdJTkcAc2V0X3BhcmVudGNvbnRyYWN0aWRTVEFH
SU5HAGdldF9wYXJlbnRjb250cmFjdGlkU1RBR0lOR19Jc051bGwAc2V0X3BhcmVudGNvbnRyYWN0
aWRTVEFHSU5HX0lzTnVsbABnZXRfcHJpbWVjb250cmFjdHR5cGVTVEFHSU5HAHNldF9wcmltZWNv
bnRyYWN0dHlwZVNUQUdJTkcAZ2V0X3ByaW1lY29udHJhY3R0eXBlU1RBR0lOR19Jc051bGwAc2V0
X3ByaW1lY29udHJhY3R0eXBlU1RBR0lOR19Jc051bGwAZ2V0X3ByaW1lY29udHJhY3Rhd2FyZG1l
dGhvZFNUQUdJTkcAc2V0X3ByaW1lY29udHJhY3Rhd2FyZG1ldGhvZFNUQUdJTkcAZ2V0X3ByaW1l
Y29udHJhY3Rhd2FyZG1ldGhvZFNUQUdJTkdfSXNOdWxsAHNldF9wcmltZWNvbnRyYWN0YXdhcmRt
ZXRob2RTVEFHSU5HX0lzTnVsbABnZXRfcHJpbWVjb250cmFjdGV4cGVuc2VjYXRlZ29yeVNUQUdJ
TkcAc2V0X3ByaW1lY29udHJhY3RleHBlbnNlY2F0ZWdvcnlTVEFHSU5HAGdldF9wcmltZWNvbnRy
YWN0ZXhwZW5zZWNhdGVnb3J5U1RBR0lOR19Jc051bGwAc2V0X3ByaW1lY29udHJhY3RleHBlbnNl
Y2F0ZWdvcnlTVEFHSU5HX0lzTnVsbABnZXRfcHJpbWVjb250cmFjdGluZHVzdHJ5U1RBR0lORwBz
ZXRfcHJpbWVjb250cmFjdGluZHVzdHJ5U1RBR0lORwBnZXRfcHJpbWVjb250cmFjdGluZHVzdHJ5
U1RBR0lOR19Jc051bGwAc2V0X3ByaW1lY29udHJhY3RpbmR1c3RyeVNUQUdJTkdfSXNOdWxsAGdl
dF9wcmltZWNvbnRyYWN0cGluU1RBR0lORwBzZXRfcHJpbWVjb250cmFjdHBpblNUQUdJTkcAZ2V0
X3ByaW1lY29udHJhY3RwaW5TVEFHSU5HX0lzTnVsbABzZXRfcHJpbWVjb250cmFjdHBpblNUQUdJ
TkdfSXNOdWxsAGdldF9wcmltZWNvbnRyYWN0YXB0cGluU1RBR0lORwBzZXRfcHJpbWVjb250cmFj
dGFwdHBpblNUQUdJTkcAZ2V0X3ByaW1lY29udHJhY3RhcHRwaW5TVEFHSU5HX0lzTnVsbABzZXRf
cHJpbWVjb250cmFjdGFwdHBpblNUQUdJTkdfSXNOdWxsAGdldF9zdWJ2ZW5kb3JTVEFHSU5HAHNl
dF9zdWJ2ZW5kb3JTVEFHSU5HAGdldF9zdWJ2ZW5kb3JTVEFHSU5HX0lzTnVsbABzZXRfc3VidmVu
ZG9yU1RBR0lOR19Jc051bGwAZ2V0X3N1YnZlbmRvcm13YmVjYXRlZ29yeVNUQUdJTkcAc2V0X3N1
YnZlbmRvcm13YmVjYXRlZ29yeVNUQUdJTkcAZ2V0X3N1YnZlbmRvcm13YmVjYXRlZ29yeVNUQUdJ
TkdfSXNOdWxsAHNldF9zdWJ2ZW5kb3Jtd2JlY2F0ZWdvcnlTVEFHSU5HX0lzTnVsbABnZXRfc3Vi
Y29udHJhY3RwdXJwb3NlU1RBR0lORwBzZXRfc3ViY29udHJhY3RwdXJwb3NlU1RBR0lORwBnZXRf
c3ViY29udHJhY3RwdXJwb3NlU1RBR0lOR19Jc051bGwAc2V0X3N1YmNvbnRyYWN0cHVycG9zZVNU
QUdJTkdfSXNOdWxsAGdldF9zdWJ2ZW5kb3JzdGF0dXNpbnBpcFNUQUdJTkcAc2V0X3N1YnZlbmRv
cnN0YXR1c2lucGlwU1RBR0lORwBnZXRfc3VidmVuZG9yc3RhdHVzaW5waXBTVEFHSU5HX0lzTnVs
bABzZXRfc3VidmVuZG9yc3RhdHVzaW5waXBTVEFHSU5HX0lzTnVsbABnZXRfc3ViY29udHJhY3Rp
bmR1c3RyeVNUQUdJTkcAc2V0X3N1YmNvbnRyYWN0aW5kdXN0cnlTVEFHSU5HAGdldF9zdWJjb250
cmFjdGluZHVzdHJ5U1RBR0lOR19Jc051bGwAc2V0X3N1YmNvbnRyYWN0aW5kdXN0cnlTVEFHSU5H
X0lzTnVsbABnZXRfc3ViY29udHJhY3RjdXJyZW50YW1vdW50U1RBR0lORwBzZXRfc3ViY29udHJh
Y3RjdXJyZW50YW1vdW50U1RBR0lORwBnZXRfc3ViY29udHJhY3RjdXJyZW50YW1vdW50U1RBR0lO
R19Jc051bGwAc2V0X3N1YmNvbnRyYWN0Y3VycmVudGFtb3VudFNUQUdJTkdfSXNOdWxsAGdldF9z
dWJjb250cmFjdG9yaWdpbmFsYW1vdW50U1RBR0lORwBzZXRfc3ViY29udHJhY3RvcmlnaW5hbGFt
b3VudFNUQUdJTkcAZ2V0X3N1YmNvbnRyYWN0b3JpZ2luYWxhbW91bnRTVEFHSU5HX0lzTnVsbABz
ZXRfc3ViY29udHJhY3RvcmlnaW5hbGFtb3VudFNUQUdJTkdfSXNOdWxsAGdldF9zdWJ2ZW5kb3Jw
YWlkdG9kYXRlU1RBR0lORwBzZXRfc3VidmVuZG9ycGFpZHRvZGF0ZVNUQUdJTkcAZ2V0X3N1YnZl
bmRvcnBhaWR0b2RhdGVTVEFHSU5HX0lzTnVsbABzZXRfc3VidmVuZG9ycGFpZHRvZGF0ZVNUQUdJ
TkdfSXNOdWxsAGdldF9zdWJjb250cmFjdHN0YXJ0ZGF0ZVNUQUdJTkcAc2V0X3N1YmNvbnRyYWN0
c3RhcnRkYXRlU1RBR0lORwBnZXRfc3ViY29udHJhY3RzdGFydGRhdGVTVEFHSU5HX0lzTnVsbABz
ZXRfc3ViY29udHJhY3RzdGFydGRhdGVTVEFHSU5HX0lzTnVsbABnZXRfc3ViY29udHJhY3RlbmRk
YXRlU1RBR0lORwBzZXRfc3ViY29udHJhY3RlbmRkYXRlU1RBR0lORwBnZXRfc3ViY29udHJhY3Rl
bmRkYXRlU1RBR0lOR19Jc051bGwAc2V0X3N1YmNvbnRyYWN0ZW5kZGF0ZVNUQUdJTkdfSXNOdWxs
AGdldF9zdWJjb250cmFjdHJlZmVyZW5jZWlkU1RBR0lORwBzZXRfc3ViY29udHJhY3RyZWZlcmVu
Y2VpZFNUQUdJTkcAZ2V0X3N1YmNvbnRyYWN0cmVmZXJlbmNlaWRTVEFHSU5HX0lzTnVsbABzZXRf
c3ViY29udHJhY3RyZWZlcmVuY2VpZFNUQUdJTkdfSXNOdWxsAGdldF9JRFNUQUdJTkcAZ2V0X0lE
U1RBR0lOR19Jc051bGwATmV4dFJvdwBFbmRPZlJvd3NldABMYXN0VXBkYXRlZFRpbWVzdGFtcERl
cml2ZWQATGFzdFVwZGF0ZWRUaW1lc3RhbXBEZXJpdmVkX0lzTnVsbABkb2N1bWVudGNvZGVTVEFH
SU5HAGRvY3VtZW50Y29kZVNUQUdJTkdfSXNOdWxsAGNvbnRyYWN0aW5jbHVkZXNzdWJ2ZW5kb3Jz
U1RBR0lORwBjb250cmFjdGluY2x1ZGVzc3VidmVuZG9yc1NUQUdJTkdfSXNOdWxsAHByaW1lY29u
dHJhY3RpZFNUQUdJTkcAcHJpbWVjb250cmFjdGlkU1RBR0lOR19Jc051bGwAdmVuZG9ycmVjb3Jk
dHlwZVNUQUdJTkcAdmVuZG9ycmVjb3JkdHlwZVNUQUdJTkdfSXNOdWxsAHByaW1ldmVuZG9yU1RB
R0lORwBwcmltZXZlbmRvclNUQUdJTkdfSXNOdWxsAHByaW1ldmVuZG9ybXdiZWNhdGVnb3J5U1RB
R0lORwBwcmltZXZlbmRvcm13YmVjYXRlZ29yeVNUQUdJTkdfSXNOdWxsAHByaW1lY29udHJhY3Rj
dXJyZW50YW1vdW50U1RBR0lORwBwcmltZWNvbnRyYWN0Y3VycmVudGFtb3VudFNUQUdJTkdfSXNO
dWxsAHByaW1lY29udHJhY3RwdXJwb3NlU1RBR0lORwBwcmltZWNvbnRyYWN0cHVycG9zZVNUQUdJ
TkdfSXNOdWxsAHByaW1lY29udHJhY3RvcmlnaW5hbGFtb3VudFNUQUdJTkcAcHJpbWVjb250cmFj
dG9yaWdpbmFsYW1vdW50U1RBR0lOR19Jc051bGwAcHJpbWV2ZW5kb3JzcGVudHRvZGF0ZVNUQUdJ
TkcAcHJpbWV2ZW5kb3JzcGVudHRvZGF0ZVNUQUdJTkdfSXNOdWxsAHByaW1lY29udHJhY3RzdGFy
dGRhdGVTVEFHSU5HAHByaW1lY29udHJhY3RzdGFydGRhdGVTVEFHSU5HX0lzTnVsbABwcmltZWNv
bnRyYWN0ZW5kZGF0ZVNUQUdJTkcAcHJpbWVjb250cmFjdGVuZGRhdGVTVEFHSU5HX0lzTnVsbABw
cmltZWNvbnRyYWN0cmVnaXN0cmF0aW9uZGF0ZVNUQUdJTkcAcHJpbWVjb250cmFjdHJlZ2lzdHJh
dGlvbmRhdGVTVEFHSU5HX0lzTnVsbABwcmltZWNvbnRyYWN0aW5nYWdlbmN5U1RBR0lORwBwcmlt
ZWNvbnRyYWN0aW5nYWdlbmN5U1RBR0lOR19Jc051bGwAcHJpbWVjb250cmFjdHZlcnNpb25TVEFH
SU5HAHByaW1lY29udHJhY3R2ZXJzaW9uU1RBR0lOR19Jc051bGwAcGFyZW50Y29udHJhY3RpZFNU
QUdJTkcAcGFyZW50Y29udHJhY3RpZFNUQUdJTkdfSXNOdWxsAHByaW1lY29udHJhY3R0eXBlU1RB
R0lORwBwcmltZWNvbnRyYWN0dHlwZVNUQUdJTkdfSXNOdWxsAHByaW1lY29udHJhY3Rhd2FyZG1l
dGhvZFNUQUdJTkcAcHJpbWVjb250cmFjdGF3YXJkbWV0aG9kU1RBR0lOR19Jc051bGwAcHJpbWVj
b250cmFjdGV4cGVuc2VjYXRlZ29yeVNUQUdJTkcAcHJpbWVjb250cmFjdGV4cGVuc2VjYXRlZ29y
eVNUQUdJTkdfSXNOdWxsAHByaW1lY29udHJhY3RpbmR1c3RyeVNUQUdJTkcAcHJpbWVjb250cmFj
dGluZHVzdHJ5U1RBR0lOR19Jc051bGwAcHJpbWVjb250cmFjdHBpblNUQUdJTkcAcHJpbWVjb250
cmFjdHBpblNUQUdJTkdfSXNOdWxsAHByaW1lY29udHJhY3RhcHRwaW5TVEFHSU5HAHByaW1lY29u
dHJhY3RhcHRwaW5TVEFHSU5HX0lzTnVsbABzdWJ2ZW5kb3JTVEFHSU5HAHN1YnZlbmRvclNUQUdJ
TkdfSXNOdWxsAHN1YnZlbmRvcm13YmVjYXRlZ29yeVNUQUdJTkcAc3VidmVuZG9ybXdiZWNhdGVn
b3J5U1RBR0lOR19Jc051bGwAc3ViY29udHJhY3RwdXJwb3NlU1RBR0lORwBzdWJjb250cmFjdHB1
cnBvc2VTVEFHSU5HX0lzTnVsbABzdWJ2ZW5kb3JzdGF0dXNpbnBpcFNUQUdJTkcAc3VidmVuZG9y
c3RhdHVzaW5waXBTVEFHSU5HX0lzTnVsbABzdWJjb250cmFjdGluZHVzdHJ5U1RBR0lORwBzdWJj
b250cmFjdGluZHVzdHJ5U1RBR0lOR19Jc051bGwAc3ViY29udHJhY3RjdXJyZW50YW1vdW50U1RB
R0lORwBzdWJjb250cmFjdGN1cnJlbnRhbW91bnRTVEFHSU5HX0lzTnVsbABzdWJjb250cmFjdG9y
aWdpbmFsYW1vdW50U1RBR0lORwBzdWJjb250cmFjdG9yaWdpbmFsYW1vdW50U1RBR0lOR19Jc051
bGwAc3VidmVuZG9ycGFpZHRvZGF0ZVNUQUdJTkcAc3VidmVuZG9ycGFpZHRvZGF0ZVNUQUdJTkdf
SXNOdWxsAHN1YmNvbnRyYWN0c3RhcnRkYXRlU1RBR0lORwBzdWJjb250cmFjdHN0YXJ0ZGF0ZVNU
QUdJTkdfSXNOdWxsAHN1YmNvbnRyYWN0ZW5kZGF0ZVNUQUdJTkcAc3ViY29udHJhY3RlbmRkYXRl
U1RBR0lOR19Jc051bGwAc3ViY29udHJhY3RyZWZlcmVuY2VpZFNUQUdJTkcAc3ViY29udHJhY3Ry
ZWZlcmVuY2VpZFNUQUdJTkdfSXNOdWxsAElEU1RBR0lORwBJRFNUQUdJTkdfSXNOdWxsAFBhcmVu
dENvbXBvbmVudABTeXN0ZW0uUmVzb3VyY2VzAFJlc291cmNlTWFuYWdlcgByZXNvdXJjZU1hbgBT
eXN0ZW0uR2xvYmFsaXphdGlvbgBDdWx0dXJlSW5mbwByZXNvdXJjZUN1bHR1cmUAZ2V0X1Jlc291
cmNlTWFuYWdlcgBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQBDdWx0dXJlAGRlZmF1bHRJbnN0YW5j
ZQBnZXRfRGVmYXVsdABEZWZhdWx0AElucHV0SUQASW5wdXROYW1lAEJ1ZmZlcgBPdXRwdXRNYXAA
Um93AEJ1ZmZlckNvbHVtbkluZGV4ZXMAdmFsdWUAQ29tcG9uZW50AFN5c3RlbS5SdW50aW1lLlZl
cnNpb25pbmcAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAFN5c3RlbS5SZWZsZWN0aW9uAEFzc2Vt
Ymx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNv
bmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAEFzc2VtYmx5UHJv
ZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFy
a0F0dHJpYnV0ZQBBc3NlbWJseUN1bHR1cmVBdHRyaWJ1dGUAQXNzZW1ibHlWZXJzaW9uQXR0cmli
dXRlAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAQ29tcGlsYXRpb25SZWxheGF0aW9u
c0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBTQ18xODVkM2ExNDI3N2Q0
NDg2OTA4ZmFiZmJlZjg0ZmM1ZQBTdHJpbmcAU3RyaW5nQ29tcGFyaXNvbgBFcXVhbHMAR2V0Q29s
dW1uSW5kZXhlcwBTU0lTU2NyaXB0Q29tcG9uZW50RW50cnlQb2ludEF0dHJpYnV0ZQBvcF9FcXVh
bGl0eQBFeGNlcHRpb24AR2V0RGF0ZVRpbWUASXNOdWxsAEdldFN0cmluZwBzZXRfSXRlbQBTZXRO
dWxsAEludmFsaWRPcGVyYXRpb25FeGNlcHRpb24AR2V0SW50MzIAU3lzdGVtLkRpYWdub3N0aWNz
AERlYnVnZ2VyTm9uVXNlckNvZGVBdHRyaWJ1dGUAVHlwZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRU
eXBlRnJvbUhhbmRsZQBBc3NlbWJseQBnZXRfQXNzZW1ibHkAU3lzdGVtLkNvbXBvbmVudE1vZGVs
AEVkaXRvckJyb3dzYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdl
bmVyYXRlZEF0dHJpYnV0ZQAuY2N0b3IAU0NfMTg1ZDNhMTQyNzdkNDQ4NjkwOGZhYmZiZWY4NGZj
NWUuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAAAAAAAPSQBuAHAAdQB0ACAAMAAAAy0A
AQtFAFIAUgBPAFIAAICbSQBzAE4AdQBsAGwAIABwAHIAbwBwAGUAcgB0AHkAIABjAGEAbgBuAG8A
dAAgAGIAZQAgAHMAZQB0ACAAdABvACAARgBhAGwAcwBlAC4AIABBAHMAcwBpAGcAbgAgAGEAIAB2
AGEAbAB1AGUAIAB0AG8AIAB0AGgAZQAgAGMAbwBsAHUAbQBuACAAaQBuAHMAdABlAGEAZAAuAABx
UwBDAF8AMQA4ADUAZAAzAGEAMQA0ADIANwA3AGQANAA0ADgANgA5ADAAOABmAGEAYgBmAGIAZQBm
ADgANABmAGMANQBlAC4AUAByAG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAN
ud/+2G/FQIFREI3t1hs/AAiJhF3NgIDMkQi3elxWGTTgiQMGEhQDBhIYAyAAAQkgBAEIDhIVEhkF
IAEBEhAJIAMBEhUdCBIZBCAAER0DIAACAyAADgQgAQEOBCABAQIDIAAIBCgAER0DKAACAygADgMo
AAgDBhIFBSABARIFAwYSIQMGEiUEAAASIQQAABIlBQABARIlBAgAEiEECAASJQMGEiAEAAASIAQI
ABIgBCABAQgGIAICDhFdBSABHQgIBAEAAAAFAAICDg4DBhIVAwYdCAUgAREdCAQgAQIIBCABDggF
IAIBCBwEIAEICAYAARJxEXUEIAASeQYgAgEOEnkEBwESIQYgAQERgIEIAQACAAAAAAADAAABRwEA
Gi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC4wAQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVU
IEZyYW1ld29yayA0KAEAI1NDXzE4NWQzYTE0Mjc3ZDQ0ODY5MDhmYWJmYmVmODRmYzVlAAAFAQAA
AAAWAQARQ29weXJpZ2h0IEAgIDIwMjAAAAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlv
blRocm93cwEAAAA8aQAAAAAAAAAAAABeaQAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGkAAAAA
AAAAAAAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAA
AQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFiAAACwAwAAAAAAAAAAAACwAzQAAABW
AFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAAHzXHQAAAQAAfNcd
PwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAA
AAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEEAMAAAEAUwB0AHIAaQBuAGcA
RgBpAGwAZQBJAG4AZgBvAAAA7AIAAAEAMAAwADAAMAAwADQAYgAwAAAAcAAkAAEARgBpAGwAZQBE
AGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAQwBfADEAOAA1AGQAMwBhADEANAAyADcANwBkADQA
NAA4ADYAOQAwADgAZgBhAGIAZgBiAGUAZgA4ADQAZgBjADUAZQAAAEAADwABAEYAaQBsAGUAVgBl
AHIAcwBpAG8AbgAAAAAAMQAuADAALgA3ADYAMwA5AC4AMwAxADcANAA0AAAAAABwACgAAQBJAG4A
dABlAHIAbgBhAGwATgBhAG0AZQAAAFMAQwBfADEAOAA1AGQAMwBhADEANAAyADcANwBkADQANAA4
ADYAOQAwADgAZgBhAGIAZgBiAGUAZgA4ADQAZgBjADUAZQAuAGQAbABsAAAASAASAAEATABlAGcA
YQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMgAw
AAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAQwBfADEAOAA1AGQA
MwBhADEANAAyADcANwBkADQANAA4ADYAOQAwADgAZgBhAGIAZgBiAGUAZgA4ADQAZgBjADUAZQAu
AGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAEMAXwAxADgANQBkADMA
YQAxADQAMgA3ADcAZAA0ADQAOAA2ADkAMAA4AGYAYQBiAGYAYgBlAGYAOAA0AGYAYwA1AGUAAABE
AA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADcANgAzADkALgAzADEA
NwA0ADQAAAAAAEgADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAu
ADcANgAzADkALgAzADEANwA0ADQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAABgAAAMAAAAcDkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_185d3a14277d4486908fabfbef84fc5e</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum"
                  typeConverter="NOTBROWSABLE">00faa869820f06b8f24c4d5d6f76348d</property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataShaChecksum"
                  typeConverter="NOTBROWSABLE">481e6548e164540301af517fcd8290e2133375ca</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0]"
                  hasSideEffects="true"
                  name="Input 0">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[LastUpdatedTimestamp_Derived]"
                      cachedDataType="dbTimeStamp"
                      cachedName="LastUpdatedTimestamp_Derived"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Output].Columns[LastUpdatedTimestamp_Derived]" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[document_code_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="document_code_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[document_code_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[contract_includes_sub_vendors_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="contract_includes_sub_vendors_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[contract_includes_sub_vendors_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[prime_contract_id_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_id_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_id_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[vendor_record_type_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="vendor_record_type_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[vendor_record_type_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[prime_vendor_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_vendor_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_vendor_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[prime_vendor_mwbe_category_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_vendor_mwbe_category_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_vendor_mwbe_category_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[prime_contract_current_amount_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_current_amount_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_current_amount_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[prime_contract_purpose_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_purpose_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_purpose_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[prime_contract_original_amount_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_original_amount_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_original_amount_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[prime_vendor_spent_to_date_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_vendor_spent_to_date_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_vendor_spent_to_date_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[prime_contract_start_date_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_start_date_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_start_date_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[prime_contract_end_date_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_end_date_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_end_date_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[prime_contract_registration_date_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_registration_date_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_registration_date_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[prime_contracting_agency_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contracting_agency_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contracting_agency_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[prime_contract_version_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_version_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_version_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[parent_contract_id_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="parent_contract_id_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[parent_contract_id_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[prime_contract_type_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_type_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_type_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[prime_contract_award_method_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_award_method_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_award_method_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[prime_contract_expense_category_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="265"
                      cachedName="prime_contract_expense_category_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_expense_category_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[prime_contract_industry_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_industry_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_industry_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[prime_contract_pin_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_pin_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_pin_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[prime_contract_apt_pin_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="prime_contract_apt_pin_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_apt_pin_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[sub_vendor_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_vendor_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_vendor_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[sub_vendor_mwbe_category_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_vendor_mwbe_category_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_vendor_mwbe_category_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[sub_contract_purpose_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="476"
                      cachedName="sub_contract_purpose_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_purpose_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[sub_vendor_status_in_pip_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_vendor_status_in_pip_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_vendor_status_in_pip_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[sub_contract_industry_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_contract_industry_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_industry_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[sub_contract_current_amount_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_contract_current_amount_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_current_amount_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[sub_contract_original_amount_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_contract_original_amount_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_original_amount_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[sub_vendor_paid_to_date_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_vendor_paid_to_date_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_vendor_paid_to_date_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[sub_contract_start_date_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_contract_start_date_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_start_date_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[sub_contract_end_date_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_contract_end_date_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_end_date_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[sub_contract_reference_id_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_contract_reference_id_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_reference_id_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[ID_STAGING]"
                      cachedDataType="i4"
                      cachedName="ID_STAGING"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[ID_STAGING]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Outputs[Output 0]"
                  name="Output 0"
                  synchronousInputId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0]">
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging"
              componentClassID="Microsoft.OLEDBSource"
              contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
              description="OLE DB Source"
              name="Staging - Contracts_Staging"
              usesDispositions="true"
              version="7">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[dbo].[Contracts_Staging]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">0</property>
                <property
                  dataType="System.String"
                  description="The mappings between the parameters in the SQL command and variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  connectionManagerRefId="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output]"
                  name="OLE DB Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[ID_STAGING]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[ID]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[ID_STAGING]"
                      name="ID_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[LastUpdatedTimestamp_STAGING]"
                      dataType="dbTimeStamp"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[LastUpdatedTimestamp]"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[LastUpdatedTimestamp_STAGING]"
                      name="LastUpdatedTimestamp_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[document_code_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[document_code]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[document_code_STAGING]"
                      name="document_code_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_id_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_id]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_id_STAGING]"
                      name="prime_contract_id_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[contract_includes_sub_vendors_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[contract_includes_sub_vendors]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[contract_includes_sub_vendors_STAGING]"
                      name="contract_includes_sub_vendors_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[vendor_record_type_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[vendor_record_type]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[vendor_record_type_STAGING]"
                      name="vendor_record_type_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_vendor_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_vendor]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_vendor_STAGING]"
                      name="prime_vendor_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_vendor_mwbe_category_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_vendor_mwbe_category]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_vendor_mwbe_category_STAGING]"
                      name="prime_vendor_mwbe_category_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_purpose_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_purpose]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_purpose_STAGING]"
                      name="prime_contract_purpose_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_current_amount_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_current_amount]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_current_amount_STAGING]"
                      name="prime_contract_current_amount_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_original_amount_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_original_amount]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_original_amount_STAGING]"
                      name="prime_contract_original_amount_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_vendor_spent_to_date_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_vendor_spent_to_date]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_vendor_spent_to_date_STAGING]"
                      name="prime_vendor_spent_to_date_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_start_date_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_start_date]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_start_date_STAGING]"
                      name="prime_contract_start_date_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_end_date_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_end_date]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_end_date_STAGING]"
                      name="prime_contract_end_date_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_registration_date_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_registration_date]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_registration_date_STAGING]"
                      name="prime_contract_registration_date_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contracting_agency_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contracting_agency]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contracting_agency_STAGING]"
                      name="prime_contracting_agency_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_version_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_version]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_version_STAGING]"
                      name="prime_contract_version_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[parent_contract_id_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[parent_contract_id]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[parent_contract_id_STAGING]"
                      name="parent_contract_id_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_type_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_type]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_type_STAGING]"
                      name="prime_contract_type_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_award_method_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_award_method]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_award_method_STAGING]"
                      name="prime_contract_award_method_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_expense_category_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_expense_category]"
                      length="265"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_expense_category_STAGING]"
                      name="prime_contract_expense_category_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_industry_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_industry]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_industry_STAGING]"
                      name="prime_contract_industry_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_pin_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_pin]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_pin_STAGING]"
                      name="prime_contract_pin_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_apt_pin_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_apt_pin]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[prime_contract_apt_pin_STAGING]"
                      name="prime_contract_apt_pin_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_vendor_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_vendor]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_vendor_STAGING]"
                      name="sub_vendor_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_vendor_mwbe_category_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_vendor_mwbe_category]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_vendor_mwbe_category_STAGING]"
                      name="sub_vendor_mwbe_category_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_purpose_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_contract_purpose]"
                      length="476"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_purpose_STAGING]"
                      name="sub_contract_purpose_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_vendor_status_in_pip_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_vendor_status_in_pip]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_vendor_status_in_pip_STAGING]"
                      name="sub_vendor_status_in_pip_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_industry_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_contract_industry]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_industry_STAGING]"
                      name="sub_contract_industry_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_current_amount_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_contract_current_amount]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_current_amount_STAGING]"
                      name="sub_contract_current_amount_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_original_amount_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_contract_original_amount]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_original_amount_STAGING]"
                      name="sub_contract_original_amount_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_vendor_paid_to_date_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_vendor_paid_to_date]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_vendor_paid_to_date_STAGING]"
                      name="sub_vendor_paid_to_date_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_start_date_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_contract_start_date]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_start_date_STAGING]"
                      name="sub_contract_start_date_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_end_date_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_contract_end_date]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_end_date_STAGING]"
                      name="sub_contract_end_date_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_reference_id_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_contract_reference_id]"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].Columns[sub_contract_reference_id_STAGING]"
                      name="sub_contract_reference_id_STAGING"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[ID]"
                      dataType="i4"
                      name="ID" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[LastUpdatedTimestamp]"
                      dataType="dbTimeStamp"
                      name="LastUpdatedTimestamp" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[document_code]"
                      dataType="wstr"
                      length="255"
                      name="document_code" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_id]"
                      dataType="wstr"
                      length="255"
                      name="prime_contract_id" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[contract_includes_sub_vendors]"
                      dataType="wstr"
                      length="255"
                      name="contract_includes_sub_vendors" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[vendor_record_type]"
                      dataType="wstr"
                      length="255"
                      name="vendor_record_type" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_vendor]"
                      dataType="wstr"
                      length="255"
                      name="prime_vendor" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_vendor_mwbe_category]"
                      dataType="wstr"
                      length="255"
                      name="prime_vendor_mwbe_category" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_purpose]"
                      dataType="wstr"
                      length="255"
                      name="prime_contract_purpose" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_current_amount]"
                      dataType="wstr"
                      length="255"
                      name="prime_contract_current_amount" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_original_amount]"
                      dataType="wstr"
                      length="255"
                      name="prime_contract_original_amount" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_vendor_spent_to_date]"
                      dataType="wstr"
                      length="255"
                      name="prime_vendor_spent_to_date" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_start_date]"
                      dataType="wstr"
                      length="255"
                      name="prime_contract_start_date" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_end_date]"
                      dataType="wstr"
                      length="255"
                      name="prime_contract_end_date" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_registration_date]"
                      dataType="wstr"
                      length="255"
                      name="prime_contract_registration_date" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contracting_agency]"
                      dataType="wstr"
                      length="255"
                      name="prime_contracting_agency" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_version]"
                      dataType="wstr"
                      length="255"
                      name="prime_contract_version" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[parent_contract_id]"
                      dataType="wstr"
                      length="255"
                      name="parent_contract_id" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_type]"
                      dataType="wstr"
                      length="255"
                      name="prime_contract_type" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_award_method]"
                      dataType="wstr"
                      length="255"
                      name="prime_contract_award_method" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_expense_category]"
                      dataType="wstr"
                      length="265"
                      name="prime_contract_expense_category" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_industry]"
                      dataType="wstr"
                      length="255"
                      name="prime_contract_industry" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_pin]"
                      dataType="wstr"
                      length="255"
                      name="prime_contract_pin" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[prime_contract_apt_pin]"
                      dataType="wstr"
                      length="255"
                      name="prime_contract_apt_pin" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_vendor]"
                      dataType="wstr"
                      length="255"
                      name="sub_vendor" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_vendor_mwbe_category]"
                      dataType="wstr"
                      length="255"
                      name="sub_vendor_mwbe_category" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_contract_purpose]"
                      dataType="wstr"
                      length="476"
                      name="sub_contract_purpose" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_vendor_status_in_pip]"
                      dataType="wstr"
                      length="255"
                      name="sub_vendor_status_in_pip" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_contract_industry]"
                      dataType="wstr"
                      length="255"
                      name="sub_contract_industry" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_contract_current_amount]"
                      dataType="wstr"
                      length="255"
                      name="sub_contract_current_amount" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_contract_original_amount]"
                      dataType="wstr"
                      length="255"
                      name="sub_contract_original_amount" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_vendor_paid_to_date]"
                      dataType="wstr"
                      length="255"
                      name="sub_vendor_paid_to_date" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_contract_start_date]"
                      dataType="wstr"
                      length="255"
                      name="sub_contract_start_date" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_contract_end_date]"
                      dataType="wstr"
                      length="255"
                      name="sub_contract_end_date" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output].ExternalColumns[sub_contract_reference_id]"
                      dataType="wstr"
                      length="255"
                      name="sub_contract_reference_id" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output]"
                  isErrorOut="true"
                  name="OLE DB Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[ID]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[ID]"
                      name="ID" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[LastUpdatedTimestamp]"
                      dataType="dbTimeStamp"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[LastUpdatedTimestamp]"
                      name="LastUpdatedTimestamp" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[document_code]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[document_code]"
                      name="document_code" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_id]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_id]"
                      name="prime_contract_id" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[contract_includes_sub_vendors]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[contract_includes_sub_vendors]"
                      name="contract_includes_sub_vendors" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[vendor_record_type]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[vendor_record_type]"
                      name="vendor_record_type" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_vendor]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_vendor]"
                      name="prime_vendor" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_vendor_mwbe_category]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_vendor_mwbe_category]"
                      name="prime_vendor_mwbe_category" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_purpose]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_purpose]"
                      name="prime_contract_purpose" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_current_amount]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_current_amount]"
                      name="prime_contract_current_amount" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_original_amount]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_original_amount]"
                      name="prime_contract_original_amount" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_vendor_spent_to_date]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_vendor_spent_to_date]"
                      name="prime_vendor_spent_to_date" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_start_date]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_start_date]"
                      name="prime_contract_start_date" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_end_date]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_end_date]"
                      name="prime_contract_end_date" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_registration_date]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_registration_date]"
                      name="prime_contract_registration_date" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contracting_agency]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contracting_agency]"
                      name="prime_contracting_agency" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_version]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_version]"
                      name="prime_contract_version" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[parent_contract_id]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[parent_contract_id]"
                      name="parent_contract_id" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_type]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_type]"
                      name="prime_contract_type" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_award_method]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_award_method]"
                      name="prime_contract_award_method" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_expense_category]"
                      dataType="wstr"
                      length="265"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_expense_category]"
                      name="prime_contract_expense_category" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_industry]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_industry]"
                      name="prime_contract_industry" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_pin]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_pin]"
                      name="prime_contract_pin" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_apt_pin]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[prime_contract_apt_pin]"
                      name="prime_contract_apt_pin" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_vendor]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_vendor]"
                      name="sub_vendor" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_vendor_mwbe_category]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_vendor_mwbe_category]"
                      name="sub_vendor_mwbe_category" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_contract_purpose]"
                      dataType="wstr"
                      length="476"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_contract_purpose]"
                      name="sub_contract_purpose" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_vendor_status_in_pip]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_vendor_status_in_pip]"
                      name="sub_vendor_status_in_pip" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_contract_industry]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_contract_industry]"
                      name="sub_contract_industry" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_contract_current_amount]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_contract_current_amount]"
                      name="sub_contract_current_amount" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_contract_original_amount]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_contract_original_amount]"
                      name="sub_contract_original_amount" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_vendor_paid_to_date]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_vendor_paid_to_date]"
                      name="sub_vendor_paid_to_date" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_contract_start_date]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_contract_start_date]"
                      name="sub_contract_start_date" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_contract_end_date]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_contract_end_date]"
                      name="sub_contract_end_date" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_contract_reference_id]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[sub_contract_reference_id]"
                      name="sub_contract_reference_id" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final.Paths[Data Conversion Output]"
              endId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000.Inputs[OLE DB Destination Input]"
              name="Data Conversion Output"
              startId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output]" />
            <path
              refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final.Paths[Derived Column Output]"
              endId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0]"
              name="Derived Column Output"
              startId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Output]" />
            <path
              refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final.Paths[OLE DB Source Output]"
              endId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Inputs[Derived Column Input]"
              name="OLE DB Source Output"
              startId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging.Outputs[OLE DB Source Output]" />
            <path
              refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final.Paths[Output 0]"
              endId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input]"
              name="Output 0"
              startId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, and Registration for Final Contracts table.Outputs[Output 0]" />
            <path
              refId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final.Paths[Output 01]"
              endId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, and Registration for Final Contracts table.Inputs[Input 0]"
              name="Output 0"
              startId="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Outputs[Output 0]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Truncate Final Table - Contracts"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{829D5F7D-3DF1-436C-99C8-8FB065CA67C3}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Truncate Final Table - Contracts"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FCA46042-184A-4048-B9D6-000F61268699}"
          SQLTask:SqlStatementSource="TRUNCATE TABLE Contracts" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{ADE229C7-0805-4B76-B821-C6984FDF935B}"
      DTS:From="Package\Truncate Final Table - Contracts"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="532,42"
          Id="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final"
          TopLeft="356,225" />
        <NodeLayout
          Size="230,42"
          Id="Package\Truncate Final Table - Contracts"
          TopLeft="507,140" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="622,182">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,43"
              Start="0,0"
              End="0,35.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,35.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="193,42"
          Id="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime"
          TopLeft="545,307" />
        <NodeLayout
          Size="312,42"
          Id="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000"
          TopLeft="483.5,657.5" />
        <NodeLayout
          Size="273,42"
          Id="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL"
          TopLeft="508,382" />
        <NodeLayout
          Size="364,42"
          Id="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, and Registration for Final Contracts table"
          TopLeft="460,478" />
        <NodeLayout
          Size="210,42"
          Id="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging"
          TopLeft="532,229" />
        <NodeLayout
          Size="156,42"
          Id="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Data Conversion"
          TopLeft="568,553" />
        <EdgeLayout
          Id="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final.Paths[Output 01]"
          TopLeft="643.25,424">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,54"
              Start="0,0"
              End="0,46.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,46.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final.Paths[Output 0]"
          TopLeft="644,520">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,33"
              Start="0,0"
              End="0,25.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,25.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final.Paths[OLE DB Source Output]"
          TopLeft="639.25,271">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,36"
              Start="0,0"
              End="0,28.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,28.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final.Paths[Derived Column Output]"
          TopLeft="643,349">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,33"
              Start="0,0"
              End="0,25.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,25.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final.Paths[Data Conversion Output]"
          TopLeft="642.75,595">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,62.5"
              Start="0,0"
              End="0,55">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,55" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Contracts) - Batch 100,000">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Staging To Final - Contracts - Convert Staging to appropriate data types and then Insert to Final\Staging - Contracts_Staging">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>