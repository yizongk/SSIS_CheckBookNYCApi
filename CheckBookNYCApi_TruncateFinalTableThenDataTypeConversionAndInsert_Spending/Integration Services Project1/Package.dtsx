<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="6/10/2020 5:11:34 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DOT-JCKWHB2"
  DTS:CreatorName="DOT\ykuang"
  DTS:DTSID="{6B353E58-A202-4BC2-B46F-93CD68600CF1}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="12.0.5626.31"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="151"
  DTS:VersionGUID="{57589262-14B8-4545-BF3C-FD893D9A9E03}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{FCA46042-184A-4048-B9D6-000F61268699}"
      DTS:ObjectName="DOTDEV55SQLEE03.CheckBookNYC">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=DOTDEV55SQLEE03;Initial Catalog=CheckBookNYC;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{AC6EF624-9829-4FEE-B825-7B6CB766DEBB}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion"
              componentClassID="Microsoft.DataConvert"
              contactInfo="Data Conversion;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Data Conversion"
              name="Data Conversion"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input]"
                  name="Data Conversion Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input].Columns[check_amount]"
                      cachedDataType="cy"
                      cachedName="check_amount"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[check_amount]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input].Columns[fiscal_year]"
                      cachedDataType="i4"
                      cachedName="fiscal_year"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[fiscal_year]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input].Columns[issue_date]"
                      cachedDataType="dbDate"
                      cachedName="issue_date"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[issue_date]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output]"
                  exclusionGroup="1"
                  name="Data Conversion Output"
                  synchronousInputId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[check_amount_DataTypeConverted]"
                      dataType="cy"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[check_amount_DataTypeConverted]"
                      name="check_amount_DataTypeConverted"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the input column used as the source of data for the conversion."
                          name="SourceInputColumnLineageID">#{Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[check_amount]}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[fiscal_year_DataTypeConverted]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[fiscal_year_DataTypeConverted]"
                      name="fiscal_year_DataTypeConverted"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the input column used as the source of data for the conversion."
                          name="SourceInputColumnLineageID">#{Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[fiscal_year]}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[issue_date_DataTypeConverted]"
                      dataType="dbDate"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[issue_date_DataTypeConverted]"
                      name="issue_date_DataTypeConverted"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the input column used as the source of data for the conversion."
                          name="SourceInputColumnLineageID">#{Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[issue_date]}</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Data Conversion Error Output"
                  synchronousInputId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;9"
              description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
              name="Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table"
              version="9">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="30">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_fb028c57ea614638b8dd265863f2a053.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{ac1c4fc9-54d7-45d8-a0f8-0669ddf0cf4a}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_fb028c57ea614638b8dd265863f2a053</RootNamespace>
    <AssemblyName>SC_fb028c57ea614638b8dd265863f2a053</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptComponent" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptComponent" GeneratedNamespace="SC_fb028c57ea614638b8dd265863f2a053" IconIndex="0"></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_SC120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using System.Windows.Forms;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        /*
         * Add your code here
         */
        string contractid = Row.contractid;
        try
        {
            if (contractid != null && contractid.Length >= 9)
            {
                if (contractid.Substring(0, 3) == "CT1")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 3);
                    Row.DeptSTAGINGDerived = contractid.Substring(3, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(6);
                }
                else if (contractid.Substring(0, 4) == "CTA1")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 4);
                    Row.DeptSTAGINGDerived = contractid.Substring(4, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(7);
                }
                else if (contractid.Substring(0, 3) == "DO1")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 3);
                    Row.DeptSTAGINGDerived = contractid.Substring(3, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(6);
                }
                else if (contractid.Substring(0, 4) == "MMA1")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 4);
                    Row.DeptSTAGINGDerived = contractid.Substring(4, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(7);
                }
                else if (contractid.Substring(0, 4) == "RCT1")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 4);
                    Row.DeptSTAGINGDerived = contractid.Substring(4, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(7);
                }
                else if (contractid.Substring(0, 4) == "PRC2")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 4);
                    Row.DeptSTAGINGDerived = contractid.Substring(4, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(7);
                }
                else if (contractid.Substring(0, 3) == "POD")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 3);
                    Row.DeptSTAGINGDerived = contractid.Substring(3, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(6);
                }
                else if (contractid.Substring(0, 3) == "POC")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 3);
                    Row.DeptSTAGINGDerived = contractid.Substring(3, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(6);
                }
                else if (contractid.Substring(0, 4) == "PON1")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 4);
                    Row.DeptSTAGINGDerived = contractid.Substring(4, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(7);
                }
                else if (contractid.Substring(0, 4) == "PRM1")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 4);
                    Row.DeptSTAGINGDerived = contractid.Substring(4, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(7);
                }
                else if (contractid.Substring(0, 4) == "PCC1")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 4);
                    Row.DeptSTAGINGDerived = contractid.Substring(4, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(7);
                }
                else if (contractid.Substring(0, 4) == "CTA2")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 4);
                    Row.DeptSTAGINGDerived = contractid.Substring(4, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(7);
                }
                else if (contractid.Substring(0, 5) == "RTGPF")
                {
                    Row.CodeSTAGINGDerived = contractid.Substring(0, 5);
                    Row.DeptSTAGINGDerived = contractid.Substring(5, 3);
                    Row.RegistrationSTAGINGDerived = contractid.Substring(8);
                }
                else
                {
                    Row.CodeSTAGINGDerived = "N/A";
                    Row.DeptSTAGINGDerived = "N/A";
                    Row.RegistrationSTAGINGDerived = "N/A";
                }

            }
            else if (contractid != null && contractid.Length < 9)
            {
                Row.CodeSTAGINGDerived = "N/A";
                Row.DeptSTAGINGDerived = "N/A";
                Row.RegistrationSTAGINGDerived = "N/A";
            }
            else if (contractid == null)
            {
                Row.CodeSTAGINGDerived = null;
                Row.DeptSTAGINGDerived = null;
                Row.RegistrationSTAGINGDerived = null;
            }
            else
            {
                Row.CodeSTAGINGDerived = "N/A";
                Row.DeptSTAGINGDerived = "N/A";
                Row.RegistrationSTAGINGDerived = "N/A";
            }
        }
        catch (Exception ex)
        {
            Row.CodeSTAGINGDerived = "ERROR: an exception has occured";
            Row.DeptSTAGINGDerived = "ERROR: an exception has occured";
            Row.RegistrationSTAGINGDerived = "ERROR: an exception has occured";
            //MessageBox.Show(ex.ToString());
        }

        string capital_project = Row.capitalproject;
        try
        {
            if (capital_project != null && capital_project.Length >= 13)
            {
                Row.ProjectAgencySTAGINGDerived = capital_project.Substring(0, 3);
                Row.CapProjSTAGINGDerived = capital_project.Substring(3, 9).TrimEnd();
                Row.OccSTAGINGDerived = capital_project.Substring(Math.Max(0, capital_project.Length - 3));
            }
            else if (capital_project != null && capital_project.Length < 13)
            {
                Row.ProjectAgencySTAGINGDerived = "N/A";
                Row.CapProjSTAGINGDerived = "N/A";
                Row.OccSTAGINGDerived = "N/A";
            }
            else if (capital_project == null)
            {
                Row.ProjectAgencySTAGINGDerived = null;
                Row.CapProjSTAGINGDerived = null;
                Row.OccSTAGINGDerived = null;
            }
            else
            {
                Row.ProjectAgencySTAGINGDerived = "N/A";
                Row.CapProjSTAGINGDerived = "N/A";
                Row.OccSTAGINGDerived = "N/A";
            }
        }
        catch (Exception ex)
        {
            Row.ProjectAgencySTAGINGDerived = "ERROR: an exception has occured";
            Row.CapProjSTAGINGDerived = "ERROR: an exception has occured";
            Row.OccSTAGINGDerived = "ERROR: an exception has occured";
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 ID
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[0]);
        }
    }
    public bool ID_IsNull
    {
        get
        {
            return IsNull(0);
        }
    }

    public String agency
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[1]);
        }
    }
    public bool agency_IsNull
    {
        get
        {
            return IsNull(1);
        }
    }

    public String associatedprimevendor
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[2]);
        }
    }
    public bool associatedprimevendor_IsNull
    {
        get
        {
            return IsNull(2);
        }
    }

    public String capitalproject
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[3]);
        }
    }
    public bool capitalproject_IsNull
    {
        get
        {
            return IsNull(3);
        }
    }

    public String contractid
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[4]);
        }
    }
    public bool contractid_IsNull
    {
        get
        {
            return IsNull(4);
        }
    }

    public String contractpurpose
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[5]);
        }
    }
    public bool contractpurpose_IsNull
    {
        get
        {
            return IsNull(5);
        }
    }

    public Decimal checkamount
    {
        get
        {
            return Buffer.GetDecimal(BufferColumnIndexes[6]);
        }
    }
    public bool checkamount_IsNull
    {
        get
        {
            return IsNull(6);
        }
    }

    public String department
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[7]);
        }
    }
    public bool department_IsNull
    {
        get
        {
            return IsNull(7);
        }
    }

    public String documentid
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[8]);
        }
    }
    public bool documentid_IsNull
    {
        get
        {
            return IsNull(8);
        }
    }

    public String expensecategory
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[9]);
        }
    }
    public bool expensecategory_IsNull
    {
        get
        {
            return IsNull(9);
        }
    }

    public Int32 fiscalyear
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[10]);
        }
    }
    public bool fiscalyear_IsNull
    {
        get
        {
            return IsNull(10);
        }
    }

    public String industry
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[11]);
        }
    }
    public bool industry_IsNull
    {
        get
        {
            return IsNull(11);
        }
    }

    public DateTime issuedate
    {
        get
        {
            return Buffer.GetDate(BufferColumnIndexes[12]);
        }
    }
    public bool issuedate_IsNull
    {
        get
        {
            return IsNull(12);
        }
    }

    public String mwbecategory
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[13]);
        }
    }
    public bool mwbecategory_IsNull
    {
        get
        {
            return IsNull(13);
        }
    }

    public String payeename
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[14]);
        }
    }
    public bool payeename_IsNull
    {
        get
        {
            return IsNull(14);
        }
    }

    public String spendingcategory
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[15]);
        }
    }
    public bool spendingcategory_IsNull
    {
        get
        {
            return IsNull(15);
        }
    }

    public String subcontractreferenceid
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[16]);
        }
    }
    public bool subcontractreferenceid_IsNull
    {
        get
        {
            return IsNull(16);
        }
    }

    public String subvendor
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[17]);
        }
    }
    public bool subvendor_IsNull
    {
        get
        {
            return IsNull(17);
        }
    }

    public DateTime LastUpdatedTimestampDerived
    {
        get
        {
            return Buffer.GetDateTime(BufferColumnIndexes[18]);
        }
    }
    public bool LastUpdatedTimestampDerived_IsNull
    {
        get
        {
            return IsNull(18);
        }
    }

    public String RegistrationSTAGINGDerived
    {
        set
        {
            this[19] = value;
        }
    }
    public bool RegistrationSTAGINGDerived_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(19);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String DeptSTAGINGDerived
    {
        set
        {
            this[20] = value;
        }
    }
    public bool DeptSTAGINGDerived_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(20);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String CodeSTAGINGDerived
    {
        set
        {
            this[21] = value;
        }
    }
    public bool CodeSTAGINGDerived_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(21);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String OccSTAGINGDerived
    {
        set
        {
            this[22] = value;
        }
    }
    public bool OccSTAGINGDerived_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(22);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String CapProjSTAGINGDerived
    {
        set
        {
            this[23] = value;
        }
    }
    public bool CapProjSTAGINGDerived_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(23);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ProjectAgencySTAGINGDerived
    {
        set
        {
            this[24] = value;
        }
    }
    public bool ProjectAgencySTAGINGDerived_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(24);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_fb028c57ea614638b8dd265863f2a053.Properties.Settings.get_Default():SC_fb028c57ea614638b8dd265863f2a053.Properties.Sett" +
    "ings")]

namespace SC_fb028c57ea614638b8dd265863f2a053.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>SC_fb028c57ea614638b8dd265863f2a053</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>SC_fb028c57ea614638b8dd265863f2a053</msb:DisplayName>
		<msb:ProjectId>{23FD14D9-B3D3-4B01-A362-67C52E5017B3}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_fb028c57ea614638b8dd265863f2a053.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="ComponentWrapper.cs"/>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_fb028c57ea614638b8dd265863f2a053")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_fb028c57ea614638b8dd265863f2a053")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_fb028c57ea614638b8dd265863f2a053.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_fb028c57ea614638b8dd265863f2a053.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_fb028c57ea614638b8dd265863f2a053.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_fb028c57ea614638b8dd265863f2a053.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_fb028c57ea614638b8dd265863f2a053.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="2">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_fb028c57ea614638b8dd265863f2a053.dll]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAJN3xV8AAAAAAAAAAOAAAiELAQsAACoAAAAIAAAAAAAA/kgA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACgAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAKxIAABPAAAAAGAAAAgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAABCkAAAAgAAAAKgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAgEAAAAYAAAAAYAAAAsAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAAMgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADg
SAAAAAAAAEgAAAACAAUAmCoAABQeAAABAAAAAAAAAOApAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH4CKA0AAAoCAnM+AAAGfQEAAAQCAnM/AAAGfQIAAAQqkgRy
AQAAcBpvDgAACiwVAgUCAygPAAAKDgRzCQAABm8DAAAGKkorBwIDbwQAAAYDbzwAAAYt8SoGKh4C
KBEAAAoqHgIoEgAACioAABswBQASBQAAAQAAEQNvEgAABgoGOYoDAAAGbxMAAAofCT99AwAABhYZ
bxQAAApyEQAAcCgVAAAKLC4DBhYZbxQAAApvNAAABgMGGRlvFAAACm8yAAAGAwYcbxYAAApvMAAA
BjimAwAABhYabxQAAApyGQAAcCgVAAAKLC4DBhYabxQAAApvNAAABgMGGhlvFAAACm8yAAAGAwYd
bxYAAApvMAAABjhkAwAABhYZbxQAAApyIwAAcCgVAAAKLC4DBhYZbxQAAApvNAAABgMGGRlvFAAA
Cm8yAAAGAwYcbxYAAApvMAAABjgiAwAABhYabxQAAApyKwAAcCgVAAAKLC4DBhYabxQAAApvNAAA
BgMGGhlvFAAACm8yAAAGAwYdbxYAAApvMAAABjjgAgAABhYabxQAAApyNQAAcCgVAAAKLC4DBhYa
bxQAAApvNAAABgMGGhlvFAAACm8yAAAGAwYdbxYAAApvMAAABjieAgAABhYabxQAAApyPwAAcCgV
AAAKLC4DBhYabxQAAApvNAAABgMGGhlvFAAACm8yAAAGAwYdbxYAAApvMAAABjhcAgAABhYZbxQA
AApySQAAcCgVAAAKLC4DBhYZbxQAAApvNAAABgMGGRlvFAAACm8yAAAGAwYcbxYAAApvMAAABjga
AgAABhYZbxQAAApyUQAAcCgVAAAKLC4DBhYZbxQAAApvNAAABgMGGRlvFAAACm8yAAAGAwYcbxYA
AApvMAAABjjYAQAABhYabxQAAApyWQAAcCgVAAAKLC4DBhYabxQAAApvNAAABgMGGhlvFAAACm8y
AAAGAwYdbxYAAApvMAAABjiWAQAABhYabxQAAApyYwAAcCgVAAAKLC4DBhYabxQAAApvNAAABgMG
GhlvFAAACm8yAAAGAwYdbxYAAApvMAAABjhUAQAABhYabxQAAApybQAAcCgVAAAKLC4DBhYabxQA
AApvNAAABgMGGhlvFAAACm8yAAAGAwYdbxYAAApvMAAABjgSAQAABhYabxQAAApydwAAcCgVAAAK
LC4DBhYabxQAAApvNAAABgMGGhlvFAAACm8yAAAGAwYdbxYAAApvMAAABjjQAAAABhYbbxQAAApy
gQAAcCgVAAAKLC4DBhYbbxQAAApvNAAABgMGGxlvFAAACm8yAAAGAwYebxYAAApvMAAABjiOAAAA
A3KNAABwbzQAAAYDco0AAHBvMgAABgNyjQAAcG8wAAAGK2sGLC0GbxMAAAofCS8jA3KNAABwbzQA
AAYDco0AAHBvMgAABgNyjQAAcG8wAAAGKzsGLRcDFG80AAAGAxRvMgAABgMUbzAAAAYrIQNyjQAA
cG80AAAGA3KNAABwbzIAAAYDco0AAHBvMAAABt4kJgNylQAAcG80AAAGA3KVAABwbzIAAAYDcpUA
AHBvMAAABt4AA28QAAAGCwcsTgdvEwAACh8NMkQDBxYZbxQAAApvOgAABgMHGR8JbxQAAAoWjRoA
AAFvFwAACm84AAAGAwcWB28TAAAKGVkoGAAACm8WAAAKbzYAAAYrawcsLQdvEwAACh8NLyMDco0A
AHBvOgAABgNyjQAAcG84AAAGA3KNAABwbzYAAAYrOwctFwMUbzoAAAYDFG84AAAGAxRvNgAABish
A3KNAABwbzoAAAYDco0AAHBvOAAABgNyjQAAcG82AAAG3iQmA3KVAABwbzoAAAYDcpUAAHBvOAAA
BgNylQAAcG82AAAG3gAqAABBNAAAAAAAAAcAAAD9AwAABAQAACQAAAAcAAABAAAAAC8EAAC+AAAA
7QQAACQAAAAcAAABHgIoAQAABioqAgMEBSgZAAAKKlICexoAAAoCexsAAAoWlG8cAAAKKiICFigd
AAAKKlICexoAAAoCexsAAAoXlG8eAAAKKiICFygdAAAKKlICexoAAAoCexsAAAoYlG8eAAAKKiIC
GCgdAAAKKlICexoAAAoCexsAAAoZlG8eAAAKKiICGSgdAAAKKlICexoAAAoCexsAAAoalG8eAAAK
KiICGigdAAAKKlICexoAAAoCexsAAAoblG8eAAAKKiICGygdAAAKKlICexoAAAoCexsAAAoclG8f
AAAKKiICHCgdAAAKKlICexoAAAoCexsAAAodlG8eAAAKKiICHSgdAAAKKlICexoAAAoCexsAAAoe
lG8eAAAKKiICHigdAAAKKlYCexoAAAoCexsAAAofCZRvHgAACiomAh8JKB0AAAoqVgJ7GgAACgJ7
GwAACh8KlG8cAAAKKiYCHwooHQAACipWAnsaAAAKAnsbAAAKHwuUbx4AAAoqJgIfCygdAAAKKlYC
exoAAAoCexsAAAofDJRvIAAACiomAh8MKB0AAAoqVgJ7GgAACgJ7GwAACh8NlG8eAAAKKiYCHw0o
HQAACipWAnsaAAAKAnsbAAAKHw6Ubx4AAAoqJgIfDigdAAAKKlYCexoAAAoCexsAAAofD5RvHgAA
CiomAh8PKB0AAAoqVgJ7GgAACgJ7GwAACh8QlG8eAAAKKiYCHxAoHQAACipWAnsaAAAKAnsbAAAK
HxGUbx4AAAoqJgIfESgdAAAKKlYCexoAAAoCexsAAAofEpRvIQAACiomAh8SKB0AAAoqKgIfEwMo
IgAACipeAywJAh8TKCMAAAoqctUAAHBzJAAACnoqAh8UAygiAAAKKl4DLAkCHxQoIwAACipy1QAA
cHMkAAAKeioCHxUDKCIAAAoqXgMsCQIfFSgjAAAKKnLVAABwcyQAAAp6KgIfFgMoIgAACipeAywJ
Ah8WKCMAAAoqctUAAHBzJAAACnoqAh8XAygiAAAKKl4DLAkCHxcoIwAACipy1QAAcHMkAAAKeioC
HxgDKCIAAAoqXgMsCQIfGCgjAAAKKnLVAABwcyQAAAp6HgIoJQAACioeAigmAAAKKjoCKCcAAAoC
A30DAAAEKjoCKCcAAAoCA30EAAAEKh4CKCcAAAoqAAAAEzACAC0AAAACAAARfgUAAAQtIHJyAQBw
0AcAAAIoKQAACm8qAAAKcysAAAoKBoAFAAAEfgUAAAQqGn4GAAAEKh4CgAYAAAQqGn4HAAAEKi5z
RQAABoAHAAAEKh4CKC4AAAoqALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNv
dXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQ
dWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJl
c291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMx
OQAAAAAFAGwAAACwCgAAI34AABwLAAAYDwAAI1N0cmluZ3MAAAAANBoAAOQBAAAjVVMAGBwAABAA
AAAjR1VJRAAAACgcAADsAQAAI0Jsb2IAAAAAAAAAAgAAAVcVogEJAQAAAPolMwAWAAABAAAAJAAA
AAgAAAAHAAAARgAAABkAAAAuAAAADwAAAAIAAAADAAAANQAAADYAAAABAAAABAAAAAEAAAAAAAoA
AQAAAAAABgDuAM0ABgD+AM0ACgAbARQBDgA3ASIBEgB2Ac0ABgCFAc0ACgDQAhQBCgC+AxQBCgBe
Ck0KCgCPCnoKCgBoC04LCgCTC4ELCgCqC4ELCgDHC4ELCgDmC4ELCgD/C4ELCgAYDIELCgAzDIEL
CgBODIELCgBnDIELCgCgDIAMCgDADIAMCgACDRQBCgAJDRQBBgAyDc0ACgB6DRQBCgCHDRQBCgCQ
DRQBCgDkDRQBCgARDv4NCgAuDhQBCgAzDhQBCgBXDoELDgCDDm0ODgCcDm0OCgCxDoAMAAAAAAEA
AAAAAAEAAQABABAAMgAAAAUAAQABAAEAEABAAAAACAADAAUAAQAQAEsAAAAJAAMACQABABAAWAAA
AA0AAwA+AAEAEABkAAAADQAEAD8AAAAQAG4AeAANAAUAQAAAARAApwB4ABEABwBEAAYAWAATAAYA
ZAAXAAEAPQpvAAEAPQpvABEAbgp5ABEAmwp9ABEA3wqbAFAgAAAAAIYYTwEbAAEAcCAAAAAAxgCT
AR8AAQCVIAAAAADGAaABKQAFAKggAAAAAMYBtAEpAAYAqiAAAAAAxgDLARsABwCyIAAAAADGANYB
GwAHALwgAAAAAMYAtAEpAAcAECYAAAAAhhhPARsACAAYJgAAAACGGE8BLwAIACMmAAAAAIYI4gE5
AAsAOCYAAAAAhgjpAT0ACwBBJgAAAACGCPcBQQALAFYmAAAAAIYIAgI9AAsAXyYAAAAAhggUAkEA
CwB0JgAAAACGCC4CPQALAH0mAAAAAIYITwJBAAsAkiYAAAAAhghiAj0ACwCbJgAAAACGCHwCQQAL
ALAmAAAAAIYIiwI9AAsAuSYAAAAAhgihAkEACwDOJgAAAACGCLUCPQALANcmAAAAAIYI2AJFAAsA
7CYAAAAAhgjoAj0ACwD1JgAAAACGCP8CQQALAAonAAAAAIYIDgM9AAsAEycAAAAAhggkA0EACwAo
JwAAAACGCDMDPQALADEnAAAAAIYISQNBAAsARycAAAAAhghdAz0ACwBRJwAAAACGCHgDOQALAGcn
AAAAAIYIhwM9AAsAcScAAAAAhgidA0EACwCHJwAAAACGCKoDPQALAJEnAAAAAIYIxwNKAAsApycA
AAAAhgjVAz0ACwCxJwAAAACGCOoDQQALAMcnAAAAAIYI+wM9AAsA0ScAAAAAhggTBEEACwDnJwAA
AACGCCEEPQALAPEnAAAAAIYINgRBAAsABygAAAAAhghLBD0ACwARKAAAAACGCGcEQQALACcoAAAA
AIYIggQ9AAsAMSgAAAAAhgikBEEACwBHKAAAAACGCLIEPQALAFEoAAAAAIYIxwRKAAsAZygAAAAA
hgjnBD0ACwBxKAAAAACGCA4FTwALAHwoAAAAAIYILQVUAAwAlCgAAAAAhghTBU8ADQCfKAAAAACG
CGoFVAAOALcoAAAAAIYIiAVPAA8AwigAAAAAhgifBVQAEADaKAAAAACGCL0FTwARAOUoAAAAAIYI
0wVUABIA/SgAAAAAhgjwBU8AEwAIKQAAAACGCAoGVAAUACApAAAAAIYIKwZPABUAKykAAAAAhghL
BlQAFgBDKQAAAACGAHIGPQAXAEspAAAAAIYAegY9ABcAUykAAAAAhhhPAXMAFwBiKQAAAACGGE8B
cwAYAHEpAAAAAIMYTwEbABkAfCkAAAAAkwirCoEAGQC1KQAAAACTCL8KhgAZALwpAAAAAJMIywqL
ABkAxCkAAAAAlgjvCp8AGgDXKQAAAACGGE8BGwAaAMspAAAAAJEYzA4xARoAAAABAAMLAAACAAsL
AAADABULAAAEABwLAAABABULAAABACYLAAABACYLAAABABULAAACACoLAAADABwLAAABAD4LAAAB
AD4LAAABAD4LAAABAD4LAAABAD4LAAABAD4LAAABAD4LAAABAD4LAAABAD4LAAABAD4LAAABAD4L
AAABAD4LAAABAEQLAAABAEQLAAABAD4LWQBPAU8AYQBPAU8AaQBPAU8AcQBPAU8AeQBPAU8AgQBP
AU8AiQBPAU8AkQBPAU8AmQBPAU8AoQBPAU8AqQBPAakAsQBPARsACQBPARsAuQAaDa4ACQAhDbUA
yQBPARsACQDLARsACQDWARsAuQBZDTkAuQBkDcAAuQBuDcYAuQBkDcwAuQB/DdEA2QCMDdcAEQBP
AS8AEQAVC+IAEQAqC+YAKQCaDeoAEQCjDe8AKQCqDcwAKQC0DfQAKQC/DfoAKQDHDfoAEQDTDQAB
EQDcDakA6QBPAU8AEQByBj0AEQB6Bj0AGQBPARsA8QBPARsA+QBFDgYB+QBgDg4BSQBPARQBEQFP
ASEBIQFPARsAIQBPARsALgAbAKYBLgBjAMwBLgALADUBLgATAH0BLgAjAKYBLgArAKYBLgAzAH0B
LgA7AKwBLgBDAKYBLgBbAMMBYwCDALsA4QBrAbsA4wBDAbsAaQZjASgBiQZjASgB3QAcAQQAAQAH
ADMACAA1AAAAhgZZAAAAiQZdAAAAkwZhAAAAmgZdAAAAqAZhAAAAvgZdAAAA2wZhAAAA6gZdAAAA
AAdhAAAACwddAAAAHQdhAAAALQddAAAARAdlAAAAUAddAAAAYwdhAAAAbgddAAAAgAdhAAAAiwdd
AAAAnQdhAAAArQddAAAAxAdZAAAAzwddAAAA4QdhAAAA6gddAAAA+gdqAAAABAhdAAAAFQhhAAAA
IghdAAAANghhAAAAQAhdAAAAUQhhAAAAYghdAAAAeghhAAAAkQhdAAAArwhhAAAAuQhdAAAAyghq
AAAA5ghdAAAACQlhAAAAJAldAAAARglhAAAAWQldAAAAcwlhAAAAhgldAAAAoAlhAAAAsgldAAAA
ywlhAAAA4QldAAAA/glhAAAAGgpdAAAAXgqRAAAA1wqWAAAA+wqkAAIACgADAAIACwAFAAIADAAH
AAIADQAJAAIADgALAAIADwANAAIAEAAPAAIAEQARAAIAEgATAAIAEwAVAAIAFAAXAAIAFQAZAAIA
FgAbAAIAFwAdAAIAGAAfAAIAGQAhAAIAGgAjAAIAGwAlAAIAHAAnAAIAHQApAAIAHgArAAIAHwAt
AAIAIAAvAAIAIQAxAAIAIgAzAAIAIwA1AAIAJAA3AAIAJQA5AAIAJgA7AAIAJwA9AAIAKAA/AAIA
KQBBAAIAKgBDAAIAKwBFAAIALABHAAIALQBJAAIALgBLAAIALwBNAAEAMABPAAEAMQBRAAEAMgBT
AAEAMwBVAAEANABXAAEANQBZAAEANgBbAAEANwBdAAEAOABfAAEAOQBhAAEAOgBjAAEAOwBlAAIA
QQBnAAIAQgBpAAEAQwBpAAIARABrAASAAAABAAAA1x2hfQAAAAAAAN4MAAAMAAAAAAAAAAAAAAAB
ALAAAAAAAAQAAAAAAAAAAAAAAAoACwEAAAAABAAAAAAAAAAAAAAACgAUAQAAAAAMAAAAAAAAAAAA
AAABAFUBAAAAAAAAAAABAAAA0w4AAAAAAAAAPE1vZHVsZT4AU0NfZmIwMjhjNTdlYTYxNDYzOGI4
ZGQyNjU4NjNmMmEwNTMuZGxsAFVzZXJDb21wb25lbnQAU2NyaXB0TWFpbgBJbnB1dDBCdWZmZXIA
Q29ubmVjdGlvbnMAVmFyaWFibGVzAFJlc291cmNlcwBTQ19mYjAyOGM1N2VhNjE0NjM4YjhkZDI2
NTg2M2YyYTA1My5Qcm9wZXJ0aWVzAFNldHRpbmdzAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuVHhTY3Jp
cHQATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUAU2NyaXB0Q29tcG9uZW50AFNjcmlw
dEJ1ZmZlcgBtc2NvcmxpYgBTeXN0ZW0AT2JqZWN0AFN5c3RlbS5Db25maWd1cmF0aW9uAEFwcGxp
Y2F0aW9uU2V0dGluZ3NCYXNlAC5jdG9yAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuUGlwZWxpbmVIb3N0
AFBpcGVsaW5lQnVmZmVyAE91dHB1dE5hbWVNYXAAUHJvY2Vzc0lucHV0AElucHV0MF9Qcm9jZXNz
SW5wdXQASW5wdXQwX1Byb2Nlc3NJbnB1dFJvdwBQcmVFeGVjdXRlAFBvc3RFeGVjdXRlAGdldF9J
RABnZXRfSURfSXNOdWxsAGdldF9hZ2VuY3kAZ2V0X2FnZW5jeV9Jc051bGwAZ2V0X2Fzc29jaWF0
ZWRwcmltZXZlbmRvcgBnZXRfYXNzb2NpYXRlZHByaW1ldmVuZG9yX0lzTnVsbABnZXRfY2FwaXRh
bHByb2plY3QAZ2V0X2NhcGl0YWxwcm9qZWN0X0lzTnVsbABnZXRfY29udHJhY3RpZABnZXRfY29u
dHJhY3RpZF9Jc051bGwAZ2V0X2NvbnRyYWN0cHVycG9zZQBnZXRfY29udHJhY3RwdXJwb3NlX0lz
TnVsbABEZWNpbWFsAGdldF9jaGVja2Ftb3VudABnZXRfY2hlY2thbW91bnRfSXNOdWxsAGdldF9k
ZXBhcnRtZW50AGdldF9kZXBhcnRtZW50X0lzTnVsbABnZXRfZG9jdW1lbnRpZABnZXRfZG9jdW1l
bnRpZF9Jc051bGwAZ2V0X2V4cGVuc2VjYXRlZ29yeQBnZXRfZXhwZW5zZWNhdGVnb3J5X0lzTnVs
bABnZXRfZmlzY2FseWVhcgBnZXRfZmlzY2FseWVhcl9Jc051bGwAZ2V0X2luZHVzdHJ5AGdldF9p
bmR1c3RyeV9Jc051bGwARGF0ZVRpbWUAZ2V0X2lzc3VlZGF0ZQBnZXRfaXNzdWVkYXRlX0lzTnVs
bABnZXRfbXdiZWNhdGVnb3J5AGdldF9td2JlY2F0ZWdvcnlfSXNOdWxsAGdldF9wYXllZW5hbWUA
Z2V0X3BheWVlbmFtZV9Jc051bGwAZ2V0X3NwZW5kaW5nY2F0ZWdvcnkAZ2V0X3NwZW5kaW5nY2F0
ZWdvcnlfSXNOdWxsAGdldF9zdWJjb250cmFjdHJlZmVyZW5jZWlkAGdldF9zdWJjb250cmFjdHJl
ZmVyZW5jZWlkX0lzTnVsbABnZXRfc3VidmVuZG9yAGdldF9zdWJ2ZW5kb3JfSXNOdWxsAGdldF9M
YXN0VXBkYXRlZFRpbWVzdGFtcERlcml2ZWQAZ2V0X0xhc3RVcGRhdGVkVGltZXN0YW1wRGVyaXZl
ZF9Jc051bGwAc2V0X1JlZ2lzdHJhdGlvblNUQUdJTkdEZXJpdmVkAHNldF9SZWdpc3RyYXRpb25T
VEFHSU5HRGVyaXZlZF9Jc051bGwAc2V0X0RlcHRTVEFHSU5HRGVyaXZlZABzZXRfRGVwdFNUQUdJ
TkdEZXJpdmVkX0lzTnVsbABzZXRfQ29kZVNUQUdJTkdEZXJpdmVkAHNldF9Db2RlU1RBR0lOR0Rl
cml2ZWRfSXNOdWxsAHNldF9PY2NTVEFHSU5HRGVyaXZlZABzZXRfT2NjU1RBR0lOR0Rlcml2ZWRf
SXNOdWxsAHNldF9DYXBQcm9qU1RBR0lOR0Rlcml2ZWQAc2V0X0NhcFByb2pTVEFHSU5HRGVyaXZl
ZF9Jc051bGwAc2V0X1Byb2plY3RBZ2VuY3lTVEFHSU5HRGVyaXZlZABzZXRfUHJvamVjdEFnZW5j
eVNUQUdJTkdEZXJpdmVkX0lzTnVsbABOZXh0Um93AEVuZE9mUm93c2V0AElEAElEX0lzTnVsbABh
Z2VuY3kAYWdlbmN5X0lzTnVsbABhc3NvY2lhdGVkcHJpbWV2ZW5kb3IAYXNzb2NpYXRlZHByaW1l
dmVuZG9yX0lzTnVsbABjYXBpdGFscHJvamVjdABjYXBpdGFscHJvamVjdF9Jc051bGwAY29udHJh
Y3RpZABjb250cmFjdGlkX0lzTnVsbABjb250cmFjdHB1cnBvc2UAY29udHJhY3RwdXJwb3NlX0lz
TnVsbABjaGVja2Ftb3VudABjaGVja2Ftb3VudF9Jc051bGwAZGVwYXJ0bWVudABkZXBhcnRtZW50
X0lzTnVsbABkb2N1bWVudGlkAGRvY3VtZW50aWRfSXNOdWxsAGV4cGVuc2VjYXRlZ29yeQBleHBl
bnNlY2F0ZWdvcnlfSXNOdWxsAGZpc2NhbHllYXIAZmlzY2FseWVhcl9Jc051bGwAaW5kdXN0cnkA
aW5kdXN0cnlfSXNOdWxsAGlzc3VlZGF0ZQBpc3N1ZWRhdGVfSXNOdWxsAG13YmVjYXRlZ29yeQBt
d2JlY2F0ZWdvcnlfSXNOdWxsAHBheWVlbmFtZQBwYXllZW5hbWVfSXNOdWxsAHNwZW5kaW5nY2F0
ZWdvcnkAc3BlbmRpbmdjYXRlZ29yeV9Jc051bGwAc3ViY29udHJhY3RyZWZlcmVuY2VpZABzdWJj
b250cmFjdHJlZmVyZW5jZWlkX0lzTnVsbABzdWJ2ZW5kb3IAc3VidmVuZG9yX0lzTnVsbABMYXN0
VXBkYXRlZFRpbWVzdGFtcERlcml2ZWQATGFzdFVwZGF0ZWRUaW1lc3RhbXBEZXJpdmVkX0lzTnVs
bABSZWdpc3RyYXRpb25TVEFHSU5HRGVyaXZlZABSZWdpc3RyYXRpb25TVEFHSU5HRGVyaXZlZF9J
c051bGwARGVwdFNUQUdJTkdEZXJpdmVkAERlcHRTVEFHSU5HRGVyaXZlZF9Jc051bGwAQ29kZVNU
QUdJTkdEZXJpdmVkAENvZGVTVEFHSU5HRGVyaXZlZF9Jc051bGwAT2NjU1RBR0lOR0Rlcml2ZWQA
T2NjU1RBR0lOR0Rlcml2ZWRfSXNOdWxsAENhcFByb2pTVEFHSU5HRGVyaXZlZABDYXBQcm9qU1RB
R0lOR0Rlcml2ZWRfSXNOdWxsAFByb2plY3RBZ2VuY3lTVEFHSU5HRGVyaXZlZABQcm9qZWN0QWdl
bmN5U1RBR0lOR0Rlcml2ZWRfSXNOdWxsAFBhcmVudENvbXBvbmVudABTeXN0ZW0uUmVzb3VyY2Vz
AFJlc291cmNlTWFuYWdlcgByZXNvdXJjZU1hbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBDdWx0dXJl
SW5mbwByZXNvdXJjZUN1bHR1cmUAZ2V0X1Jlc291cmNlTWFuYWdlcgBnZXRfQ3VsdHVyZQBzZXRf
Q3VsdHVyZQBDdWx0dXJlAGRlZmF1bHRJbnN0YW5jZQBnZXRfRGVmYXVsdABEZWZhdWx0AElucHV0
SUQASW5wdXROYW1lAEJ1ZmZlcgBPdXRwdXRNYXAAUm93AEJ1ZmZlckNvbHVtbkluZGV4ZXMAdmFs
dWUAQ29tcG9uZW50AFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVGFyZ2V0RnJhbWV3b3JrQXR0
cmlidXRlAFN5c3RlbS5SZWZsZWN0aW9uAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlE
ZXNjcmlwdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNzZW1i
bHlDb21wYW55QXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHly
aWdodEF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBBc3NlbWJseUN1bHR1cmVB
dHRyaWJ1dGUAQXNzZW1ibHlWZXJzaW9uQXR0cmlidXRlAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVy
U2VydmljZXMAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJp
bGl0eUF0dHJpYnV0ZQBTQ19mYjAyOGM1N2VhNjE0NjM4YjhkZDI2NTg2M2YyYTA1MwBTdHJpbmcA
U3RyaW5nQ29tcGFyaXNvbgBFcXVhbHMAR2V0Q29sdW1uSW5kZXhlcwBTU0lTU2NyaXB0Q29tcG9u
ZW50RW50cnlQb2ludEF0dHJpYnV0ZQBnZXRfTGVuZ3RoAFN1YnN0cmluZwBvcF9FcXVhbGl0eQBD
aGFyAFRyaW1FbmQATWF0aABNYXgARXhjZXB0aW9uAEdldEludDMyAElzTnVsbABHZXRTdHJpbmcA
R2V0RGVjaW1hbABHZXREYXRlAEdldERhdGVUaW1lAHNldF9JdGVtAFNldE51bGwASW52YWxpZE9w
ZXJhdGlvbkV4Y2VwdGlvbgBTeXN0ZW0uRGlhZ25vc3RpY3MARGVidWdnZXJOb25Vc2VyQ29kZUF0
dHJpYnV0ZQBUeXBlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEFzc2VtYmx5
AGdldF9Bc3NlbWJseQBTeXN0ZW0uQ29tcG9uZW50TW9kZWwARWRpdG9yQnJvd3NhYmxlQXR0cmli
dXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAC5jY3Rv
cgBTQ19mYjAyOGM1N2VhNjE0NjM4YjhkZDI2NTg2M2YyYTA1My5Qcm9wZXJ0aWVzLlJlc291cmNl
cy5yZXNvdXJjZXMAAAAAD0kAbgBwAHUAdAAgADAAAAdDAFQAMQAACUMAVABBADEAAAdEAE8AMQAA
CU0ATQBBADEAAAlSAEMAVAAxAAAJUABSAEMAMgAAB1AATwBEAAAHUABPAEMAAAlQAE8ATgAxAAAJ
UABSAE0AMQAACVAAQwBDADEAAAlDAFQAQQAyAAALUgBUAEcAUABGAAAHTgAvAEEAAD9FAFIAUgBP
AFIAOgAgAGEAbgAgAGUAeABjAGUAcAB0AGkAbwBuACAAaABhAHMAIABvAGMAYwB1AHIAZQBkAACA
m0kAcwBOAHUAbABsACAAcAByAG8AcABlAHIAdAB5ACAAYwBhAG4AbgBvAHQAIABiAGUAIABzAGUA
dAAgAHQAbwAgAEYAYQBsAHMAZQAuACAAQQBzAHMAaQBnAG4AIABhACAAdgBhAGwAdQBlACAAdABv
ACAAdABoAGUAIABjAG8AbAB1AG0AbgAgAGkAbgBzAHQAZQBhAGQALgAAcVMAQwBfAGYAYgAwADIA
OABjADUANwBlAGEANgAxADQANgAzADgAYgA4AGQAZAAyADYANQA4ADYAMwBmADIAYQAwADUAMwAu
AFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAYKp7bDiTekijIKRHwqSI
VAAIiYRdzYCAzJEIt3pcVhk04IkDBhIUAwYSGAMgAAEJIAQBCA4SFRIZBSABARIQCSADARIVHQgS
GQMgAAgDIAACAyAADgQgABEdBCAAESEEIAEBDgQgAQECAygACAMoAAIDKAAOBCgAER0EKAARIQMG
EgUFIAEBEgUDBhIlAwYSKQQAABIlBAAAEikFAAEBEikECAASJQQIABIpAwYSIAQAABIgBAgAEiAE
IAEBCAYgAgIOEWEFIAEdCAgEAQAAAAUgAg4ICAUAAgIODgQgAQ4IBSABDh0DBQACCAgIBAcCDg4D
BhIVAwYdCAQgAQgIBCABAggFIAERHQgFIAERIQgFIAIBCBwHAAESfRGAgQUgABKAhQcgAgEOEoCF
BAcBEiUGIAEBEYCNCAEAAgAAAAAAAwAAAUcBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuMAEA
VA4URnJhbWV3b3JrRGlzcGxheU5hbWUQLk5FVCBGcmFtZXdvcmsgNCgBACNTQ19mYjAyOGM1N2Vh
NjE0NjM4YjhkZDI2NTg2M2YyYTA1MwAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDIwAAAIAQAI
AAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBANRIAAAAAAAAAAAAAO5IAAAAIAAA
AAAAAAAAAAAAAAAAAAAAAAAAAADgSAAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxs
AAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgA
AIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAAsAMA
AAAAAAAAAAAAsAM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEA
AAABAKF91x0AAAEAoX3XHT8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBG
AGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBBAD
AAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAOwCAAABADAAMAAwADAAMAA0AGIAMAAA
AHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAEMAXwBmAGIAMAAyADgA
YwA1ADcAZQBhADYAMQA0ADYAMwA4AGIAOABkAGQAMgA2ADUAOAA2ADMAZgAyAGEAMAA1ADMAAABA
AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANwA2ADMAOQAuADMAMgAxADYA
MQAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAEMAXwBmAGIAMAAyADgAYwA1
ADcAZQBhADYAMQA0ADYAMwA4AGIAOABkAGQAMgA2ADUAOAA2ADMAZgAyAGEAMAA1ADMALgBkAGwA
bAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0
ACAAQAAgACAAMgAwADIAMAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUA
AABTAEMAXwBmAGIAMAAyADgAYwA1ADcAZQBhADYAMQA0ADYAMwA4AGIAOABkAGQAMgA2ADUAOAA2
ADMAZgAyAGEAMAA1ADMALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAA
UwBDAF8AZgBiADAAMgA4AGMANQA3AGUAYQA2ADEANAA2ADMAOABiADgAZABkADIANgA1ADgANgAz
AGYAMgBhADAANQAzAAAARAAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAA
LgA3ADYAMwA5AC4AMwAyADEANgAxAAAAAABIAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBz
AGkAbwBuAAAAMQAuADAALgA3ADYAMwA5AC4AMwAyADEANgAxAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAAAA5AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_fb028c57ea614638b8dd265863f2a053</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum"
                  typeConverter="NOTBROWSABLE">fdd8c41a89dca3caf47277309f74cad1</property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataShaChecksum"
                  typeConverter="NOTBROWSABLE">d8112843f8c692341d916179f4892d1b7303c40d</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0]"
                  hasSideEffects="true"
                  name="Input 0">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0].Columns[ID]"
                      cachedDataType="i4"
                      cachedName="ID"
                      cachedSortKeyPosition="1"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[ID]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0].Columns[agency]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="agency"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[agency]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0].Columns[associated_prime_vendor]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="associated_prime_vendor"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[associated_prime_vendor]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0].Columns[capital_project]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="capital_project"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[capital_project]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0].Columns[contract_id]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="contract_id"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[contract_id]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0].Columns[contract_purpose]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="contract_purpose"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[contract_purpose]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0].Columns[check_amount]"
                      cachedDataType="cy"
                      cachedName="check_amount"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[check_amount]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0].Columns[department]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="department"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[department]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0].Columns[document_id]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="document_id"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[document_id]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0].Columns[expense_category]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expense_category"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[expense_category]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0].Columns[fiscal_year]"
                      cachedDataType="i4"
                      cachedName="fiscal_year"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[fiscal_year]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0].Columns[industry]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="industry"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[industry]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0].Columns[issue_date]"
                      cachedDataType="dbDate"
                      cachedName="issue_date"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[issue_date]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0].Columns[mwbe_category]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="mwbe_category"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[mwbe_category]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0].Columns[payee_name]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="payee_name"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[payee_name]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0].Columns[spending_category]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="spending_category"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[spending_category]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0].Columns[sub_contract_reference_id]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_contract_reference_id"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[sub_contract_reference_id]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0].Columns[sub_vendor]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_vendor"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[sub_vendor]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0].Columns[LastUpdatedTimestamp_Derived]"
                      cachedDataType="dbTimeStamp"
                      cachedName="LastUpdatedTimestamp_Derived"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime for Final Spending table.Outputs[Derived Column Output].Columns[LastUpdatedTimestamp_Derived]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Outputs[Output 0]"
                  name="Output 0"
                  synchronousInputId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Outputs[Output 0].Columns[RegistrationSTAGING_Derived]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Outputs[Output 0].Columns[RegistrationSTAGING_Derived]"
                      name="RegistrationSTAGING_Derived" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Outputs[Output 0].Columns[DeptSTAGING_Derived]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Outputs[Output 0].Columns[DeptSTAGING_Derived]"
                      name="DeptSTAGING_Derived" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Outputs[Output 0].Columns[CodeSTAGING_Derived]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Outputs[Output 0].Columns[CodeSTAGING_Derived]"
                      name="CodeSTAGING_Derived" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Outputs[Output 0].Columns[OccSTAGING_Derived]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Outputs[Output 0].Columns[OccSTAGING_Derived]"
                      name="OccSTAGING_Derived" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Outputs[Output 0].Columns[CapProjSTAGING_Derived]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Outputs[Output 0].Columns[CapProjSTAGING_Derived]"
                      name="CapProjSTAGING_Derived" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Outputs[Output 0].Columns[ProjectAgencySTAGING_Derived]"
                      dataType="wstr"
                      length="50"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Outputs[Output 0].Columns[ProjectAgencySTAGING_Derived]"
                      name="ProjectAgencySTAGING_Derived" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime for Final Spending table"
              componentClassID="Microsoft.DerivedColumn"
              contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
              name="Derive Current Datetime for Final Spending table"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime for Final Spending table.Inputs[Derived Column Input]"
                  description="Input to the Derived Column Transformation"
                  name="Derived Column Input">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime for Final Spending table.Outputs[Derived Column Output]"
                  description="Default Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  name="Derived Column Output"
                  synchronousInputId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime for Final Spending table.Inputs[Derived Column Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime for Final Spending table.Outputs[Derived Column Output].Columns[LastUpdatedTimestamp_Derived]"
                      dataType="dbTimeStamp"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime for Final Spending table.Outputs[Derived Column Output].Columns[LastUpdatedTimestamp_Derived]"
                      name="LastUpdatedTimestamp_Derived"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Derived Column Expression"
                          name="Expression">[GETDATE]()</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Derived Column Friendly Expression"
                          expressionType="Notify"
                          name="FriendlyExpression">GETDATE()</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime for Final Spending table.Outputs[Derived Column Error Output]"
                  description="Error Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Derived Column Error Output"
                  synchronousInputId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime for Final Spending table.Inputs[Derived Column Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime for Final Spending table.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime for Final Spending table.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime for Final Spending table.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime for Final Spending table.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000"
              componentClassID="Microsoft.OLEDBDestination"
              contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
              description="OLE DB Destination"
              name="Insert records (Final - Spending) - Batch 100,000"
              usesDispositions="true"
              version="4">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[dbo].[Spending]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">3</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepIdentity">false</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                  name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                <property
                  dataType="System.Int32"
                  description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                  name="FastLoadMaxInsertCommitSize">100000</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  connectionManagerRefId="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input]"
                  errorOrTruncationOperation="Insert"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[agency]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="agency"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[agency]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[agency]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[associated_prime_vendor]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="associated_prime_vendor"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[associated_prime_vendor]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[associated_prime_vendor]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[capital_project]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="capital_project"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[capital_project]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[capital_project]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[contract_id]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="contract_id"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[contract_id]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[contract_id]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[contract_purpose]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="contract_purpose"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[contract_purpose]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[contract_purpose]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[department]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="department"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[department]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[department]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[document_id]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="document_id"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[document_id]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[document_id]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[expense_category]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expense_category"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[expense_category]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[expense_category]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[industry]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="industry"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[industry]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[industry]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[mwbe_category]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="mwbe_category"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[mwbe_category]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[mwbe_category]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[payee_name]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="payee_name"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[payee_name]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[payee_name]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[spending_category]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="spending_category"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[spending_category]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[spending_category]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[sub_contract_reference_id]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_contract_reference_id"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_contract_reference_id]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[sub_contract_reference_id]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[sub_vendor]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_vendor"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_vendor]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[sub_vendor]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[ID]"
                      cachedDataType="i4"
                      cachedName="ID"
                      cachedSortKeyPosition="1"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[StagingID]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[ID]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[LastUpdatedTimestamp_Derived]"
                      cachedDataType="dbTimeStamp"
                      cachedName="LastUpdatedTimestamp_Derived"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[LastUpdatedTimestamp]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime for Final Spending table.Outputs[Derived Column Output].Columns[LastUpdatedTimestamp_Derived]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[check_amount_DataTypeConverted]"
                      cachedDataType="cy"
                      cachedName="check_amount_DataTypeConverted"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[check_amount]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[check_amount_DataTypeConverted]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[fiscal_year_DataTypeConverted]"
                      cachedDataType="i4"
                      cachedName="fiscal_year_DataTypeConverted"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[fiscal_year]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[fiscal_year_DataTypeConverted]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[issue_date_DataTypeConverted]"
                      cachedDataType="dbDate"
                      cachedName="issue_date_DataTypeConverted"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[issue_date]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output].Columns[issue_date_DataTypeConverted]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[CodeSTAGING_Derived]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="CodeSTAGING_Derived"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[Code]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Outputs[Output 0].Columns[CodeSTAGING_Derived]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[DeptSTAGING_Derived]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="DeptSTAGING_Derived"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[Dept]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Outputs[Output 0].Columns[DeptSTAGING_Derived]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[RegistrationSTAGING_Derived]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="RegistrationSTAGING_Derived"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[Registration]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Outputs[Output 0].Columns[RegistrationSTAGING_Derived]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[ProjectAgencySTAGING_Derived]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="ProjectAgencySTAGING_Derived"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[ProjectAgency]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Outputs[Output 0].Columns[ProjectAgencySTAGING_Derived]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[CapProjSTAGING_Derived]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="CapProjSTAGING_Derived"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[CapProj]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Outputs[Output 0].Columns[CapProjSTAGING_Derived]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[OccSTAGING_Derived]"
                      cachedDataType="wstr"
                      cachedLength="50"
                      cachedName="OccSTAGING_Derived"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[Occ]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Outputs[Output 0].Columns[OccSTAGING_Derived]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[ID]"
                      dataType="i4"
                      name="ID" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[StagingID]"
                      dataType="i4"
                      name="StagingID" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[LastUpdatedTimestamp]"
                      dataType="dbTimeStamp"
                      name="LastUpdatedTimestamp" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[agency]"
                      dataType="wstr"
                      length="255"
                      name="agency" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[associated_prime_vendor]"
                      dataType="wstr"
                      length="255"
                      name="associated_prime_vendor" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[capital_project]"
                      dataType="wstr"
                      length="255"
                      name="capital_project" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[contract_id]"
                      dataType="wstr"
                      length="255"
                      name="contract_id" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[contract_purpose]"
                      dataType="wstr"
                      length="255"
                      name="contract_purpose" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[check_amount]"
                      dataType="cy"
                      name="check_amount" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[department]"
                      dataType="wstr"
                      length="255"
                      name="department" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[document_id]"
                      dataType="wstr"
                      length="255"
                      name="document_id" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[expense_category]"
                      dataType="wstr"
                      length="255"
                      name="expense_category" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[fiscal_year]"
                      dataType="i4"
                      name="fiscal_year" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[industry]"
                      dataType="wstr"
                      length="255"
                      name="industry" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[issue_date]"
                      dataType="dbDate"
                      name="issue_date" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[mwbe_category]"
                      dataType="wstr"
                      length="255"
                      name="mwbe_category" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[payee_name]"
                      dataType="wstr"
                      length="255"
                      name="payee_name" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[spending_category]"
                      dataType="wstr"
                      length="255"
                      name="spending_category" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_contract_reference_id]"
                      dataType="wstr"
                      length="255"
                      name="sub_contract_reference_id" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[sub_vendor]"
                      dataType="wstr"
                      length="255"
                      name="sub_vendor" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[Code]"
                      dataType="wstr"
                      length="255"
                      name="Code" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[Dept]"
                      dataType="wstr"
                      length="255"
                      name="Dept" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[Registration]"
                      dataType="wstr"
                      length="255"
                      name="Registration" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[ProjectAgency]"
                      dataType="wstr"
                      length="255"
                      name="ProjectAgency" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[CapProj]"
                      dataType="wstr"
                      length="255"
                      name="CapProj" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[Occ]"
                      dataType="wstr"
                      length="255"
                      name="Occ" />
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Outputs[OLE DB Destination Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Destination Error Output"
                  synchronousInputId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;9"
              description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
              name="Replace any column that is &quot;-&quot; with NULL"
              version="9">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="30">
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        /*
         * Add your code here
         */
        try
        {
            Row.agency = (Row.agency == "-" ? null : Row.agency);
            Row.associatedprimevendor = (Row.associatedprimevendor == "-" ? null : Row.associatedprimevendor);
            Row.capitalproject = (Row.capitalproject == "-" ? null : Row.capitalproject);
            Row.contractid = (Row.contractid == "-" ? null : Row.contractid);
            Row.contractpurpose = (Row.contractpurpose == "-" ? null : Row.contractpurpose);
            Row.department = (Row.department == "-" ? null : Row.department);
            Row.documentid = (Row.documentid == "-" ? null : Row.documentid);
            Row.expensecategory = (Row.expensecategory == "-" ? null : Row.expensecategory);
            Row.industry = (Row.industry == "-" ? null : Row.industry);
            Row.mwbecategory = (Row.mwbecategory == "-" ? null : Row.mwbecategory);
            Row.payeename = (Row.payeename == "-" ? null : Row.payeename);
            Row.spendingcategory = (Row.spendingcategory == "-" ? null : Row.spendingcategory);
            Row.subcontractreferenceid = (Row.subcontractreferenceid == "-" ? null : Row.subcontractreferenceid);
            Row.subvendor = (Row.subvendor == "-" ? null : Row.subvendor);
        }
        catch (Exception ex)
        {
            Row.agency = "ERROR";
            Row.associatedprimevendor = "ERROR";
            Row.capitalproject = "ERROR";
            Row.contractid = "ERROR";
            Row.contractpurpose = "ERROR";
            Row.department = "ERROR";
            Row.documentid = "ERROR";
            Row.expensecategory = "ERROR";
            Row.industry = "ERROR";
            Row.mwbecategory = "ERROR";
            Row.payeename = "ERROR";
            Row.spendingcategory = "ERROR";
            Row.subcontractreferenceid = "ERROR";
            Row.subvendor = "ERROR";
        }
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 ID
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[0]);
        }
    }
    public bool ID_IsNull
    {
        get
        {
            return IsNull(0);
        }
    }

    public String agency
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[1]);
        }
        set
        {
            this[1] = value;
        }
    }
    public bool agency_IsNull
    {
        get
        {
            return IsNull(1);
        }
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String associatedprimevendor
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[2]);
        }
        set
        {
            this[2] = value;
        }
    }
    public bool associatedprimevendor_IsNull
    {
        get
        {
            return IsNull(2);
        }
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String capitalproject
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[3]);
        }
        set
        {
            this[3] = value;
        }
    }
    public bool capitalproject_IsNull
    {
        get
        {
            return IsNull(3);
        }
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String contractid
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[4]);
        }
        set
        {
            this[4] = value;
        }
    }
    public bool contractid_IsNull
    {
        get
        {
            return IsNull(4);
        }
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String contractpurpose
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[5]);
        }
        set
        {
            this[5] = value;
        }
    }
    public bool contractpurpose_IsNull
    {
        get
        {
            return IsNull(5);
        }
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Decimal checkamount
    {
        get
        {
            return Buffer.GetDecimal(BufferColumnIndexes[6]);
        }
        set
        {
            this[6] = value;
        }
    }
    public bool checkamount_IsNull
    {
        get
        {
            return IsNull(6);
        }
        set
        {
            if (value)
            {
                SetNull(6);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String department
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[7]);
        }
        set
        {
            this[7] = value;
        }
    }
    public bool department_IsNull
    {
        get
        {
            return IsNull(7);
        }
        set
        {
            if (value)
            {
                SetNull(7);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String documentid
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[8]);
        }
        set
        {
            this[8] = value;
        }
    }
    public bool documentid_IsNull
    {
        get
        {
            return IsNull(8);
        }
        set
        {
            if (value)
            {
                SetNull(8);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String expensecategory
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[9]);
        }
        set
        {
            this[9] = value;
        }
    }
    public bool expensecategory_IsNull
    {
        get
        {
            return IsNull(9);
        }
        set
        {
            if (value)
            {
                SetNull(9);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 fiscalyear
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[10]);
        }
        set
        {
            this[10] = value;
        }
    }
    public bool fiscalyear_IsNull
    {
        get
        {
            return IsNull(10);
        }
        set
        {
            if (value)
            {
                SetNull(10);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String industry
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[11]);
        }
        set
        {
            this[11] = value;
        }
    }
    public bool industry_IsNull
    {
        get
        {
            return IsNull(11);
        }
        set
        {
            if (value)
            {
                SetNull(11);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public DateTime issuedate
    {
        get
        {
            return Buffer.GetDate(BufferColumnIndexes[12]);
        }
        set
        {
            this[12] = value;
        }
    }
    public bool issuedate_IsNull
    {
        get
        {
            return IsNull(12);
        }
        set
        {
            if (value)
            {
                SetNull(12);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String mwbecategory
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[13]);
        }
        set
        {
            this[13] = value;
        }
    }
    public bool mwbecategory_IsNull
    {
        get
        {
            return IsNull(13);
        }
        set
        {
            if (value)
            {
                SetNull(13);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String payeename
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[14]);
        }
        set
        {
            this[14] = value;
        }
    }
    public bool payeename_IsNull
    {
        get
        {
            return IsNull(14);
        }
        set
        {
            if (value)
            {
                SetNull(14);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String spendingcategory
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[15]);
        }
        set
        {
            this[15] = value;
        }
    }
    public bool spendingcategory_IsNull
    {
        get
        {
            return IsNull(15);
        }
        set
        {
            if (value)
            {
                SetNull(15);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String subcontractreferenceid
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[16]);
        }
        set
        {
            this[16] = value;
        }
    }
    public bool subcontractreferenceid_IsNull
    {
        get
        {
            return IsNull(16);
        }
        set
        {
            if (value)
            {
                SetNull(16);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String subvendor
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[17]);
        }
        set
        {
            this[17] = value;
        }
    }
    public bool subvendor_IsNull
    {
        get
        {
            return IsNull(17);
        }
        set
        {
            if (value)
            {
                SetNull(17);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public DateTime LastUpdatedTimestampDerived
    {
        get
        {
            return Buffer.GetDateTime(BufferColumnIndexes[18]);
        }
    }
    public bool LastUpdatedTimestampDerived_IsNull
    {
        get
        {
            return IsNull(18);
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_a653ed6b2323468986cb6b49af9d1cf0.Properties.Settings.get_Default():SC_a653ed6b2323468986cb6b49af9d1cf0.Properties.Sett" +
    "ings")]

namespace SC_a653ed6b2323468986cb6b49af9d1cf0.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_a653ed6b2323468986cb6b49af9d1cf0.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_a653ed6b2323468986cb6b49af9d1cf0.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_a653ed6b2323468986cb6b49af9d1cf0.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_a653ed6b2323468986cb6b49af9d1cf0.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_a653ed6b2323468986cb6b49af9d1cf0.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>SC_a653ed6b2323468986cb6b49af9d1cf0</msb:CodeName>
		<msb:DisplayName>SC_a653ed6b2323468986cb6b49af9d1cf0</msb:DisplayName>
		<msb:ProjectId>{7C9E3A3C-3297-4FC7-B0C7-C1C2077BE204}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_a653ed6b2323468986cb6b49af9d1cf0.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ComponentWrapper.cs"/>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_a653ed6b2323468986cb6b49af9d1cf0")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_a653ed6b2323468986cb6b49af9d1cf0")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_a653ed6b2323468986cb6b49af9d1cf0.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{51bb80d1-8ec5-48c2-ad25-05f4682b0a38}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_a653ed6b2323468986cb6b49af9d1cf0</RootNamespace>
    <AssemblyName>SC_a653ed6b2323468986cb6b49af9d1cf0</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptComponent" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptComponent" GeneratedNamespace="SC_a653ed6b2323468986cb6b49af9d1cf0" IconIndex="0"></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_SC120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="2">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_a653ed6b2323468986cb6b49af9d1cf0.dll]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAIF3xV8AAAAAAAAAAOAAAiELAQsAACoAAAAIAAAAAAAAzkgA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACgAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAIBIAABLAAAAAGAAAAgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA1CgAAAAgAAAAKgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAgEAAAAYAAAAAYAAAAsAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAAMgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACw
SAAAAAAAAEgAAAACAAUAYCkAACAfAAABAAAAAAAAAKgoAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH4CKA0AAAoCAnNUAAAGfQEAAAQCAnNVAAAGfQIAAAQqkgRy
AQAAcBpvDgAACiwVAgUCAygPAAAKDgRzCQAABm8DAAAGKkorBwIDbwQAAAYDb1IAAAYt8SoGKh4C
KBEAAAoqHgIoEgAACioAAAswAwBxAgAAAAAAAAMDbwwAAAZyEQAAcCgTAAAKLQgDbwwAAAYrARRv
DQAABgMDbxAAAAZyEQAAcCgTAAAKLQgDbxAAAAYrARRvEQAABgMDbxQAAAZyEQAAcCgTAAAKLQgD
bxQAAAYrARRvFQAABgMDbxgAAAZyEQAAcCgTAAAKLQgDbxgAAAYrARRvGQAABgMDbxwAAAZyEQAA
cCgTAAAKLQgDbxwAAAYrARRvHQAABgMDbyQAAAZyEQAAcCgTAAAKLQgDbyQAAAYrARRvJQAABgMD
bygAAAZyEQAAcCgTAAAKLQgDbygAAAYrARRvKQAABgMDbywAAAZyEQAAcCgTAAAKLQgDbywAAAYr
ARRvLQAABgMDbzQAAAZyEQAAcCgTAAAKLQgDbzQAAAYrARRvNQAABgMDbzwAAAZyEQAAcCgTAAAK
LQgDbzwAAAYrARRvPQAABgMDb0AAAAZyEQAAcCgTAAAKLQgDb0AAAAYrARRvQQAABgMDb0QAAAZy
EQAAcCgTAAAKLQgDb0QAAAYrARRvRQAABgMDb0gAAAZyEQAAcCgTAAAKLQgDb0gAAAYrARRvSQAA
BgMDb0wAAAZyEQAAcCgTAAAKLQgDb0wAAAYrARRvTQAABt2dAAAAJgNyFQAAcG8NAAAGA3IVAABw
bxEAAAYDchUAAHBvFQAABgNyFQAAcG8ZAAAGA3IVAABwbx0AAAYDchUAAHBvJQAABgNyFQAAcG8p
AAAGA3IVAABwby0AAAYDchUAAHBvNQAABgNyFQAAcG89AAAGA3IVAABwb0EAAAYDchUAAHBvRQAA
BgNyFQAAcG9JAAAGA3IVAABwb00AAAbeACoAAABBHAAAAAAAAAAAAADTAQAA0wEAAJ0AAAAaAAAB
HgIoAQAABioqAgMEBSgUAAAKKlICexUAAAoCexYAAAoWlG8XAAAKKiICFigYAAAKKlICexUAAAoC
exYAAAoXlG8ZAAAKKiYCFwMoGgAACioiAhcoGAAACipaAywIAhcoGwAACipyIQAAcHMcAAAKelIC
exUAAAoCexYAAAoYlG8ZAAAKKiYCGAMoGgAACioiAhgoGAAACipaAywIAhgoGwAACipyIQAAcHMc
AAAKelICexUAAAoCexYAAAoZlG8ZAAAKKiYCGQMoGgAACioiAhkoGAAACipaAywIAhkoGwAACipy
IQAAcHMcAAAKelICexUAAAoCexYAAAoalG8ZAAAKKiYCGgMoGgAACioiAhooGAAACipaAywIAhoo
GwAACipyIQAAcHMcAAAKelICexUAAAoCexYAAAoblG8ZAAAKKiYCGwMoGgAACioiAhsoGAAACipa
AywIAhsoGwAACipyIQAAcHMcAAAKelICexUAAAoCexYAAAoclG8dAAAKKjoCHAOMBwAAASgaAAAK
KiICHCgYAAAKKloDLAgCHCgbAAAKKnIhAABwcxwAAAp6UgJ7FQAACgJ7FgAACh2UbxkAAAoqJgId
AygaAAAKKiICHSgYAAAKKloDLAgCHSgbAAAKKnIhAABwcxwAAAp6UgJ7FQAACgJ7FgAACh6UbxkA
AAoqJgIeAygaAAAKKiICHigYAAAKKloDLAgCHigbAAAKKnIhAABwcxwAAAp6VgJ7FQAACgJ7FgAA
Ch8JlG8ZAAAKKioCHwkDKBoAAAoqJgIfCSgYAAAKKl4DLAkCHwkoGwAACipyIQAAcHMcAAAKelYC
exUAAAoCexYAAAofCpRvFwAACio+Ah8KA4wcAAABKBoAAAoqJgIfCigYAAAKKl4DLAkCHwooGwAA
CipyIQAAcHMcAAAKelYCexUAAAoCexYAAAofC5RvGQAACioqAh8LAygaAAAKKiYCHwsoGAAACipe
AywJAh8LKBsAAAoqciEAAHBzHAAACnpWAnsVAAAKAnsWAAAKHwyUbx4AAAoqPgIfDAOMCAAAASga
AAAKKiYCHwwoGAAACipeAywJAh8MKBsAAAoqciEAAHBzHAAACnpWAnsVAAAKAnsWAAAKHw2UbxkA
AAoqKgIfDQMoGgAACiomAh8NKBgAAAoqXgMsCQIfDSgbAAAKKnIhAABwcxwAAAp6VgJ7FQAACgJ7
FgAACh8OlG8ZAAAKKioCHw4DKBoAAAoqJgIfDigYAAAKKl4DLAkCHw4oGwAACipyIQAAcHMcAAAK
elYCexUAAAoCexYAAAofD5RvGQAACioqAh8PAygaAAAKKiYCHw8oGAAACipeAywJAh8PKBsAAAoq
ciEAAHBzHAAACnpWAnsVAAAKAnsWAAAKHxCUbxkAAAoqKgIfEAMoGgAACiomAh8QKBgAAAoqXgMs
CQIfECgbAAAKKnIhAABwcxwAAAp6VgJ7FQAACgJ7FgAACh8RlG8ZAAAKKioCHxEDKBoAAAoqJgIf
ESgYAAAKKl4DLAkCHxEoGwAACipyIQAAcHMcAAAKelYCexUAAAoCexYAAAofEpRvHwAACiomAh8S
KBgAAAoqHgIoIAAACioeAighAAAKKjoCKCIAAAoCA30DAAAEKjoCKCIAAAoCA30EAAAEKh4CKCIA
AAoqAAAAEzACAC0AAAABAAARfgUAAAQtIHK+AABw0AcAAAIoJAAACm8lAAAKcyYAAAoKBoAFAAAE
fgUAAAQqGn4GAAAEKh4CgAYAAAQqGn4HAAAEKi5zWwAABoAHAAAEKh4CKCkAAAoqALQAAADOyu++
AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNp
b249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRl
MDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFE
ULQAAABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAAB8DAAAI34AAOgMAAAYDwAA
I1N0cmluZ3MAAAAAABwAADABAAAjVVMAMB0AABAAAAAjR1VJRAAAAEAdAADgAQAAI0Jsb2IAAAAA
AAAAAgAAAVcVogEJAQAAAPolMwAWAAABAAAAIwAAAAgAAAAHAAAAXAAAAC8AAAApAAAADwAAAAEA
AAADAAAAKQAAAEwAAAABAAAABAAAAAEAAAAAAAoAAQAAAAAABgDuAM0ABgD+AM0ACgAbARQBDgA3
ASIBEgB2Ac0ABgCFAc0ACgCpAxQBCgB9BRQBCgCFCnQKCgC2CqEKCgCPC3ULCgC6C6gLCgDRC6gL
CgDuC6gLCgANDKgLCgAmDKgLCgA/DKgLCgBaDKgLCgB1DKgLCgCODKgLCgDHDKcMCgDnDKcMCgAp
DRQBCgAwDRQBBgBZDc0ACgCMDRQBCgDBDRQBCgDmDRQBCgATDgAOCgAwDhQBCgA1DhQBCgBZDqgL
DgCFDm8ODgCeDm8OCgCzDqcMAAAAAAEAAAAAAAEAAQABABAAMgAAAAUAAQABAAEAEABAAAAACAAD
AAUAAQAQAEsAAAAJAAMACQABABAAWAAAAA0AAwBUAAEAEABkAAAADQAEAFUAAAAQAG4AeAANAAUA
VgAAARAApwB4ABEABwBaAAYAWAATAAYAZAAXAAEAZAqAAAEAZAqAABEAlQqKABEAwgqOABEABgus
AFAgAAAAAIYYTwEbAAEAcCAAAAAAxgCTAR8AAQCVIAAAAADGAaABKQAFAKggAAAAAMYBtAEpAAYA
qiAAAAAAxgDLARsABwCyIAAAAADGANYBGwAHALwgAAAAAMYAtAEpAAcAWCMAAAAAhhhPARsACABg
IwAAAACGGE8BLwAIAGsjAAAAAIYI4gE5AAsAgCMAAAAAhgjpAT0ACwCJIwAAAACGCPcBQQALAJ4j
AAAAAIYIAgJFAAsAqCMAAAAAhggNAj0ADACxIwAAAACGCB8CSgAMAMgjAAAAAIYIMQJBAA0A3SMA
AAAAhghLAkUADQDnIwAAAACGCGUCPQAOAPAjAAAAAIYIhgJKAA4AByQAAAAAhginAkEADwAcJAAA
AACGCLoCRQAPACYkAAAAAIYIzQI9ABAALyQAAAAAhgjnAkoAEABGJAAAAACGCAEDQQARAFskAAAA
AIYIEANFABEAZSQAAAAAhggfAz0AEgBuJAAAAACGCDUDSgASAIUkAAAAAIYISwNBABMAmiQAAAAA
hghfA0UAEwCkJAAAAACGCHMDPQAUAK0kAAAAAIYIjgNKABQAxCQAAAAAhgixA08AFQDZJAAAAACG
CMEDVAAVAOgkAAAAAIYI0QM9ABYA8SQAAAAAhgjoA0oAFgAIJQAAAACGCP8DQQAXAB0lAAAAAIYI
DgRFABcAJyUAAAAAhggdBD0AGAAwJQAAAACGCDMESgAYAEclAAAAAIYISQRBABkAXCUAAAAAhghY
BEUAGQBmJQAAAACGCGcEPQAaAG8lAAAAAIYIfQRKABoAhiUAAAAAhgiTBEEAGwCcJQAAAACGCKcE
RQAbAKclAAAAAIYIuwQ9ABwAsSUAAAAAhgjWBEoAHADJJQAAAACGCPEEOQAdAN8lAAAAAIYIAAVa
AB0A7yUAAAAAhggPBT0AHgD5JQAAAACGCCUFSgAeABEmAAAAAIYIOwVBAB8AJyYAAAAAhghIBUUA
HwAyJgAAAACGCFUFPQAgADwmAAAAAIYIaQVKACAAVCYAAAAAhgiGBV8AIQBqJgAAAACGCJQFZAAh
AHomAAAAAIYIogU9ACIAhCYAAAAAhgi3BUoAIgCcJgAAAACGCMwFQQAjALImAAAAAIYI3QVFACMA
vSYAAAAAhgjuBT0AJADHJgAAAACGCAYGSgAkAN8mAAAAAIYIHgZBACUA9SYAAAAAhggsBkUAJQAA
JwAAAACGCDoGPQAmAAonAAAAAIYITwZKACYAIicAAAAAhghkBkEAJwA4JwAAAACGCHkGRQAnAEMn
AAAAAIYIjgY9ACgATScAAAAAhgiqBkoAKABlJwAAAACGCMYGQQApAHsnAAAAAIYI4QZFACkAhicA
AAAAhgj8Bj0AKgCQJwAAAACGCB4HSgAqAKgnAAAAAIYIQAdBACsAvicAAAAAhghOB0UAKwDJJwAA
AACGCFwHPQAsANMnAAAAAIYIcQdKACwA6ycAAAAAhgiGB18ALQABKAAAAACGCKYHPQAtAAsoAAAA
AIYAzQc9AC0AEygAAAAAhgDVBz0ALQAbKAAAAACGGE8BhAAtACooAAAAAIYYTwGEAC4AOSgAAAAA
gxhPARsALwBEKAAAAACTCNIKkgAvAH0oAAAAAJMI5gqXAC8AhCgAAAAAkwjyCpwALwCMKAAAAACW
CBYLsAAwAJ8oAAAAAIYYTwEbADAAkygAAAAAkRjODiUBMAAAAAEAKgsAAAIAMgsAAAMAPAsAAAQA
QwsAAAEAPAsAAAEATQsAAAEATQsAAAEAPAsAAAIAUQsAAAMAQwsAAAEAZQsAAAEAZQsAAAEAZQsA
AAEAZQsAAAEAZQsAAAEAZQsAAAEAZQsAAAEAZQsAAAEAZQsAAAEAZQsAAAEAZQsAAAEAZQsAAAEA
ZQsAAAEAZQsAAAEAZQsAAAEAZQsAAAEAZQsAAAEAZQsAAAEAZQsAAAEAZQsAAAEAZQsAAAEAZQsA
AAEAZQsAAAEAZQsAAAEAZQsAAAEAZQsAAAEAZQsAAAEAZQsAAAEAZQsAAAEAZQsAAAEAZQsAAAEA
ZQsAAAEAZQsAAAEAZQsAAAEAawsAAAEAawsAAAEAZQtZAE8BRQBhAE8BRQBpAE8BRQBxAE8BRQB5
AE8BRQCBAE8BRQCJAE8BRQCRAE8BRQCZAE8BRQChAE8BRQCpAE8BWgCxAE8BGwAJAE8BGwC5AEEN
ugAJAEgNwQDJAE8BGwAJAMsBGwAJANYBGwC5AIANzAARAE8BLwARADwL0gARAFEL1gApAJYN2gAR
AJ8N3wApAKYN5AARALAN6QARALkNWgDZAE8BRQApANsN7wApAOwN9QApAPQN9QARAM0HPQARANUH
PQAZAE8BGwDpAE8BGwDxAEcO+wDxAGIOAgFJAE8BCAEJAU8BFQEZAU8BGwAhAE8BGwAuABsAmgEu
AGMAwAEuAAsAKQEuABMAcQEuACMAmgEuACsAmgEuADMAcQEuADsAoAEuAEMAmgEuAFsAtwFjAIMA
xwDhAEMBxwDjABsBxwDpBDsBHAEJBTsBHAEQAQQAAQAHACcACAApAAAA4QdqAAAA5AduAAAA7gdy
AAAA9QduAAAAAwhyAAAAGQhuAAAANghyAAAARQhuAAAAWwhyAAAAZghuAAAAeAhyAAAAiAhuAAAA
nwh2AAAAqwhuAAAAvghyAAAAyQhuAAAA2whyAAAA5ghuAAAA+AhyAAAACAluAAAAHwlqAAAAKglu
AAAAPAlyAAAARQluAAAAVQl7AAAAXwluAAAAcAlyAAAAfQluAAAAkQlyAAAAmwluAAAArAlyAAAA
vQluAAAA1QlyAAAA7AluAAAACgpyAAAAFApuAAAAJQp7AAAAQQpuAAAAhQqiAAAA/gqnAAAAIgu1
AAIACgADAAIACwAFAAIADAAHAAEADQAHAAIADgAJAAEADwAJAAEAEQALAAIAEAALAAIAEgANAAEA
EwANAAEAFQAPAAIAFAAPAAEAFwARAAIAFgARAAIAGAATAAEAGQATAAEAGwAVAAIAGgAVAAIAHAAX
AAEAHQAXAAEAHwAZAAIAHgAZAAEAIQAbAAIAIAAbAAIAIgAdAAEAIwAdAAIAJAAfAAEAJQAfAAIA
JgAhAAEAJwAhAAEAKQAjAAIAKAAjAAEAKwAlAAIAKgAlAAIALAAnAAEALQAnAAEALwApAAIALgAp
AAIAMAArAAEAMQArAAEAMwAtAAIAMgAtAAEANQAvAAIANAAvAAIANgAxAAEANwAxAAIAOAAzAAEA
OQAzAAIAOgA1AAEAOwA1AAEAPQA3AAIAPAA3AAEAPwA5AAIAPgA5AAIAQAA7AAEAQQA7AAIAQgA9
AAEAQwA9AAIARAA/AAEARQA/AAEARwBBAAIARgBBAAEASQBDAAIASABDAAIASgBFAAEASwBFAAIA
TABHAAEATQBHAAIATgBJAAEATwBJAAIAUABLAAIAUQBNAAIAVwBPAAIAWABRAAEAWQBRAAIAWgBT
AASAAAABAAAA1x2YfQAAAAAAAAUNAAAMAAAAAAAAAAAAAAABALAAAAAAAAQAAAAAAAAAAAAAAAoA
CwEAAAAABAAAAAAAAAAAAAAACgAUAQAAAAAMAAAAAAAAAAAAAAABAFUBAAAAAAAAAAABAAAA1Q4A
AAAAADxNb2R1bGU+AFNDX2E2NTNlZDZiMjMyMzQ2ODk4NmNiNmI0OWFmOWQxY2YwLmRsbABVc2Vy
Q29tcG9uZW50AFNjcmlwdE1haW4ASW5wdXQwQnVmZmVyAENvbm5lY3Rpb25zAFZhcmlhYmxlcwBS
ZXNvdXJjZXMAU0NfYTY1M2VkNmIyMzIzNDY4OTg2Y2I2YjQ5YWY5ZDFjZjAuUHJvcGVydGllcwBT
ZXR0aW5ncwBNaWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AE1pY3Jvc29mdC5TcWxTZXJ2ZXIu
RHRzLlBpcGVsaW5lAFNjcmlwdENvbXBvbmVudABTY3JpcHRCdWZmZXIAbXNjb3JsaWIAU3lzdGVt
AE9iamVjdABTeXN0ZW0uQ29uZmlndXJhdGlvbgBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQAuY3Rv
cgBNaWNyb3NvZnQuU3FsU2VydmVyLlBpcGVsaW5lSG9zdABQaXBlbGluZUJ1ZmZlcgBPdXRwdXRO
YW1lTWFwAFByb2Nlc3NJbnB1dABJbnB1dDBfUHJvY2Vzc0lucHV0AElucHV0MF9Qcm9jZXNzSW5w
dXRSb3cAUHJlRXhlY3V0ZQBQb3N0RXhlY3V0ZQBnZXRfSUQAZ2V0X0lEX0lzTnVsbABnZXRfYWdl
bmN5AHNldF9hZ2VuY3kAZ2V0X2FnZW5jeV9Jc051bGwAc2V0X2FnZW5jeV9Jc051bGwAZ2V0X2Fz
c29jaWF0ZWRwcmltZXZlbmRvcgBzZXRfYXNzb2NpYXRlZHByaW1ldmVuZG9yAGdldF9hc3NvY2lh
dGVkcHJpbWV2ZW5kb3JfSXNOdWxsAHNldF9hc3NvY2lhdGVkcHJpbWV2ZW5kb3JfSXNOdWxsAGdl
dF9jYXBpdGFscHJvamVjdABzZXRfY2FwaXRhbHByb2plY3QAZ2V0X2NhcGl0YWxwcm9qZWN0X0lz
TnVsbABzZXRfY2FwaXRhbHByb2plY3RfSXNOdWxsAGdldF9jb250cmFjdGlkAHNldF9jb250cmFj
dGlkAGdldF9jb250cmFjdGlkX0lzTnVsbABzZXRfY29udHJhY3RpZF9Jc051bGwAZ2V0X2NvbnRy
YWN0cHVycG9zZQBzZXRfY29udHJhY3RwdXJwb3NlAGdldF9jb250cmFjdHB1cnBvc2VfSXNOdWxs
AHNldF9jb250cmFjdHB1cnBvc2VfSXNOdWxsAERlY2ltYWwAZ2V0X2NoZWNrYW1vdW50AHNldF9j
aGVja2Ftb3VudABnZXRfY2hlY2thbW91bnRfSXNOdWxsAHNldF9jaGVja2Ftb3VudF9Jc051bGwA
Z2V0X2RlcGFydG1lbnQAc2V0X2RlcGFydG1lbnQAZ2V0X2RlcGFydG1lbnRfSXNOdWxsAHNldF9k
ZXBhcnRtZW50X0lzTnVsbABnZXRfZG9jdW1lbnRpZABzZXRfZG9jdW1lbnRpZABnZXRfZG9jdW1l
bnRpZF9Jc051bGwAc2V0X2RvY3VtZW50aWRfSXNOdWxsAGdldF9leHBlbnNlY2F0ZWdvcnkAc2V0
X2V4cGVuc2VjYXRlZ29yeQBnZXRfZXhwZW5zZWNhdGVnb3J5X0lzTnVsbABzZXRfZXhwZW5zZWNh
dGVnb3J5X0lzTnVsbABnZXRfZmlzY2FseWVhcgBzZXRfZmlzY2FseWVhcgBnZXRfZmlzY2FseWVh
cl9Jc051bGwAc2V0X2Zpc2NhbHllYXJfSXNOdWxsAGdldF9pbmR1c3RyeQBzZXRfaW5kdXN0cnkA
Z2V0X2luZHVzdHJ5X0lzTnVsbABzZXRfaW5kdXN0cnlfSXNOdWxsAERhdGVUaW1lAGdldF9pc3N1
ZWRhdGUAc2V0X2lzc3VlZGF0ZQBnZXRfaXNzdWVkYXRlX0lzTnVsbABzZXRfaXNzdWVkYXRlX0lz
TnVsbABnZXRfbXdiZWNhdGVnb3J5AHNldF9td2JlY2F0ZWdvcnkAZ2V0X213YmVjYXRlZ29yeV9J
c051bGwAc2V0X213YmVjYXRlZ29yeV9Jc051bGwAZ2V0X3BheWVlbmFtZQBzZXRfcGF5ZWVuYW1l
AGdldF9wYXllZW5hbWVfSXNOdWxsAHNldF9wYXllZW5hbWVfSXNOdWxsAGdldF9zcGVuZGluZ2Nh
dGVnb3J5AHNldF9zcGVuZGluZ2NhdGVnb3J5AGdldF9zcGVuZGluZ2NhdGVnb3J5X0lzTnVsbABz
ZXRfc3BlbmRpbmdjYXRlZ29yeV9Jc051bGwAZ2V0X3N1YmNvbnRyYWN0cmVmZXJlbmNlaWQAc2V0
X3N1YmNvbnRyYWN0cmVmZXJlbmNlaWQAZ2V0X3N1YmNvbnRyYWN0cmVmZXJlbmNlaWRfSXNOdWxs
AHNldF9zdWJjb250cmFjdHJlZmVyZW5jZWlkX0lzTnVsbABnZXRfc3VidmVuZG9yAHNldF9zdWJ2
ZW5kb3IAZ2V0X3N1YnZlbmRvcl9Jc051bGwAc2V0X3N1YnZlbmRvcl9Jc051bGwAZ2V0X0xhc3RV
cGRhdGVkVGltZXN0YW1wRGVyaXZlZABnZXRfTGFzdFVwZGF0ZWRUaW1lc3RhbXBEZXJpdmVkX0lz
TnVsbABOZXh0Um93AEVuZE9mUm93c2V0AElEAElEX0lzTnVsbABhZ2VuY3kAYWdlbmN5X0lzTnVs
bABhc3NvY2lhdGVkcHJpbWV2ZW5kb3IAYXNzb2NpYXRlZHByaW1ldmVuZG9yX0lzTnVsbABjYXBp
dGFscHJvamVjdABjYXBpdGFscHJvamVjdF9Jc051bGwAY29udHJhY3RpZABjb250cmFjdGlkX0lz
TnVsbABjb250cmFjdHB1cnBvc2UAY29udHJhY3RwdXJwb3NlX0lzTnVsbABjaGVja2Ftb3VudABj
aGVja2Ftb3VudF9Jc051bGwAZGVwYXJ0bWVudABkZXBhcnRtZW50X0lzTnVsbABkb2N1bWVudGlk
AGRvY3VtZW50aWRfSXNOdWxsAGV4cGVuc2VjYXRlZ29yeQBleHBlbnNlY2F0ZWdvcnlfSXNOdWxs
AGZpc2NhbHllYXIAZmlzY2FseWVhcl9Jc051bGwAaW5kdXN0cnkAaW5kdXN0cnlfSXNOdWxsAGlz
c3VlZGF0ZQBpc3N1ZWRhdGVfSXNOdWxsAG13YmVjYXRlZ29yeQBtd2JlY2F0ZWdvcnlfSXNOdWxs
AHBheWVlbmFtZQBwYXllZW5hbWVfSXNOdWxsAHNwZW5kaW5nY2F0ZWdvcnkAc3BlbmRpbmdjYXRl
Z29yeV9Jc051bGwAc3ViY29udHJhY3RyZWZlcmVuY2VpZABzdWJjb250cmFjdHJlZmVyZW5jZWlk
X0lzTnVsbABzdWJ2ZW5kb3IAc3VidmVuZG9yX0lzTnVsbABMYXN0VXBkYXRlZFRpbWVzdGFtcERl
cml2ZWQATGFzdFVwZGF0ZWRUaW1lc3RhbXBEZXJpdmVkX0lzTnVsbABQYXJlbnRDb21wb25lbnQA
U3lzdGVtLlJlc291cmNlcwBSZXNvdXJjZU1hbmFnZXIAcmVzb3VyY2VNYW4AU3lzdGVtLkdsb2Jh
bGl6YXRpb24AQ3VsdHVyZUluZm8AcmVzb3VyY2VDdWx0dXJlAGdldF9SZXNvdXJjZU1hbmFnZXIA
Z2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAQ3VsdHVyZQBkZWZhdWx0SW5zdGFuY2UAZ2V0X0RlZmF1
bHQARGVmYXVsdABJbnB1dElEAElucHV0TmFtZQBCdWZmZXIAT3V0cHV0TWFwAFJvdwBCdWZmZXJD
b2x1bW5JbmRleGVzAHZhbHVlAENvbXBvbmVudABTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRh
cmdldEZyYW1ld29ya0F0dHJpYnV0ZQBTeXN0ZW0uUmVmbGVjdGlvbgBBc3NlbWJseVRpdGxlQXR0
cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9u
QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1
dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUA
QXNzZW1ibHlDdWx0dXJlQXR0cmlidXRlAEFzc2VtYmx5VmVyc2lvbkF0dHJpYnV0ZQBTeXN0ZW0u
UnVudGltZS5Db21waWxlclNlcnZpY2VzAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUA
UnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAU0NfYTY1M2VkNmIyMzIzNDY4OTg2Y2I2YjQ5
YWY5ZDFjZjAAU3RyaW5nAFN0cmluZ0NvbXBhcmlzb24ARXF1YWxzAEdldENvbHVtbkluZGV4ZXMA
U1NJU1NjcmlwdENvbXBvbmVudEVudHJ5UG9pbnRBdHRyaWJ1dGUAb3BfRXF1YWxpdHkARXhjZXB0
aW9uAEdldEludDMyAElzTnVsbABHZXRTdHJpbmcAc2V0X0l0ZW0AU2V0TnVsbABJbnZhbGlkT3Bl
cmF0aW9uRXhjZXB0aW9uAEdldERlY2ltYWwASW50MzIAR2V0RGF0ZQBHZXREYXRlVGltZQBTeXN0
ZW0uRGlhZ25vc3RpY3MARGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBUeXBlAFJ1bnRpbWVU
eXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEFzc2VtYmx5AGdldF9Bc3NlbWJseQBTeXN0ZW0u
Q29tcG9uZW50TW9kZWwARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZVN0
YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAC5jY3RvcgBTQ19hNjUzZWQ2YjIzMjM0Njg5
ODZjYjZiNDlhZjlkMWNmMC5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMAAA9JAG4AcAB1
AHQAIAAwAAADLQABC0UAUgBSAE8AUgAAgJtJAHMATgB1AGwAbAAgAHAAcgBvAHAAZQByAHQAeQAg
AGMAYQBuAG4AbwB0ACAAYgBlACAAcwBlAHQAIAB0AG8AIABGAGEAbABzAGUALgAgAEEAcwBzAGkA
ZwBuACAAYQAgAHYAYQBsAHUAZQAgAHQAbwAgAHQAaABlACAAYwBvAGwAdQBtAG4AIABpAG4AcwB0
AGUAYQBkAC4AAHFTAEMAXwBhADYANQAzAGUAZAA2AGIAMgAzADIAMwA0ADYAOAA5ADgANgBjAGIA
NgBiADQAOQBhAGYAOQBkADEAYwBmADAALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1
AHIAYwBlAHMAAMBucQUHqMtGs2/sdkKu0sMACImEXc2AgMyRCLd6XFYZNOCJAwYSFAMGEhgDIAAB
CSAEAQgOEhUSGQUgAQESEAkgAwESFR0IEhkDIAAIAyAAAgMgAA4EIAEBDgQgAQECBCAAER0FIAEB
ER0EIAEBCAQgABEhBSABAREhAygACAMoAAIDKAAOBCgAER0EKAARIQMGEgUFIAEBEgUDBhIlAwYS
KQQAABIlBAAAEikFAAEBEikECAASJQQIABIpAwYSIAQAABIgBAgAEiAGIAICDhFhBSABHQgIBAEA
AAAFAAICDg4DBhIVAwYdCAQgAQgIBCABAggEIAEOCAUgAgEIHAUgAREdCAUgAREhCAYAARJ5EX0F
IAASgIEHIAIBDhKAgQQHARIlBiABARGAiQgBAAIAAAAAAAMAAAFHAQAaLk5FVEZyYW1ld29yayxW
ZXJzaW9uPXY0LjABAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEC5ORVQgRnJhbWV3b3JrIDQoAQAj
U0NfYTY1M2VkNmIyMzIzNDY4OTg2Y2I2YjQ5YWY5ZDFjZjAAAAUBAAAAABYBABFDb3B5cmlnaHQg
QCAgMjAyMAAACAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQCoSAAAAAAA
AAAAAAC+SAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsEgAAAAAAAAAAF9Db3JEbGxNYWluAG1z
Y29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgA
AIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYYAAAsAMA
AAAAAAAAAAAAsAM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEA
AAABAJh91x0AAAEAmH3XHT8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBG
AGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBBAD
AAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAOwCAAABADAAMAAwADAAMAA0AGIAMAAA
AHAAJAABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAEMAXwBhADYANQAzAGUA
ZAA2AGIAMgAzADIAMwA0ADYAOAA5ADgANgBjAGIANgBiADQAOQBhAGYAOQBkADEAYwBmADAAAABA
AA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAwAC4ANwA2ADMAOQAuADMAMgAxADUA
MgAAAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAEMAXwBhADYANQAzAGUAZAA2
AGIAMgAzADIAMwA0ADYAOAA5ADgANgBjAGIANgBiADQAOQBhAGYAOQBkADEAYwBmADAALgBkAGwA
bAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0
ACAAQAAgACAAMgAwADIAMAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUA
AABTAEMAXwBhADYANQAzAGUAZAA2AGIAMgAzADIAMwA0ADYAOAA5ADgANgBjAGIANgBiADQAOQBh
AGYAOQBkADEAYwBmADAALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAA
UwBDAF8AYQA2ADUAMwBlAGQANgBiADIAMwAyADMANAA2ADgAOQA4ADYAYwBiADYAYgA0ADkAYQBm
ADkAZAAxAGMAZgAwAAAARAAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAA
LgA3ADYAMwA5AC4AMwAyADEANQAyAAAAAABIAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBz
AGkAbwBuAAAAMQAuADAALgA3ADYAMwA5AC4AMwAyADEANQAyAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADAAAANA4AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_a653ed6b2323468986cb6b49af9d1cf0</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum"
                  typeConverter="NOTBROWSABLE">2264196935258230a1a5b559956eb652</property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataShaChecksum"
                  typeConverter="NOTBROWSABLE">0486ef88fa2b80afa8dc2f6a8a031e84b5c8f3e8</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0]"
                  hasSideEffects="true"
                  name="Input 0">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[ID]"
                      cachedDataType="i4"
                      cachedName="ID"
                      cachedSortKeyPosition="1"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[ID]" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[agency]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="agency"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[agency]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[associated_prime_vendor]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="associated_prime_vendor"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[associated_prime_vendor]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[capital_project]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="capital_project"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[capital_project]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[contract_id]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="contract_id"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[contract_id]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[contract_purpose]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="contract_purpose"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[contract_purpose]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[check_amount]"
                      cachedDataType="cy"
                      cachedName="check_amount"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[check_amount]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[department]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="department"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[department]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[document_id]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="document_id"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[document_id]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[expense_category]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expense_category"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[expense_category]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[fiscal_year]"
                      cachedDataType="i4"
                      cachedName="fiscal_year"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[fiscal_year]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[industry]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="industry"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[industry]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[issue_date]"
                      cachedDataType="dbDate"
                      cachedName="issue_date"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[issue_date]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[mwbe_category]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="mwbe_category"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[mwbe_category]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[payee_name]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="payee_name"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[payee_name]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[spending_category]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="spending_category"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[spending_category]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[sub_contract_reference_id]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_contract_reference_id"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[sub_contract_reference_id]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[sub_vendor]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="sub_vendor"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[sub_vendor]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[LastUpdatedTimestamp_Derived]"
                      cachedDataType="dbTimeStamp"
                      cachedName="LastUpdatedTimestamp_Derived"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime for Final Spending table.Outputs[Derived Column Output].Columns[LastUpdatedTimestamp_Derived]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Outputs[Output 0]"
                  name="Output 0"
                  synchronousInputId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0]">
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC"
              componentClassID="Microsoft.OLEDBSource"
              contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
              description="OLE DB Source"
              name="Staging - Spending_Staging Sorted ASC"
              usesDispositions="true"
              version="7">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[dbo].[Spending_Staging]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">SELECT
       [ID]
      ,[agency]
      ,[associated_prime_vendor]
      ,[capital_project]
      ,[contract_id]
      ,[contract_purpose]
      ,[check_amount]
      ,[department]
      ,[document_id]
      ,[expense_category]
      ,[fiscal_year]
      ,[industry]
      ,[issue_date]
      ,[mwbe_category]
      ,[payee_name]
      ,[spending_category]
      ,[sub_contract_reference_id]
      ,[sub_vendor]
  FROM [dbo].[Spending_Staging]
ORDER BY
     [ID] ASC</property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">2</property>
                <property
                  dataType="System.String"
                  description="The mappings between the parameters in the SQL command and variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  connectionManagerRefId="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output]"
                  isSorted="true"
                  name="OLE DB Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[ID]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[ID]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[ID]"
                      name="ID"
                      sortKeyPosition="1"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[agency]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[agency]"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[agency]"
                      name="agency"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[associated_prime_vendor]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[associated_prime_vendor]"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[associated_prime_vendor]"
                      name="associated_prime_vendor"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[capital_project]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[capital_project]"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[capital_project]"
                      name="capital_project"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[contract_id]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[contract_id]"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[contract_id]"
                      name="contract_id"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[contract_purpose]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[contract_purpose]"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[contract_purpose]"
                      name="contract_purpose"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[check_amount]"
                      dataType="cy"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[check_amount]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[check_amount]"
                      name="check_amount"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[department]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[department]"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[department]"
                      name="department"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[document_id]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[document_id]"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[document_id]"
                      name="document_id"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[expense_category]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[expense_category]"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[expense_category]"
                      name="expense_category"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[fiscal_year]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[fiscal_year]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[fiscal_year]"
                      name="fiscal_year"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[industry]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[industry]"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[industry]"
                      name="industry"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[issue_date]"
                      dataType="dbDate"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[issue_date]"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[issue_date]"
                      name="issue_date"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[mwbe_category]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[mwbe_category]"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[mwbe_category]"
                      name="mwbe_category"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[payee_name]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[payee_name]"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[payee_name]"
                      name="payee_name"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[spending_category]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[spending_category]"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[spending_category]"
                      name="spending_category"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[sub_contract_reference_id]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[sub_contract_reference_id]"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[sub_contract_reference_id]"
                      name="sub_contract_reference_id"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[sub_vendor]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[sub_vendor]"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].Columns[sub_vendor]"
                      name="sub_vendor"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[ID]"
                      dataType="i4"
                      name="ID" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[agency]"
                      dataType="wstr"
                      length="255"
                      name="agency" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[associated_prime_vendor]"
                      dataType="wstr"
                      length="255"
                      name="associated_prime_vendor" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[capital_project]"
                      dataType="wstr"
                      length="255"
                      name="capital_project" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[contract_id]"
                      dataType="wstr"
                      length="255"
                      name="contract_id" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[contract_purpose]"
                      dataType="wstr"
                      length="255"
                      name="contract_purpose" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[check_amount]"
                      dataType="cy"
                      name="check_amount" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[department]"
                      dataType="wstr"
                      length="255"
                      name="department" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[document_id]"
                      dataType="wstr"
                      length="255"
                      name="document_id" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[expense_category]"
                      dataType="wstr"
                      length="255"
                      name="expense_category" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[fiscal_year]"
                      dataType="i4"
                      name="fiscal_year" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[industry]"
                      dataType="wstr"
                      length="255"
                      name="industry" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[issue_date]"
                      dataType="dbDate"
                      name="issue_date" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[mwbe_category]"
                      dataType="wstr"
                      length="255"
                      name="mwbe_category" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[payee_name]"
                      dataType="wstr"
                      length="255"
                      name="payee_name" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[spending_category]"
                      dataType="wstr"
                      length="255"
                      name="spending_category" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[sub_contract_reference_id]"
                      dataType="wstr"
                      length="255"
                      name="sub_contract_reference_id" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output].ExternalColumns[sub_vendor]"
                      dataType="wstr"
                      length="255"
                      name="sub_vendor" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output]"
                  isErrorOut="true"
                  name="OLE DB Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[ID]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[ID]"
                      name="ID" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[agency]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[agency]"
                      name="agency" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[associated_prime_vendor]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[associated_prime_vendor]"
                      name="associated_prime_vendor" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[capital_project]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[capital_project]"
                      name="capital_project" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[contract_id]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[contract_id]"
                      name="contract_id" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[contract_purpose]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[contract_purpose]"
                      name="contract_purpose" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[check_amount]"
                      dataType="cy"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[check_amount]"
                      name="check_amount" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[department]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[department]"
                      name="department" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[document_id]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[document_id]"
                      name="document_id" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[expense_category]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[expense_category]"
                      name="expense_category" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[fiscal_year]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[fiscal_year]"
                      name="fiscal_year" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[industry]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[industry]"
                      name="industry" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[issue_date]"
                      dataType="dbDate"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[issue_date]"
                      name="issue_date" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[mwbe_category]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[mwbe_category]"
                      name="mwbe_category" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[payee_name]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[payee_name]"
                      name="payee_name" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[spending_category]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[spending_category]"
                      name="spending_category" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[sub_contract_reference_id]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[sub_contract_reference_id]"
                      name="sub_contract_reference_id" />
                    <outputColumn
                      refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[sub_vendor]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Error Output].Columns[sub_vendor]"
                      name="sub_vendor" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final.Paths[Data Conversion Output]"
              endId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000.Inputs[OLE DB Destination Input]"
              name="Data Conversion Output"
              startId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Outputs[Data Conversion Output]" />
            <path
              refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final.Paths[Derived Column Output]"
              endId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0]"
              name="Derived Column Output"
              startId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime for Final Spending table.Outputs[Derived Column Output]" />
            <path
              refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final.Paths[OLE DB Source Output]"
              endId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime for Final Spending table.Inputs[Derived Column Input]"
              name="OLE DB Source Output"
              startId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC.Outputs[OLE DB Source Output]" />
            <path
              refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final.Paths[Output 0]"
              endId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Inputs[Input 0]"
              name="Output 0"
              startId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Outputs[Output 0]" />
            <path
              refId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final.Paths[Output 01]"
              endId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion.Inputs[Data Conversion Input]"
              name="Output 0"
              startId="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table.Outputs[Output 0]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Truncate Final Table - Spending"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{CCD57CCD-4989-4B6B-A018-055FC6FACBBB}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Truncate Final Table - Spending"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FCA46042-184A-4048-B9D6-000F61268699}"
          SQLTask:SqlStatementSource="TRUNCATE TABLE Spending" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{794F9005-82AB-4318-9F10-5EBCEC74D0C1}"
      DTS:From="Package\Truncate Final Table - Spending"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="531,42"
          Id="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final"
          TopLeft="359,470" />
        <NodeLayout
          Size="229,42"
          Id="Package\Truncate Final Table - Spending"
          TopLeft="516,360" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="627.5,402">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,68"
              Start="0,0"
              End="0,60.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,60.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="309,42"
          Id="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime for Final Spending table"
          TopLeft="260,363" />
        <NodeLayout
          Size="266,42"
          Id="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC"
          TopLeft="281.5,246.5" />
        <NodeLayout
          Size="156,42"
          Id="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Data Conversion"
          TopLeft="336,621" />
        <NodeLayout
          Size="504,42"
          Id="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Derive Code, Dept, Registration, ProjectAgency, CapProj, and Occ for Final Spending table"
          TopLeft="164.5,550.5" />
        <NodeLayout
          Size="311,42"
          Id="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000"
          TopLeft="261,716" />
        <NodeLayout
          Size="273,42"
          Id="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL"
          TopLeft="279.5,453.5" />
        <EdgeLayout
          Id="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final.Paths[Output 01]"
          TopLeft="415.25,592.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,28.5"
              Start="0,0"
              End="0,21">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,21" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final.Paths[Output 0]"
          TopLeft="416.25,495.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,55"
              Start="0,0"
              End="0,47.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,47.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final.Paths[OLE DB Source Output]"
          TopLeft="414.5,288.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,74.5"
              Start="0,0"
              End="0,67">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,67" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final.Paths[Derived Column Output]"
          TopLeft="415.25,405">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,48.5"
              Start="0,0"
              End="0,41">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,41" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final.Paths[Data Conversion Output]"
          TopLeft="415.25,663">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,53"
              Start="0,0"
              End="0,45.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,45.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Spending) - Batch 100,000">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Staging To Final - Spending - Convert Staging to appropriate data types and then Insert to Final\Staging - Spending_Staging Sorted ASC">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>