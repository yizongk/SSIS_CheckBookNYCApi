<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="6/10/2020 5:11:34 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DOT-JCKWHB2"
  DTS:CreatorName="DOT\ykuang"
  DTS:DTSID="{6B353E58-A202-4BC2-B46F-93CD68600CF1}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="12.0.5626.31"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="148"
  DTS:VersionGUID="{2C2C92BD-7D3E-4D7D-94F6-F00BD15AD386}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{FCA46042-184A-4048-B9D6-000F61268699}"
      DTS:ObjectName="DOTDEV55SQLEE03.CheckBookNYC">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=DOTDEV55SQLEE03;Initial Catalog=CheckBookNYC;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{652B05F1-3B36-4A09-AB11-B782E1E9C30D}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC"
              componentClassID="Microsoft.Sort"
              contactInfo="Sort;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Sorts input data in ascending or descending order when it cannot be sorted at its source. For example, sort sales data by 'customer id' before it is written to a flat file and delivered to another department. Note: We do not recommend this transformation for large data flows."
              name="Budget - Sort StagingID ASC"
              version="1">
              <properties>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the Sort transformation removes rows with duplicate sort values."
                  name="EliminateDuplicates">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the maximum number of threads to use for sorting."
                  expressionType="Notify"
                  name="MaximumThreads">-1</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Inputs[Sort Input]"
                  name="Sort Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Inputs[Sort Input].Columns[StagingID_FINAL]"
                      cachedDataType="i4"
                      cachedName="StagingID_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[StagingID_FINAL]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">1</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Inputs[Sort Input].Columns[agency_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="agency_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[agency_FINAL]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Inputs[Sort Input].Columns[year_FINAL]"
                      cachedDataType="i4"
                      cachedName="year_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[year_FINAL]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Inputs[Sort Input].Columns[department_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="department_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[department_FINAL]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Inputs[Sort Input].Columns[expense_category_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expense_category_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[expense_category_FINAL]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Inputs[Sort Input].Columns[budget_code_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_code_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[budget_code_FINAL]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Inputs[Sort Input].Columns[budget_name_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_name_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[budget_name_FINAL]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Inputs[Sort Input].Columns[budget_amounts_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_amounts_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[budget_amounts_FINAL]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Inputs[Sort Input].Columns[expenditure_amounts_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expenditure_amounts_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[expenditure_amounts_FINAL]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output]"
                  isSorted="true"
                  name="Sort Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[StagingID_FINAL]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[StagingID_FINAL]"
                      name="StagingID_FINAL"
                      sortKeyPosition="1">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[StagingID_FINAL]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[agency_FINAL]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[agency_FINAL]"
                      name="agency_FINAL">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[agency_FINAL]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[year_FINAL]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[year_FINAL]"
                      name="year_FINAL">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[year_FINAL]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[department_FINAL]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[department_FINAL]"
                      name="department_FINAL">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[department_FINAL]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[expense_category_FINAL]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[expense_category_FINAL]"
                      name="expense_category_FINAL">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[expense_category_FINAL]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[budget_code_FINAL]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[budget_code_FINAL]"
                      name="budget_code_FINAL">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[budget_code_FINAL]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[budget_name_FINAL]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[budget_name_FINAL]"
                      name="budget_name_FINAL">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[budget_name_FINAL]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[budget_amounts_FINAL]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[budget_amounts_FINAL]"
                      name="budget_amounts_FINAL">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[budget_amounts_FINAL]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[expenditure_amounts_FINAL]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[expenditure_amounts_FINAL]"
                      name="expenditure_amounts_FINAL">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[expenditure_amounts_FINAL]}</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC"
              componentClassID="Microsoft.Sort"
              contactInfo="Sort;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Sorts input data in ascending or descending order when it cannot be sorted at its source. For example, sort sales data by 'customer id' before it is written to a flat file and delivered to another department. Note: We do not recommend this transformation for large data flows."
              name="Budget_Staging - Sort ID ASC"
              version="1">
              <properties>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the Sort transformation removes rows with duplicate sort values."
                  name="EliminateDuplicates">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the maximum number of threads to use for sorting."
                  expressionType="Notify"
                  name="MaximumThreads">-1</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Inputs[Sort Input]"
                  name="Sort Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Inputs[Sort Input].Columns[ID_STAGING]"
                      cachedDataType="i4"
                      cachedName="ID_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[ID_STAGING]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">1</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Inputs[Sort Input].Columns[agency_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="agency_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[agency_STAGING]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Inputs[Sort Input].Columns[year_STAGING]"
                      cachedDataType="i4"
                      cachedName="year_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[year_STAGING]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Inputs[Sort Input].Columns[department_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="department_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[department_STAGING]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Inputs[Sort Input].Columns[expense_category_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expense_category_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[expense_category_STAGING]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Inputs[Sort Input].Columns[budget_code_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_code_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_code_STAGING]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Inputs[Sort Input].Columns[budget_name_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_name_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_name_STAGING]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Inputs[Sort Input].Columns[budget_amounts_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_amounts_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_amounts_STAGING]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Inputs[Sort Input].Columns[expenditure_amounts_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expenditure_amounts_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[expenditure_amounts_STAGING]">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Specifies the comparison options for character data."
                          name="NewComparisonFlags">0</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the sort order of the column."
                          name="NewSortKeyPosition">0</property>
                      </properties>
                    </inputColumn>
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output]"
                  isSorted="true"
                  name="Sort Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[ID_STAGING]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[ID_STAGING]"
                      name="ID_STAGING"
                      sortKeyPosition="1">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[ID_STAGING]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[agency_STAGING]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[agency_STAGING]"
                      name="agency_STAGING">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[agency_STAGING]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[year_STAGING]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[year_STAGING]"
                      name="year_STAGING">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[year_STAGING]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[department_STAGING]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[department_STAGING]"
                      name="department_STAGING">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[department_STAGING]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[expense_category_STAGING]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[expense_category_STAGING]"
                      name="expense_category_STAGING">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[expense_category_STAGING]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[budget_code_STAGING]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[budget_code_STAGING]"
                      name="budget_code_STAGING">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_code_STAGING]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[budget_name_STAGING]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[budget_name_STAGING]"
                      name="budget_name_STAGING">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_name_STAGING]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[budget_amounts_STAGING]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[budget_amounts_STAGING]"
                      name="budget_amounts_STAGING">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_amounts_STAGING]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[expenditure_amounts_STAGING]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[expenditure_amounts_STAGING]"
                      name="expenditure_amounts_STAGING">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="Specifies the lineage identifier of the input column that is associated with this output column."
                          name="SortColumnId">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[expenditure_amounts_STAGING]}</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split"
              componentClassID="Microsoft.ConditionalSplit"
              contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
              name="Conditional Split"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split.Inputs[Conditional Split Input]"
                  description="Input to the Conditional Split Transformation"
                  name="Conditional Split Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split.Inputs[Conditional Split Input].Columns[ID_STAGING]"
                      cachedDataType="i4"
                      cachedName="ID_STAGING"
                      cachedSortKeyPosition="1"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[ID_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split.Inputs[Conditional Split Input].Columns[StagingID_FINAL]"
                      cachedDataType="i4"
                      cachedName="StagingID_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[StagingID_FINAL]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split.Outputs[Update(ID Match)]"
                  description="Output 1 of the Conditional Split Transformation"
                  errorOrTruncationOperation="Computation"
                  errorRowDisposition="FailComponent"
                  exclusionGroup="1"
                  name="Update(ID Match)"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split.Inputs[Conditional Split Input]"
                  truncationRowDisposition="FailComponent">
                  <properties>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                      name="Expression">![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[ID_STAGING]}) &amp;&amp; ![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[StagingID_FINAL]})</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the friendly version of the expression. This expression version uses column names."
                      expressionType="Notify"
                      name="FriendlyExpression">!ISNULL(ID_STAGING) &amp;&amp; !ISNULL(StagingID_FINAL)</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                      name="EvaluationOrder">0</property>
                  </properties>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split.Outputs[Insert(ID_STAGING not Match any in StagingID_FINAL)]"
                  description="Output 2 of the Conditional Split Transformation"
                  errorOrTruncationOperation="Computation"
                  errorRowDisposition="FailComponent"
                  exclusionGroup="1"
                  name="Insert(ID_STAGING not Match any in StagingID_FINAL)"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split.Inputs[Conditional Split Input]"
                  truncationRowDisposition="FailComponent">
                  <properties>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                      name="Expression">![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[ID_STAGING]}) &amp;&amp; [ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[StagingID_FINAL]})</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the friendly version of the expression. This expression version uses column names."
                      expressionType="Notify"
                      name="FriendlyExpression">!ISNULL(ID_STAGING) &amp;&amp; ISNULL(StagingID_FINAL)</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                      name="EvaluationOrder">1</property>
                  </properties>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split.Outputs[Delete(StagingID_FINAL not Match any in ID_STAGING)]"
                  description="Output 3 of the Conditional Split Transformation"
                  errorOrTruncationOperation="Computation"
                  errorRowDisposition="FailComponent"
                  exclusionGroup="1"
                  name="Delete(StagingID_FINAL not Match any in ID_STAGING)"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split.Inputs[Conditional Split Input]"
                  truncationRowDisposition="FailComponent">
                  <properties>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                      name="Expression">[ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[ID_STAGING]}) &amp;&amp; ![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[StagingID_FINAL]})</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the friendly version of the expression. This expression version uses column names."
                      expressionType="Notify"
                      name="FriendlyExpression">ISNULL(ID_STAGING) &amp;&amp; !ISNULL(StagingID_FINAL)</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                      name="EvaluationOrder">2</property>
                  </properties>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split.Outputs[Conditional Split Default Output]"
                  description="Default Output of the Conditional Split Transformation"
                  exclusionGroup="1"
                  name="Conditional Split Default Output"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split.Inputs[Conditional Split Input]">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      name="IsDefaultOut">true</property>
                  </properties>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split.Outputs[Conditional Split Error Output]"
                  description="Error Output of the Conditional Split Transformation"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Conditional Split Error Output"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split.Inputs[Conditional Split Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Data Conversion - NOT IN USER AT THE MOMENT"
              componentClassID="Microsoft.DataConvert"
              contactInfo="Data Conversion;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Data Conversion"
              name="Data Conversion - NOT IN USER AT THE MOMENT"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Data Conversion - NOT IN USER AT THE MOMENT.Inputs[Data Conversion Input]"
                  name="Data Conversion Input">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Data Conversion - NOT IN USER AT THE MOMENT.Outputs[Data Conversion Output]"
                  exclusionGroup="1"
                  name="Data Conversion Output"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Data Conversion - NOT IN USER AT THE MOMENT.Inputs[Data Conversion Input]">
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Data Conversion - NOT IN USER AT THE MOMENT.Outputs[Data Conversion Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Data Conversion Error Output"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Data Conversion - NOT IN USER AT THE MOMENT.Inputs[Data Conversion Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Data Conversion - NOT IN USER AT THE MOMENT.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Data Conversion - NOT IN USER AT THE MOMENT.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Data Conversion - NOT IN USER AT THE MOMENT.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Data Conversion - NOT IN USER AT THE MOMENT.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Delete records (Final - Budget)"
              componentClassID="Microsoft.OLEDBCommand"
              contactInfo="OLE DB Command;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;2"
              description="Runs an SQL statement for each row in a data flow. For example, call a 'new employee setup' stored procedure for each row in the 'new employees' table. Note: running an SQL statement for each row of a large data flow may take a long time."
              name="Delete records (Final - Budget)"
              usesDispositions="true"
              version="2">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  expressionType="Notify"
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">DELETE FROM dbo.Budget
WHERE dbo.Budget.[StagingID] = ?</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Delete records (Final - Budget).Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  connectionManagerRefId="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Delete records (Final - Budget).Inputs[OLE DB Command Input]"
                  errorOrTruncationOperation="Command Execution"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Command Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Delete records (Final - Budget).Inputs[OLE DB Command Input].Columns[StagingID_FINAL]"
                      cachedDataType="i4"
                      cachedName="StagingID_FINAL"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Delete records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_0]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[StagingID_FINAL]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Delete records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_0]"
                      dataType="i4"
                      name="Param_0">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                          name="DBParamInfoFlags">81</property>
                      </properties>
                    </externalMetadataColumn>
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Delete records (Final - Budget).Outputs[OLE DB Command Output]"
                  exclusionGroup="1"
                  name="OLE DB Command Output"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Delete records (Final - Budget).Inputs[OLE DB Command Input]">
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Delete records (Final - Budget).Outputs[OLE DB Command Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Command Error Output"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Delete records (Final - Budget).Inputs[OLE DB Command Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Delete records (Final - Budget).Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Delete records (Final - Budget).Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Delete records (Final - Budget).Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Delete records (Final - Budget).Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Derive Current Datetime for Final Budget table"
              componentClassID="Microsoft.DerivedColumn"
              contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
              name="Derive Current Datetime for Final Budget table"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Derive Current Datetime for Final Budget table.Inputs[Derived Column Input]"
                  description="Input to the Derived Column Transformation"
                  name="Derived Column Input">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Derive Current Datetime for Final Budget table.Outputs[Derived Column Output]"
                  description="Default Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  name="Derived Column Output"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Derive Current Datetime for Final Budget table.Inputs[Derived Column Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Derive Current Datetime for Final Budget table.Outputs[Derived Column Output].Columns[LastUpdatedTimestamp_Derived]"
                      dataType="dbTimeStamp"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Derive Current Datetime for Final Budget table.Outputs[Derived Column Output].Columns[LastUpdatedTimestamp_Derived]"
                      name="LastUpdatedTimestamp_Derived"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Derived Column Expression"
                          name="Expression">[GETDATE]()</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Derived Column Friendly Expression"
                          expressionType="Notify"
                          name="FriendlyExpression">GETDATE()</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Derive Current Datetime for Final Budget table.Outputs[Derived Column Error Output]"
                  description="Error Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Derived Column Error Output"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Derive Current Datetime for Final Budget table.Inputs[Derived Column Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Derive Current Datetime for Final Budget table.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Derive Current Datetime for Final Budget table.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Derive Current Datetime for Final Budget table.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Derive Current Datetime for Final Budget table.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget"
              componentClassID="Microsoft.OLEDBSource"
              contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
              description="OLE DB Source"
              name="Final - Budget"
              usesDispositions="true"
              version="7">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[dbo].[Budget]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">0</property>
                <property
                  dataType="System.String"
                  description="The mappings between the parameters in the SQL command and variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  connectionManagerRefId="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output]"
                  name="OLE DB Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[StagingID_FINAL]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].ExternalColumns[StagingID]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[StagingID_FINAL]"
                      name="StagingID_FINAL"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[agency_FINAL]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].ExternalColumns[agency]"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[agency_FINAL]"
                      name="agency_FINAL"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[year_FINAL]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].ExternalColumns[year]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[year_FINAL]"
                      name="year_FINAL"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[department_FINAL]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].ExternalColumns[department]"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[department_FINAL]"
                      name="department_FINAL"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[expense_category_FINAL]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].ExternalColumns[expense_category]"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[expense_category_FINAL]"
                      name="expense_category_FINAL"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[budget_code_FINAL]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].ExternalColumns[budget_code]"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[budget_code_FINAL]"
                      name="budget_code_FINAL"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[budget_name_FINAL]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].ExternalColumns[budget_name]"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[budget_name_FINAL]"
                      name="budget_name_FINAL"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[budget_amounts_FINAL]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].ExternalColumns[budget_amounts]"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[budget_amounts_FINAL]"
                      name="budget_amounts_FINAL"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[expenditure_amounts_FINAL]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].ExternalColumns[expenditure_amounts]"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].Columns[expenditure_amounts_FINAL]"
                      name="expenditure_amounts_FINAL"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].ExternalColumns[ID]"
                      dataType="i4"
                      name="ID" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].ExternalColumns[StagingID]"
                      dataType="i4"
                      name="StagingID" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].ExternalColumns[LastUpdatedTimestamp]"
                      dataType="dbTimeStamp"
                      name="LastUpdatedTimestamp" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].ExternalColumns[agency]"
                      dataType="wstr"
                      length="255"
                      name="agency" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].ExternalColumns[year]"
                      dataType="i4"
                      name="year" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].ExternalColumns[department]"
                      dataType="wstr"
                      length="255"
                      name="department" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].ExternalColumns[expense_category]"
                      dataType="wstr"
                      length="255"
                      name="expense_category" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].ExternalColumns[budget_code]"
                      dataType="wstr"
                      length="255"
                      name="budget_code" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].ExternalColumns[budget_name]"
                      dataType="wstr"
                      length="255"
                      name="budget_name" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].ExternalColumns[budget_amounts]"
                      dataType="wstr"
                      length="255"
                      name="budget_amounts" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output].ExternalColumns[expenditure_amounts]"
                      dataType="wstr"
                      length="255"
                      name="expenditure_amounts" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output]"
                  isErrorOut="true"
                  name="OLE DB Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[StagingID]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[StagingID]"
                      name="StagingID" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[agency]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[agency]"
                      name="agency" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[year]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[year]"
                      name="year" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[department]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[department]"
                      name="department" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[expense_category]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[expense_category]"
                      name="expense_category" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[budget_code]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[budget_code]"
                      name="budget_code" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[budget_name]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[budget_name]"
                      name="budget_name" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[budget_amounts]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[budget_amounts]"
                      name="budget_amounts" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[expenditure_amounts]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[expenditure_amounts]"
                      name="expenditure_amounts" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record"
              componentClassID="Microsoft.ConditionalSplit"
              contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
              name="Find Update-able record"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Inputs[Conditional Split Input]"
                  description="Input to the Conditional Split Transformation"
                  name="Conditional Split Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Inputs[Conditional Split Input].Columns[agency_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="agency_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[agency_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Inputs[Conditional Split Input].Columns[year_STAGING]"
                      cachedDataType="i4"
                      cachedName="year_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[year_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Inputs[Conditional Split Input].Columns[department_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="department_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[department_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Inputs[Conditional Split Input].Columns[expense_category_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expense_category_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expense_category_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Inputs[Conditional Split Input].Columns[budget_code_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_code_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_code_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Inputs[Conditional Split Input].Columns[budget_name_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_name_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_name_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Inputs[Conditional Split Input].Columns[budget_amounts_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_amounts_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_amounts_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Inputs[Conditional Split Input].Columns[expenditure_amounts_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expenditure_amounts_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expenditure_amounts_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Inputs[Conditional Split Input].Columns[agency_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="agency_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[agency_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Inputs[Conditional Split Input].Columns[year_FINAL]"
                      cachedDataType="i4"
                      cachedName="year_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[year_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Inputs[Conditional Split Input].Columns[department_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="department_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[department_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Inputs[Conditional Split Input].Columns[expense_category_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expense_category_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expense_category_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Inputs[Conditional Split Input].Columns[budget_code_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_code_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_code_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Inputs[Conditional Split Input].Columns[budget_name_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_name_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_name_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Inputs[Conditional Split Input].Columns[budget_amounts_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_amounts_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_amounts_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Inputs[Conditional Split Input].Columns[expenditure_amounts_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expenditure_amounts_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expenditure_amounts_FINAL]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Outputs[Update-able Records]"
                  description="Output 1 of the Conditional Split Transformation"
                  errorOrTruncationOperation="Computation"
                  errorRowDisposition="FailComponent"
                  exclusionGroup="1"
                  name="Update-able Records"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Inputs[Conditional Split Input]"
                  truncationRowDisposition="FailComponent">
                  <properties>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                      name="Expression">(![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[agency_FINAL]}) &amp;&amp; [ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[agency_STAGING]})) || ([ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[agency_FINAL]}) &amp;&amp; ![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[agency_STAGING]})) || (![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[agency_FINAL]}) &amp;&amp; ![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[agency_STAGING]}) &amp;&amp; (#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[agency_FINAL]} != #{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[agency_STAGING]})) || (![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[year_FINAL]}) &amp;&amp; [ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[year_STAGING]})) || ([ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[year_FINAL]}) &amp;&amp; ![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[year_STAGING]})) || (![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[year_FINAL]}) &amp;&amp; ![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[year_STAGING]}) &amp;&amp; (#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[year_FINAL]} != #{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[year_STAGING]})) || (![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[department_FINAL]}) &amp;&amp; [ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[department_STAGING]})) || ([ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[department_FINAL]}) &amp;&amp; ![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[department_STAGING]})) || (![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[department_FINAL]}) &amp;&amp; ![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[department_STAGING]}) &amp;&amp; (#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[department_FINAL]} != #{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[department_STAGING]})) || (![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expense_category_FINAL]}) &amp;&amp; [ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expense_category_STAGING]})) || ([ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expense_category_FINAL]}) &amp;&amp; ![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expense_category_STAGING]})) || (![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expense_category_FINAL]}) &amp;&amp; ![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expense_category_STAGING]}) &amp;&amp; (#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expense_category_FINAL]} != #{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expense_category_STAGING]})) || (![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_code_FINAL]}) &amp;&amp; [ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_code_STAGING]})) || ([ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_code_FINAL]}) &amp;&amp; ![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_code_STAGING]})) || (![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_code_FINAL]}) &amp;&amp; ![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_code_STAGING]}) &amp;&amp; (#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_code_FINAL]} != #{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_code_STAGING]})) || (![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_name_FINAL]}) &amp;&amp; [ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_name_STAGING]})) || ([ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_name_FINAL]}) &amp;&amp; ![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_name_STAGING]})) || (![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_name_FINAL]}) &amp;&amp; ![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_name_STAGING]}) &amp;&amp; (#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_name_FINAL]} != #{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_name_STAGING]})) || (![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_amounts_FINAL]}) &amp;&amp; [ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_amounts_STAGING]})) || ([ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_amounts_FINAL]}) &amp;&amp; ![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_amounts_STAGING]})) || (![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_amounts_FINAL]}) &amp;&amp; ![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_amounts_STAGING]}) &amp;&amp; (#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_amounts_FINAL]} != #{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_amounts_STAGING]})) || (![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expenditure_amounts_FINAL]}) &amp;&amp; [ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expenditure_amounts_STAGING]})) || ([ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expenditure_amounts_FINAL]}) &amp;&amp; ![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expenditure_amounts_STAGING]})) || (![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expenditure_amounts_FINAL]}) &amp;&amp; ![ISNULL](#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expenditure_amounts_STAGING]}) &amp;&amp; (#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expenditure_amounts_FINAL]} != #{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expenditure_amounts_STAGING]}))</property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the friendly version of the expression. This expression version uses column names."
                      expressionType="Notify"
                      name="FriendlyExpression">(!ISNULL(agency_FINAL) &amp;&amp; ISNULL(agency_STAGING)) || (ISNULL(agency_FINAL) &amp;&amp; !ISNULL(agency_STAGING)) || (!ISNULL(agency_FINAL) &amp;&amp; !ISNULL(agency_STAGING) &amp;&amp; (agency_FINAL != agency_STAGING)) || (!ISNULL(year_FINAL) &amp;&amp; ISNULL(year_STAGING)) || (ISNULL(year_FINAL) &amp;&amp; !ISNULL(year_STAGING)) || (!ISNULL(year_FINAL) &amp;&amp; !ISNULL(year_STAGING) &amp;&amp; (year_FINAL != year_STAGING)) || (!ISNULL(department_FINAL) &amp;&amp; ISNULL(department_STAGING)) || (ISNULL(department_FINAL) &amp;&amp; !ISNULL(department_STAGING)) || (!ISNULL(department_FINAL) &amp;&amp; !ISNULL(department_STAGING) &amp;&amp; (department_FINAL != department_STAGING)) || (!ISNULL(expense_category_FINAL) &amp;&amp; ISNULL(expense_category_STAGING)) || (ISNULL(expense_category_FINAL) &amp;&amp; !ISNULL(expense_category_STAGING)) || (!ISNULL(expense_category_FINAL) &amp;&amp; !ISNULL(expense_category_STAGING) &amp;&amp; (expense_category_FINAL != expense_category_STAGING)) || (!ISNULL(budget_code_FINAL) &amp;&amp; ISNULL(budget_code_STAGING)) || (ISNULL(budget_code_FINAL) &amp;&amp; !ISNULL(budget_code_STAGING)) || (!ISNULL(budget_code_FINAL) &amp;&amp; !ISNULL(budget_code_STAGING) &amp;&amp; (budget_code_FINAL != budget_code_STAGING)) || (!ISNULL(budget_name_FINAL) &amp;&amp; ISNULL(budget_name_STAGING)) || (ISNULL(budget_name_FINAL) &amp;&amp; !ISNULL(budget_name_STAGING)) || (!ISNULL(budget_name_FINAL) &amp;&amp; !ISNULL(budget_name_STAGING) &amp;&amp; (budget_name_FINAL != budget_name_STAGING)) || (!ISNULL(budget_amounts_FINAL) &amp;&amp; ISNULL(budget_amounts_STAGING)) || (ISNULL(budget_amounts_FINAL) &amp;&amp; !ISNULL(budget_amounts_STAGING)) || (!ISNULL(budget_amounts_FINAL) &amp;&amp; !ISNULL(budget_amounts_STAGING) &amp;&amp; (budget_amounts_FINAL != budget_amounts_STAGING)) || (!ISNULL(expenditure_amounts_FINAL) &amp;&amp; ISNULL(expenditure_amounts_STAGING)) || (ISNULL(expenditure_amounts_FINAL) &amp;&amp; !ISNULL(expenditure_amounts_STAGING)) || (!ISNULL(expenditure_amounts_FINAL) &amp;&amp; !ISNULL(expenditure_amounts_STAGING) &amp;&amp; (expenditure_amounts_FINAL != expenditure_amounts_STAGING))</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                      name="EvaluationOrder">0</property>
                  </properties>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Outputs[Conditional Split Default Output]"
                  description="Default Output of the Conditional Split Transformation"
                  exclusionGroup="1"
                  name="Conditional Split Default Output"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Inputs[Conditional Split Input]">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      name="IsDefaultOut">true</property>
                  </properties>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Outputs[Conditional Split Error Output]"
                  description="Error Output of the Conditional Split Transformation"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Conditional Split Error Output"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Inputs[Conditional Split Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000"
              componentClassID="Microsoft.OLEDBDestination"
              contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
              description="OLE DB Destination"
              name="Insert records (Final - Budget) - Batch 100,000"
              usesDispositions="true"
              version="4">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[dbo].[Budget]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">3</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepIdentity">false</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                  name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                <property
                  dataType="System.Int32"
                  description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                  name="FastLoadMaxInsertCommitSize">100000</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  connectionManagerRefId="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input]"
                  errorOrTruncationOperation="Insert"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[ID_STAGING]"
                      cachedDataType="i4"
                      cachedName="ID_STAGING"
                      cachedSortKeyPosition="1"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[StagingID]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[ID_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[LastUpdatedTimestamp_Derived]"
                      cachedDataType="dbTimeStamp"
                      cachedName="LastUpdatedTimestamp_Derived"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[LastUpdatedTimestamp]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Derive Current Datetime for Final Budget table.Outputs[Derived Column Output].Columns[LastUpdatedTimestamp_Derived]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[agency_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="agency_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[agency]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[agency_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[year_STAGING]"
                      cachedDataType="i4"
                      cachedName="year_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[year]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[year_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[department_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="department_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[department]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[department_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[expense_category_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expense_category_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[expense_category]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expense_category_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[budget_code_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_code_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[budget_code]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_code_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[budget_name_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_name_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[budget_name]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_name_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[budget_amounts_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_amounts_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[budget_amounts]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_amounts_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[expenditure_amounts_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expenditure_amounts_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[expenditure_amounts]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expenditure_amounts_STAGING]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[ID]"
                      dataType="i4"
                      name="ID" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[StagingID]"
                      dataType="i4"
                      name="StagingID" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[LastUpdatedTimestamp]"
                      dataType="dbTimeStamp"
                      name="LastUpdatedTimestamp" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[agency]"
                      dataType="wstr"
                      length="255"
                      name="agency" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[year]"
                      dataType="i4"
                      name="year" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[department]"
                      dataType="wstr"
                      length="255"
                      name="department" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[expense_category]"
                      dataType="wstr"
                      length="255"
                      name="expense_category" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[budget_code]"
                      dataType="wstr"
                      length="255"
                      name="budget_code" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[budget_name]"
                      dataType="wstr"
                      length="255"
                      name="budget_name" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[budget_amounts]"
                      dataType="wstr"
                      length="255"
                      name="budget_amounts" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[expenditure_amounts]"
                      dataType="wstr"
                      length="255"
                      name="expenditure_amounts" />
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Outputs[OLE DB Destination Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Destination Error Output"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join"
              componentClassID="Microsoft.MergeJoin"
              contactInfo="Merge Join;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Combine two sorted data flows into one using the FULL, LEFT, or INNER join. We recommend this transformation when data flows can be sorted at their sources."
              name="Merge Join"
              version="1">
              <properties>
                <property
                  dataType="System.Int32"
                  description="Specifies the type of join to perform."
                  name="JoinType"
                  typeConverter="JoinType">0</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the number of columns in the ordering key."
                  name="NumKeyColumns">1</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the null values are treated as equal values."
                  name="TreatNullsAsEqual">true</property>
                <property
                  dataType="System.Int32"
                  description="Indicates the requested maximum buffers per input before blocking."
                  name="MaxBuffersPerInput">5</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Left Input]"
                  hasSideEffects="true"
                  name="Merge Join Left Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Left Input].Columns[ID_STAGING]"
                      cachedDataType="i4"
                      cachedName="ID_STAGING"
                      cachedSortKeyPosition="1"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[ID_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Left Input].Columns[agency_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="agency_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[agency_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Left Input].Columns[year_STAGING]"
                      cachedDataType="i4"
                      cachedName="year_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[year_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Left Input].Columns[department_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="department_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[department_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Left Input].Columns[expense_category_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expense_category_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[expense_category_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Left Input].Columns[budget_code_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_code_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[budget_code_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Left Input].Columns[budget_name_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_name_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[budget_name_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Left Input].Columns[budget_amounts_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_amounts_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[budget_amounts_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Left Input].Columns[expenditure_amounts_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expenditure_amounts_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output].Columns[expenditure_amounts_STAGING]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
                <input
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Right Input]"
                  hasSideEffects="true"
                  name="Merge Join Right Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Right Input].Columns[StagingID_FINAL]"
                      cachedDataType="i4"
                      cachedName="StagingID_FINAL"
                      cachedSortKeyPosition="1"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[StagingID_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Right Input].Columns[agency_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="agency_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[agency_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Right Input].Columns[year_FINAL]"
                      cachedDataType="i4"
                      cachedName="year_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[year_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Right Input].Columns[department_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="department_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[department_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Right Input].Columns[expense_category_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expense_category_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[expense_category_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Right Input].Columns[budget_code_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_code_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[budget_code_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Right Input].Columns[budget_name_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_name_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[budget_name_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Right Input].Columns[budget_amounts_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_amounts_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[budget_amounts_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Right Input].Columns[expenditure_amounts_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expenditure_amounts_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output].Columns[expenditure_amounts_FINAL]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output]"
                  isSorted="true"
                  name="Merge Join Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[ID_STAGING]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[ID_STAGING]"
                      name="ID_STAGING"
                      sortKeyPosition="1">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Left Input].Columns[ID_STAGING]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[agency_STAGING]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[agency_STAGING]"
                      name="agency_STAGING">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Left Input].Columns[agency_STAGING]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[year_STAGING]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[year_STAGING]"
                      name="year_STAGING">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Left Input].Columns[year_STAGING]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[department_STAGING]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[department_STAGING]"
                      name="department_STAGING">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Left Input].Columns[department_STAGING]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expense_category_STAGING]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expense_category_STAGING]"
                      name="expense_category_STAGING">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Left Input].Columns[expense_category_STAGING]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_code_STAGING]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_code_STAGING]"
                      name="budget_code_STAGING">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Left Input].Columns[budget_code_STAGING]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_name_STAGING]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_name_STAGING]"
                      name="budget_name_STAGING">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Left Input].Columns[budget_name_STAGING]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_amounts_STAGING]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_amounts_STAGING]"
                      name="budget_amounts_STAGING">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Left Input].Columns[budget_amounts_STAGING]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expenditure_amounts_STAGING]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expenditure_amounts_STAGING]"
                      name="expenditure_amounts_STAGING">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Left Input].Columns[expenditure_amounts_STAGING]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[StagingID_FINAL]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[StagingID_FINAL]"
                      name="StagingID_FINAL">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Right Input].Columns[StagingID_FINAL]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[agency_FINAL]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[agency_FINAL]"
                      name="agency_FINAL">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Right Input].Columns[agency_FINAL]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[year_FINAL]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[year_FINAL]"
                      name="year_FINAL">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Right Input].Columns[year_FINAL]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[department_FINAL]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[department_FINAL]"
                      name="department_FINAL">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Right Input].Columns[department_FINAL]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expense_category_FINAL]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expense_category_FINAL]"
                      name="expense_category_FINAL">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Right Input].Columns[expense_category_FINAL]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_code_FINAL]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_code_FINAL]"
                      name="budget_code_FINAL">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Right Input].Columns[budget_code_FINAL]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_name_FINAL]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_name_FINAL]"
                      name="budget_name_FINAL">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Right Input].Columns[budget_name_FINAL]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_amounts_FINAL]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_amounts_FINAL]"
                      name="budget_amounts_FINAL">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Right Input].Columns[budget_amounts_FINAL]}</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expenditure_amounts_FINAL]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expenditure_amounts_FINAL]"
                      name="expenditure_amounts_FINAL">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.Int32"
                          description="The input column associated with this output column"
                          name="InputColumnID">#{Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Right Input].Columns[expenditure_amounts_FINAL]}</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;9"
              description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
              name="Replace any column that is &quot;-&quot; with NULL"
              version="9">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="30">
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        /*
         * Add your code here
         */
        try
        {
            Row.agencySTAGING = (Row.agencySTAGING == "-" ? null : Row.agencySTAGING);
            // Row.yearSTAGING = (Row.yearSTAGING == "-" ? null: Row.yearSTAGING);
            Row.departmentSTAGING = (Row.departmentSTAGING == "-" ? null : Row.departmentSTAGING);
            Row.expensecategorySTAGING = (Row.expensecategorySTAGING == "-" ? null : Row.expensecategorySTAGING);
            Row.budgetcodeSTAGING = (Row.budgetcodeSTAGING == "-" ? null : Row.budgetcodeSTAGING);
            Row.budgetnameSTAGING = (Row.budgetnameSTAGING == "-" ? null : Row.budgetnameSTAGING);
            Row.budgetamountsSTAGING = (Row.budgetamountsSTAGING == "-" ? null : Row.budgetamountsSTAGING);
            Row.expenditureamountsSTAGING = (Row.expenditureamountsSTAGING == "-" ? null : Row.expenditureamountsSTAGING);
        }
        catch (Exception ex)
        {
            Row.agencySTAGING = "ERROR";
            // Row.yearSTAGING = "ERROR";
            Row.departmentSTAGING = "ERROR";
            Row.expensecategorySTAGING = "ERROR";
            Row.budgetcodeSTAGING = "ERROR";
            Row.budgetnameSTAGING = "ERROR";
            Row.budgetamountsSTAGING = "ERROR";
            Row.expenditureamountsSTAGING = "ERROR";
        }
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 IDSTAGING
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[0]);
        }
        set
        {
            this[0] = value;
        }
    }
    public bool IDSTAGING_IsNull
    {
        get
        {
            return IsNull(0);
        }
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String agencySTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[1]);
        }
        set
        {
            this[1] = value;
        }
    }
    public bool agencySTAGING_IsNull
    {
        get
        {
            return IsNull(1);
        }
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 yearSTAGING
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[2]);
        }
        set
        {
            this[2] = value;
        }
    }
    public bool yearSTAGING_IsNull
    {
        get
        {
            return IsNull(2);
        }
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String departmentSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[3]);
        }
        set
        {
            this[3] = value;
        }
    }
    public bool departmentSTAGING_IsNull
    {
        get
        {
            return IsNull(3);
        }
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String expensecategorySTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[4]);
        }
        set
        {
            this[4] = value;
        }
    }
    public bool expensecategorySTAGING_IsNull
    {
        get
        {
            return IsNull(4);
        }
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String budgetcodeSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[5]);
        }
        set
        {
            this[5] = value;
        }
    }
    public bool budgetcodeSTAGING_IsNull
    {
        get
        {
            return IsNull(5);
        }
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String budgetnameSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[6]);
        }
        set
        {
            this[6] = value;
        }
    }
    public bool budgetnameSTAGING_IsNull
    {
        get
        {
            return IsNull(6);
        }
        set
        {
            if (value)
            {
                SetNull(6);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String budgetamountsSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[7]);
        }
        set
        {
            this[7] = value;
        }
    }
    public bool budgetamountsSTAGING_IsNull
    {
        get
        {
            return IsNull(7);
        }
        set
        {
            if (value)
            {
                SetNull(7);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String expenditureamountsSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[8]);
        }
        set
        {
            this[8] = value;
        }
    }
    public bool expenditureamountsSTAGING_IsNull
    {
        get
        {
            return IsNull(8);
        }
        set
        {
            if (value)
            {
                SetNull(8);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 StagingIDFINAL
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[9]);
        }
    }
    public bool StagingIDFINAL_IsNull
    {
        get
        {
            return IsNull(9);
        }
    }

    public String agencyFINAL
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[10]);
        }
    }
    public bool agencyFINAL_IsNull
    {
        get
        {
            return IsNull(10);
        }
    }

    public Int32 yearFINAL
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[11]);
        }
    }
    public bool yearFINAL_IsNull
    {
        get
        {
            return IsNull(11);
        }
    }

    public String departmentFINAL
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[12]);
        }
    }
    public bool departmentFINAL_IsNull
    {
        get
        {
            return IsNull(12);
        }
    }

    public String expensecategoryFINAL
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[13]);
        }
    }
    public bool expensecategoryFINAL_IsNull
    {
        get
        {
            return IsNull(13);
        }
    }

    public String budgetcodeFINAL
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[14]);
        }
    }
    public bool budgetcodeFINAL_IsNull
    {
        get
        {
            return IsNull(14);
        }
    }

    public String budgetnameFINAL
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[15]);
        }
    }
    public bool budgetnameFINAL_IsNull
    {
        get
        {
            return IsNull(15);
        }
    }

    public String budgetamountsFINAL
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[16]);
        }
    }
    public bool budgetamountsFINAL_IsNull
    {
        get
        {
            return IsNull(16);
        }
    }

    public String expenditureamountsFINAL
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[17]);
        }
    }
    public bool expenditureamountsFINAL_IsNull
    {
        get
        {
            return IsNull(17);
        }
    }

    public DateTime LastUpdatedTimestampDerived
    {
        get
        {
            return Buffer.GetDateTime(BufferColumnIndexes[18]);
        }
    }
    public bool LastUpdatedTimestampDerived_IsNull
    {
        get
        {
            return IsNull(18);
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_3e1825733ec74b9bbbc62f8b450c30f3.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{d6261bad-e62e-483f-bca4-f40a32e70938}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_3e1825733ec74b9bbbc62f8b450c30f3</RootNamespace>
    <AssemblyName>SC_3e1825733ec74b9bbbc62f8b450c30f3</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptComponent" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptComponent" GeneratedNamespace="SC_3e1825733ec74b9bbbc62f8b450c30f3" IconIndex="0"></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_SC120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_3e1825733ec74b9bbbc62f8b450c30f3.Properties.Settings.get_Default():SC_3e1825733ec74b9bbbc62f8b450c30f3.Properties.Sett" +
    "ings")]

namespace SC_3e1825733ec74b9bbbc62f8b450c30f3.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>SC_3e1825733ec74b9bbbc62f8b450c30f3</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>SC_3e1825733ec74b9bbbc62f8b450c30f3</msb:DisplayName>
		<msb:ProjectId>{86953A54-B584-4ABD-986B-BDE2E05034F2}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_3e1825733ec74b9bbbc62f8b450c30f3.csproj"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="ComponentWrapper.cs"/>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_3e1825733ec74b9bbbc62f8b450c30f3")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_3e1825733ec74b9bbbc62f8b450c30f3")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_3e1825733ec74b9bbbc62f8b450c30f3.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_3e1825733ec74b9bbbc62f8b450c30f3.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_3e1825733ec74b9bbbc62f8b450c30f3.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_3e1825733ec74b9bbbc62f8b450c30f3.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_3e1825733ec74b9bbbc62f8b450c30f3.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="2">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_3e1825733ec74b9bbbc62f8b450c30f3.dll]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDAPzp5l4AAAAAAAAAAOAAAiELAQsAACYAAAAIAAAAAAAA3kQA
AAAgAAAAYAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACgAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAIxEAABPAAAAAGAAAAgEAAAAAAAAAAAAAAAAAAAA
AAAAAIAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA5CQAAAAgAAAAJgAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAgEAAAAYAAAAAYAAAAoAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAIAAAAACAAAALgAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAADA
RAAAAAAAAEgAAAACAAUAACcAAIwdAAABAAAAAAAAAEgmAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH4CKA0AAAoCAnNEAAAGfQEAAAQCAnNFAAAGfQIAAAQqkgRy
AQAAcBpvDgAACiwVAgUCAygPAAAKDgRzCQAABm8DAAAGKkorBwIDbwQAAAYDb0IAAAYt8SoGKh4C
KBEAAAoqHgIoEgAACioAAAswAwA6AQAAAAAAAAMDbw4AAAZyEQAAcCgTAAAKLQgDbw4AAAYrARRv
DwAABgMDbxYAAAZyEQAAcCgTAAAKLQgDbxYAAAYrARRvFwAABgMDbxoAAAZyEQAAcCgTAAAKLQgD
bxoAAAYrARRvGwAABgMDbx4AAAZyEQAAcCgTAAAKLQgDbx4AAAYrARRvHwAABgMDbyIAAAZyEQAA
cCgTAAAKLQgDbyIAAAYrARRvIwAABgMDbyYAAAZyEQAAcCgTAAAKLQgDbyYAAAYrARRvJwAABgMD
byoAAAZyEQAAcCgTAAAKLQgDbyoAAAYrARRvKwAABt5QJgNyFQAAcG8PAAAGA3IVAABwbxcAAAYD
chUAAHBvGwAABgNyFQAAcG8fAAAGA3IVAABwbyMAAAYDchUAAHBvJwAABgNyFQAAcG8rAAAG3gAq
AAABEAAAAAAAAOnpAFAZAAABHgIoAQAABioqAgMEBSgUAAAKKlICexUAAAoCexYAAAoWlG8XAAAK
KjoCFgOMGgAAASgYAAAKKiICFigZAAAKKloDLAgCFigaAAAKKnIhAABwcxsAAAp6UgJ7FQAACgJ7
FgAACheUbxwAAAoqJgIXAygYAAAKKiICFygZAAAKKloDLAgCFygaAAAKKnIhAABwcxsAAAp6UgJ7
FQAACgJ7FgAAChiUbxcAAAoqOgIYA4waAAABKBgAAAoqIgIYKBkAAAoqWgMsCAIYKBoAAAoqciEA
AHBzGwAACnpSAnsVAAAKAnsWAAAKGZRvHAAACiomAhkDKBgAAAoqIgIZKBkAAAoqWgMsCAIZKBoA
AAoqciEAAHBzGwAACnpSAnsVAAAKAnsWAAAKGpRvHAAACiomAhoDKBgAAAoqIgIaKBkAAAoqWgMs
CAIaKBoAAAoqciEAAHBzGwAACnpSAnsVAAAKAnsWAAAKG5RvHAAACiomAhsDKBgAAAoqIgIbKBkA
AAoqWgMsCAIbKBoAAAoqciEAAHBzGwAACnpSAnsVAAAKAnsWAAAKHJRvHAAACiomAhwDKBgAAAoq
IgIcKBkAAAoqWgMsCAIcKBoAAAoqciEAAHBzGwAACnpSAnsVAAAKAnsWAAAKHZRvHAAACiomAh0D
KBgAAAoqIgIdKBkAAAoqWgMsCAIdKBoAAAoqciEAAHBzGwAACnpSAnsVAAAKAnsWAAAKHpRvHAAA
CiomAh4DKBgAAAoqIgIeKBkAAAoqWgMsCAIeKBoAAAoqciEAAHBzGwAACnpWAnsVAAAKAnsWAAAK
HwmUbxcAAAoqJgIfCSgZAAAKKlYCexUAAAoCexYAAAofCpRvHAAACiomAh8KKBkAAAoqVgJ7FQAA
CgJ7FgAACh8LlG8XAAAKKiYCHwsoGQAACipWAnsVAAAKAnsWAAAKHwyUbxwAAAoqJgIfDCgZAAAK
KlYCexUAAAoCexYAAAofDZRvHAAACiomAh8NKBkAAAoqVgJ7FQAACgJ7FgAACh8OlG8cAAAKKiYC
Hw4oGQAACipWAnsVAAAKAnsWAAAKHw+UbxwAAAoqJgIfDygZAAAKKlYCexUAAAoCexYAAAofEJRv
HAAACiomAh8QKBkAAAoqVgJ7FQAACgJ7FgAACh8RlG8cAAAKKiYCHxEoGQAACipWAnsVAAAKAnsW
AAAKHxKUbx0AAAoqJgIfEigZAAAKKh4CKB4AAAoqHgIoHwAACio6AiggAAAKAgN9AwAABCo6Aigg
AAAKAgN9BAAABCoeAiggAAAKKgAAEzACAC0AAAABAAARfgUAAAQtIHK+AABw0AcAAAIoIgAACm8j
AAAKcyQAAAoKBoAFAAAEfgUAAAQqGn4GAAAEKh4CgAYAAAQqGn4HAAAEKi5zSwAABoAHAAAEKh4C
KCcAAAoqAAAAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFk
ZXIsIG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5
VG9rZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNl
dAIAAAAAAAAAAAAAAFBBRFBBRFC0AAAAQlNKQgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAABQBs
AAAAzAoAACN+AAA4CwAAUA8AACNTdHJpbmdzAAAAAIgaAAAwAQAAI1VTALgbAAAQAAAAI0dVSUQA
AADIGwAAxAEAACNCbG9iAAAAAAAAAAIAAAFXFaIBCQEAAAD6JTMAFgAAAQAAACIAAAAIAAAABwAA
AEwAAAAfAAAAJwAAAA8AAAABAAAAAwAAACkAAAA8AAAAAQAAAAQAAAABAAAAAAAKAAEAAAAAAAYA
7gDNAAYA/gDNAAoAGwEUAQ4ANwEiARIAdgHNAAYAhQHNAAoAIQcUAQoAzQq8CgoA/grpCgoA1wu9
CwoAAgzwCwoAGQzwCwoANgzwCwoAVQzwCwoAbgzwCwoAhwzwCwoAogzwCwoAvQzwCwoA1gzwCwoA
Dw3vDAoALw3vDAoAcQ0UAQoAeA0UAQYAoQ3NAAoA1A0UAQoA5w0UAQoABQ4UAQoASA41DgoAZQ4U
AQoAag4UAQoAjg7wCw4Aug6kDg4A0w6kDgoA6A7vDAAAAAABAAAAAAABAAEAAQAQADIAAAAFAAEA
AQABABAAQAAAAAgAAwAFAAEAEABLAAAACQADAAkAAQAQAFgAAAANAAMARAABABAAZAAAAA0ABABF
AAAAEABuAHgADQAFAEYAAAEQAKcAeAARAAcASgAGAFgAEwAGAGQAFwABAKwKagABAKwKagARAN0K
dAARAAoLeAARAE4LlgBQIAAAAACGGE8BGwABAHAgAAAAAMYAkwEfAAEAlSAAAAAAxgGgASkABQCo
IAAAAADGAbQBKQAGAKogAAAAAMYAywEbAAcAsiAAAAAAxgDWARsABwC8IAAAAADGALQBKQAHABQi
AAAAAIYYTwEbAAgAHCIAAAAAhhhPAS8ACAAnIgAAAACGCOIBOQALADwiAAAAAIYI8AE9AAsASyIA
AAAAhgj+AUIADABUIgAAAACGCBMCRgAMAGsiAAAAAIYIKAJLAA0AgCIAAAAAhgg6Ak8ADQCKIgAA
AACGCEwCQgAOAJMiAAAAAIYIZQJGAA4AqiIAAAAAhgh+AjkADwC/IgAAAACGCI4CPQAPAM4iAAAA
AIYIngJCABAA1yIAAAAAhgi1AkYAEADuIgAAAACGCMwCSwARAAMjAAAAAIYI4gJPABEADSMAAAAA
hgj4AkIAEgAWIwAAAACGCBUDRgASAC0jAAAAAIYIMgNLABMAQiMAAAAAhghNA08AEwBMIwAAAACG
CGgDQgAUAFUjAAAAAIYIigNGABQAbCMAAAAAhgisA0sAFQCBIwAAAACGCMIDTwAVAIsjAAAAAIYI
2ANCABYAlCMAAAAAhgj1A0YAFgCrIwAAAACGCBIESwAXAMAjAAAAAIYIKARPABcAyiMAAAAAhgg+
BEIAGADTIwAAAACGCFsERgAYAOojAAAAAIYIeARLABkA/yMAAAAAhgiRBE8AGQAJJAAAAACGCKoE
QgAaABIkAAAAAIYIygRGABoAKSQAAAAAhgjqBEsAGwA+JAAAAACGCAgFTwAbAEgkAAAAAIYIJgVC
ABwAUSQAAAAAhghLBUYAHABoJAAAAACGCHAFOQAdAH4kAAAAAIYIgwVCAB0AiCQAAAAAhgidBUsA
HQCeJAAAAACGCK0FQgAdAKgkAAAAAIYIxAU5AB0AviQAAAAAhgjSBUIAHQDIJAAAAACGCOcFSwAd
AN4kAAAAAIYI+wVCAB0A6CQAAAAAhggWBksAHQD+JAAAAACGCC8GQgAdAAglAAAAAIYITwZLAB0A
HiUAAAAAhghjBkIAHQAoJQAAAACGCH4GSwAdAD4lAAAAAIYIkgZCAB0ASCUAAAAAhgitBksAHQBe
JQAAAACGCMQGQgAdAGglAAAAAIYI4gZLAB0AfiUAAAAAhgj+BkIAHQCIJQAAAACGCCoHVAAdAJ4l
AAAAAIYISgdCAB0AqCUAAAAAhgBxB0IAHQCwJQAAAACGAHkHQgAdALglAAAAAIYYTwFuAB0AxyUA
AAAAhhhPAW4AHgDWJQAAAACDGE8BGwAfAOAlAAAAAJMIGgt8AB8AGSYAAAAAkwguC4EAHwAgJgAA
AACTCDoLhgAfACgmAAAAAJYIXguaACAAOyYAAAAAhhhPARsAIAAvJgAAAACRGAMPBwEgAAAAAQBy
CwAAAgB6CwAAAwCECwAABACLCwAAAQCECwAAAQCVCwAAAQCVCwAAAQCECwAAAgCZCwAAAwCLCwAA
AQCtCwAAAQCtCwAAAQCtCwAAAQCtCwAAAQCtCwAAAQCtCwAAAQCtCwAAAQCtCwAAAQCtCwAAAQCt
CwAAAQCtCwAAAQCtCwAAAQCtCwAAAQCtCwAAAQCtCwAAAQCtCwAAAQCtCwAAAQCtCwAAAQCzCwAA
AQCzCwAAAQCtC1EATwFPAFkATwFPAGEATwFPAGkATwFPAHEATwFPAHkATwFPAIEATwFPAIkATwFP
AJEATwFPAJkATwFPAKEATwE9AKkATwEbAAkATwEbALEAiQ2kAAkAkA2rAMEATwEbAAkAywEbAAkA
1gEbALEAyA22ABEATwEvABEAhAu8ABEAmQvAACkA3g3EABEA7Q3JABEA9g3PABEA/Q09ANkATwFP
ACkAHw7UACkAKQ7ZABEAcQdCABEAeQdCABkATwEbAOEATwEbAOkAfA7fAOkAlw7mAEEATwHrAAEB
TwH3ABEBTwEbACEATwEbAC4AGwB8AS4AYwCiAS4ACwALAS4AEwBTAS4AIwB8AS4AKwB8AS4AMwBT
AS4AOwCCAS4AQwB8AS4AWwCZAWMAgwCxAOEAMwGxAOMACwGxAOkEKwH+AAkFKwH+APIABAABAAcA
JwAIACkAAACFB1kAAACPB10AAACgB2EAAACuB10AAADDB1kAAADPB10AAADiB2EAAAD0B10AAAAN
CGEAAAAkCF0AAABCCGEAAABUCF0AAABtCGEAAAB/CF0AAACYCGEAAACtCF0AAADJCGEAAADjCF0A
AAAECVkAAAATCV0AAAApCWEAAAA1CV0AAABICVkAAABSCV0AAABjCWEAAABzCV0AAACKCWEAAACf
CV0AAAC7CWEAAADLCV0AAADiCWEAAADyCV0AAAAJCmEAAAAcCl0AAAA2CmEAAABOCl0AAABtCmUA
AACJCl0AAADNCowAAABGC5EAAABqC58AAgAKAAMAAQALAAMAAgAMAAUAAQANAAUAAQAPAAcAAgAO
AAcAAgAQAAkAAQARAAkAAgASAAsAAQATAAsAAgAUAA0AAQAVAA0AAQAXAA8AAgAWAA8AAgAYABEA
AQAZABEAAgAaABMAAQAbABMAAgAcABUAAQAdABUAAgAeABcAAQAfABcAAgAgABkAAQAhABkAAgAi
ABsAAQAjABsAAgAkAB0AAQAlAB0AAQAnAB8AAgAmAB8AAgAoACEAAQApACEAAgAqACMAAQArACMA
AgAsACUAAQAtACUAAgAuACcAAgAvACkAAgAwACsAAgAxAC0AAgAyAC8AAgAzADEAAgA0ADMAAgA1
ADUAAgA2ADcAAgA3ADkAAgA4ADsAAgA5AD0AAgA6AD8AAgA7AEEAAgA8AEMAAgA9AEUAAgA+AEcA
AgA/AEkAAgBAAEsAAgBBAE0AAgBHAE8AAgBIAFEAAQBJAFEAAgBKAFMABIAAAAEAAAAuHZadAAAA
AAAATQ0AAAwAAAAAAAAAAAAAAAEAsAAAAAAABAAAAAAAAAAAAAAACgALAQAAAAAEAAAAAAAAAAAA
AAAKABQBAAAAAAwAAAAAAAAAAAAAAAEAVQEAAAAAAAAAAAEAAAAKDwAAAAAAAAA8TW9kdWxlPgBT
Q18zZTE4MjU3MzNlYzc0YjliYmJjNjJmOGI0NTBjMzBmMy5kbGwAVXNlckNvbXBvbmVudABTY3Jp
cHRNYWluAElucHV0MEJ1ZmZlcgBDb25uZWN0aW9ucwBWYXJpYWJsZXMAUmVzb3VyY2VzAFNDXzNl
MTgyNTczM2VjNzRiOWJiYmM2MmY4YjQ1MGMzMGYzLlByb3BlcnRpZXMAU2V0dGluZ3MATWljcm9z
b2Z0LlNxbFNlcnZlci5UeFNjcmlwdABNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZQBT
Y3JpcHRDb21wb25lbnQAU2NyaXB0QnVmZmVyAG1zY29ybGliAFN5c3RlbQBPYmplY3QAU3lzdGVt
LkNvbmZpZ3VyYXRpb24AQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UALmN0b3IATWljcm9zb2Z0LlNx
bFNlcnZlci5QaXBlbGluZUhvc3QAUGlwZWxpbmVCdWZmZXIAT3V0cHV0TmFtZU1hcABQcm9jZXNz
SW5wdXQASW5wdXQwX1Byb2Nlc3NJbnB1dABJbnB1dDBfUHJvY2Vzc0lucHV0Um93AFByZUV4ZWN1
dGUAUG9zdEV4ZWN1dGUAZ2V0X0lEU1RBR0lORwBzZXRfSURTVEFHSU5HAGdldF9JRFNUQUdJTkdf
SXNOdWxsAHNldF9JRFNUQUdJTkdfSXNOdWxsAGdldF9hZ2VuY3lTVEFHSU5HAHNldF9hZ2VuY3lT
VEFHSU5HAGdldF9hZ2VuY3lTVEFHSU5HX0lzTnVsbABzZXRfYWdlbmN5U1RBR0lOR19Jc051bGwA
Z2V0X3llYXJTVEFHSU5HAHNldF95ZWFyU1RBR0lORwBnZXRfeWVhclNUQUdJTkdfSXNOdWxsAHNl
dF95ZWFyU1RBR0lOR19Jc051bGwAZ2V0X2RlcGFydG1lbnRTVEFHSU5HAHNldF9kZXBhcnRtZW50
U1RBR0lORwBnZXRfZGVwYXJ0bWVudFNUQUdJTkdfSXNOdWxsAHNldF9kZXBhcnRtZW50U1RBR0lO
R19Jc051bGwAZ2V0X2V4cGVuc2VjYXRlZ29yeVNUQUdJTkcAc2V0X2V4cGVuc2VjYXRlZ29yeVNU
QUdJTkcAZ2V0X2V4cGVuc2VjYXRlZ29yeVNUQUdJTkdfSXNOdWxsAHNldF9leHBlbnNlY2F0ZWdv
cnlTVEFHSU5HX0lzTnVsbABnZXRfYnVkZ2V0Y29kZVNUQUdJTkcAc2V0X2J1ZGdldGNvZGVTVEFH
SU5HAGdldF9idWRnZXRjb2RlU1RBR0lOR19Jc051bGwAc2V0X2J1ZGdldGNvZGVTVEFHSU5HX0lz
TnVsbABnZXRfYnVkZ2V0bmFtZVNUQUdJTkcAc2V0X2J1ZGdldG5hbWVTVEFHSU5HAGdldF9idWRn
ZXRuYW1lU1RBR0lOR19Jc051bGwAc2V0X2J1ZGdldG5hbWVTVEFHSU5HX0lzTnVsbABnZXRfYnVk
Z2V0YW1vdW50c1NUQUdJTkcAc2V0X2J1ZGdldGFtb3VudHNTVEFHSU5HAGdldF9idWRnZXRhbW91
bnRzU1RBR0lOR19Jc051bGwAc2V0X2J1ZGdldGFtb3VudHNTVEFHSU5HX0lzTnVsbABnZXRfZXhw
ZW5kaXR1cmVhbW91bnRzU1RBR0lORwBzZXRfZXhwZW5kaXR1cmVhbW91bnRzU1RBR0lORwBnZXRf
ZXhwZW5kaXR1cmVhbW91bnRzU1RBR0lOR19Jc051bGwAc2V0X2V4cGVuZGl0dXJlYW1vdW50c1NU
QUdJTkdfSXNOdWxsAGdldF9TdGFnaW5nSURGSU5BTABnZXRfU3RhZ2luZ0lERklOQUxfSXNOdWxs
AGdldF9hZ2VuY3lGSU5BTABnZXRfYWdlbmN5RklOQUxfSXNOdWxsAGdldF95ZWFyRklOQUwAZ2V0
X3llYXJGSU5BTF9Jc051bGwAZ2V0X2RlcGFydG1lbnRGSU5BTABnZXRfZGVwYXJ0bWVudEZJTkFM
X0lzTnVsbABnZXRfZXhwZW5zZWNhdGVnb3J5RklOQUwAZ2V0X2V4cGVuc2VjYXRlZ29yeUZJTkFM
X0lzTnVsbABnZXRfYnVkZ2V0Y29kZUZJTkFMAGdldF9idWRnZXRjb2RlRklOQUxfSXNOdWxsAGdl
dF9idWRnZXRuYW1lRklOQUwAZ2V0X2J1ZGdldG5hbWVGSU5BTF9Jc051bGwAZ2V0X2J1ZGdldGFt
b3VudHNGSU5BTABnZXRfYnVkZ2V0YW1vdW50c0ZJTkFMX0lzTnVsbABnZXRfZXhwZW5kaXR1cmVh
bW91bnRzRklOQUwAZ2V0X2V4cGVuZGl0dXJlYW1vdW50c0ZJTkFMX0lzTnVsbABEYXRlVGltZQBn
ZXRfTGFzdFVwZGF0ZWRUaW1lc3RhbXBEZXJpdmVkAGdldF9MYXN0VXBkYXRlZFRpbWVzdGFtcERl
cml2ZWRfSXNOdWxsAE5leHRSb3cARW5kT2ZSb3dzZXQASURTVEFHSU5HAElEU1RBR0lOR19Jc051
bGwAYWdlbmN5U1RBR0lORwBhZ2VuY3lTVEFHSU5HX0lzTnVsbAB5ZWFyU1RBR0lORwB5ZWFyU1RB
R0lOR19Jc051bGwAZGVwYXJ0bWVudFNUQUdJTkcAZGVwYXJ0bWVudFNUQUdJTkdfSXNOdWxsAGV4
cGVuc2VjYXRlZ29yeVNUQUdJTkcAZXhwZW5zZWNhdGVnb3J5U1RBR0lOR19Jc051bGwAYnVkZ2V0
Y29kZVNUQUdJTkcAYnVkZ2V0Y29kZVNUQUdJTkdfSXNOdWxsAGJ1ZGdldG5hbWVTVEFHSU5HAGJ1
ZGdldG5hbWVTVEFHSU5HX0lzTnVsbABidWRnZXRhbW91bnRzU1RBR0lORwBidWRnZXRhbW91bnRz
U1RBR0lOR19Jc051bGwAZXhwZW5kaXR1cmVhbW91bnRzU1RBR0lORwBleHBlbmRpdHVyZWFtb3Vu
dHNTVEFHSU5HX0lzTnVsbABTdGFnaW5nSURGSU5BTABTdGFnaW5nSURGSU5BTF9Jc051bGwAYWdl
bmN5RklOQUwAYWdlbmN5RklOQUxfSXNOdWxsAHllYXJGSU5BTAB5ZWFyRklOQUxfSXNOdWxsAGRl
cGFydG1lbnRGSU5BTABkZXBhcnRtZW50RklOQUxfSXNOdWxsAGV4cGVuc2VjYXRlZ29yeUZJTkFM
AGV4cGVuc2VjYXRlZ29yeUZJTkFMX0lzTnVsbABidWRnZXRjb2RlRklOQUwAYnVkZ2V0Y29kZUZJ
TkFMX0lzTnVsbABidWRnZXRuYW1lRklOQUwAYnVkZ2V0bmFtZUZJTkFMX0lzTnVsbABidWRnZXRh
bW91bnRzRklOQUwAYnVkZ2V0YW1vdW50c0ZJTkFMX0lzTnVsbABleHBlbmRpdHVyZWFtb3VudHNG
SU5BTABleHBlbmRpdHVyZWFtb3VudHNGSU5BTF9Jc051bGwATGFzdFVwZGF0ZWRUaW1lc3RhbXBE
ZXJpdmVkAExhc3RVcGRhdGVkVGltZXN0YW1wRGVyaXZlZF9Jc051bGwAUGFyZW50Q29tcG9uZW50
AFN5c3RlbS5SZXNvdXJjZXMAUmVzb3VyY2VNYW5hZ2VyAHJlc291cmNlTWFuAFN5c3RlbS5HbG9i
YWxpemF0aW9uAEN1bHR1cmVJbmZvAHJlc291cmNlQ3VsdHVyZQBnZXRfUmVzb3VyY2VNYW5hZ2Vy
AGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAEN1bHR1cmUAZGVmYXVsdEluc3RhbmNlAGdldF9EZWZh
dWx0AERlZmF1bHQASW5wdXRJRABJbnB1dE5hbWUAQnVmZmVyAE91dHB1dE1hcABSb3cAQnVmZmVy
Q29sdW1uSW5kZXhlcwB2YWx1ZQBDb21wb25lbnQAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBU
YXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAU3lzdGVtLlJlZmxlY3Rpb24AQXNzZW1ibHlUaXRsZUF0
dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlv
bkF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmli
dXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmlidXRl
AEFzc2VtYmx5Q3VsdHVyZUF0dHJpYnV0ZQBBc3NlbWJseVZlcnNpb25BdHRyaWJ1dGUAU3lzdGVt
LlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRl
AFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAFNDXzNlMTgyNTczM2VjNzRiOWJiYmM2MmY4
YjQ1MGMzMGYzAFN0cmluZwBTdHJpbmdDb21wYXJpc29uAEVxdWFscwBHZXRDb2x1bW5JbmRleGVz
AFNTSVNTY3JpcHRDb21wb25lbnRFbnRyeVBvaW50QXR0cmlidXRlAG9wX0VxdWFsaXR5AEV4Y2Vw
dGlvbgBHZXRJbnQzMgBJbnQzMgBzZXRfSXRlbQBJc051bGwAU2V0TnVsbABJbnZhbGlkT3BlcmF0
aW9uRXhjZXB0aW9uAEdldFN0cmluZwBHZXREYXRlVGltZQBTeXN0ZW0uRGlhZ25vc3RpY3MARGVi
dWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBUeXBlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVG
cm9tSGFuZGxlAEFzc2VtYmx5AGdldF9Bc3NlbWJseQBTeXN0ZW0uQ29tcG9uZW50TW9kZWwARWRp
dG9yQnJvd3NhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBpbGVyR2VuZXJh
dGVkQXR0cmlidXRlAC5jY3RvcgBTQ18zZTE4MjU3MzNlYzc0YjliYmJjNjJmOGI0NTBjMzBmMy5Q
cm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMAAAAAAA9JAG4AcAB1AHQAIAAwAAADLQABC0UA
UgBSAE8AUgAAgJtJAHMATgB1AGwAbAAgAHAAcgBvAHAAZQByAHQAeQAgAGMAYQBuAG4AbwB0ACAA
YgBlACAAcwBlAHQAIAB0AG8AIABGAGEAbABzAGUALgAgAEEAcwBzAGkAZwBuACAAYQAgAHYAYQBs
AHUAZQAgAHQAbwAgAHQAaABlACAAYwBvAGwAdQBtAG4AIABpAG4AcwB0AGUAYQBkAC4AAHFTAEMA
XwAzAGUAMQA4ADIANQA3ADMAMwBlAGMANwA0AGIAOQBiAGIAYgBjADYAMgBmADgAYgA0ADUAMABj
ADMAMABmADMALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAPBqSrF8
Q9JEsCc1/aZ2i1wACImEXc2AgMyRCLd6XFYZNOCJAwYSFAMGEhgDIAABCSAEAQgOEhUSGQUgAQES
EAkgAwESFR0IEhkDIAAIBCABAQgDIAACBCABAQIDIAAOBCABAQ4EIAARHQMoAAgDKAACAygADgQo
ABEdAwYSBQUgAQESBQMGEiEDBhIlBAAAEiEEAAASJQUAAQESJQQIABIhBAgAEiUDBhIgBAAAEiAE
CAASIAYgAgIOEV0FIAEdCAgEAQAAAAUAAgIODgMGEhUDBh0IBCABCAgFIAIBCBwEIAECCAQgAQ4I
BSABER0IBgABEnUReQQgABJ9BiACAQ4SfQQHARIhBiABARGAhQgBAAIAAAAAAAMAAAFHAQAaLk5F
VEZyYW1ld29yayxWZXJzaW9uPXY0LjABAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEC5ORVQgRnJh
bWV3b3JrIDQoAQAjU0NfM2UxODI1NzMzZWM3NGI5YmJiYzYyZjhiNDUwYzMwZjMAAAUBAAAAABYB
ABFDb3B5cmlnaHQgQCAgMjAyMAAACAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhy
b3dzAQAAALREAAAAAAAAAAAAAM5EAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAADARAAAAAAAAAAA
AAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAA
GAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhgAACw
AwAAAAAAAAAAAACwAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAA
AQAAAAEAlp0uHQAAAQCWnS4dPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQBy
AEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAE
EAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAA7AIAAAEAMAAwADAAMAAwADQAYgAw
AAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAQwBfADMAZQAxADgA
MgA1ADcAMwAzAGUAYwA3ADQAYgA5AGIAYgBiAGMANgAyAGYAOABiADQANQAwAGMAMwAwAGYAMwAA
AEAADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3ADQANwAwAC4ANAAwADMA
NAAyAAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAQwBfADMAZQAxADgAMgA1
ADcAMwAzAGUAYwA3ADQAYgA5AGIAYgBiAGMANgAyAGYAOABiADQANQAwAGMAMwAwAGYAMwAuAGQA
bABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBo
AHQAIABAACAAIAAyADAAMgAwAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0A
ZQAAAFMAQwBfADMAZQAxADgAMgA1ADcAMwAzAGUAYwA3ADQAYgA5AGIAYgBiAGMANgAyAGYAOABi
ADQANQAwAGMAMwAwAGYAMwAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAA
AABTAEMAXwAzAGUAMQA4ADIANQA3ADMAMwBlAGMANwA0AGIAOQBiAGIAYgBjADYAMgBmADgAYgA0
ADUAMABjADMAMABmADMAAABEAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4A
MAAuADcANAA3ADAALgA0ADAAMwA0ADIAAAAAAEgADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQBy
AHMAaQBvAG4AAAAxAC4AMAAuADcANAA3ADAALgA0ADAAMwA0ADIAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAMAAAA4DQAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_3e1825733ec74b9bbbc62f8b450c30f3</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum"
                  typeConverter="NOTBROWSABLE">26ce08dbc005fcf59eabf7caa4932210</property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataShaChecksum"
                  typeConverter="NOTBROWSABLE">a6d4c971f86e95042e591086a98a678a8e2cc6cb</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0]"
                  hasSideEffects="true"
                  name="Input 0">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[ID_STAGING]"
                      cachedDataType="i4"
                      cachedName="ID_STAGING"
                      cachedSortKeyPosition="1"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[ID_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[agency_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="agency_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[agency_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[year_STAGING]"
                      cachedDataType="i4"
                      cachedName="year_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[year_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[department_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="department_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[department_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[expense_category_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expense_category_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expense_category_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[budget_code_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_code_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_code_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[budget_name_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_name_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_name_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[budget_amounts_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_amounts_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_amounts_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[expenditure_amounts_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expenditure_amounts_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expenditure_amounts_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[StagingID_FINAL]"
                      cachedDataType="i4"
                      cachedName="StagingID_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[StagingID_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[agency_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="agency_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[agency_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[year_FINAL]"
                      cachedDataType="i4"
                      cachedName="year_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[year_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[department_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="department_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[department_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[expense_category_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expense_category_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expense_category_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[budget_code_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_code_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_code_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[budget_name_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_name_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_name_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[budget_amounts_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_amounts_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_amounts_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[expenditure_amounts_FINAL]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expenditure_amounts_FINAL"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expenditure_amounts_FINAL]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[LastUpdatedTimestamp_Derived]"
                      cachedDataType="dbTimeStamp"
                      cachedName="LastUpdatedTimestamp_Derived"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Derive Current Datetime for Final Budget table.Outputs[Derived Column Output].Columns[LastUpdatedTimestamp_Derived]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Outputs[Output 0]"
                  name="Output 0"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0]">
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging"
              componentClassID="Microsoft.OLEDBSource"
              contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
              description="OLE DB Source"
              name="Staging - Budget_Staging"
              usesDispositions="true"
              version="7">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[dbo].[Budget_Staging]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">0</property>
                <property
                  dataType="System.String"
                  description="The mappings between the parameters in the SQL command and variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  connectionManagerRefId="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output]"
                  name="OLE DB Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[ID_STAGING]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[ID]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[ID_STAGING]"
                      name="ID_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[agency_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[agency]"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[agency_STAGING]"
                      name="agency_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[year_STAGING]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[year]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[year_STAGING]"
                      name="year_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[department_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[department]"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[department_STAGING]"
                      name="department_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[expense_category_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[expense_category]"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[expense_category_STAGING]"
                      name="expense_category_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_code_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[budget_code]"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_code_STAGING]"
                      name="budget_code_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_name_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[budget_name]"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_name_STAGING]"
                      name="budget_name_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_amounts_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[budget_amounts]"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_amounts_STAGING]"
                      name="budget_amounts_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[expenditure_amounts_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[expenditure_amounts]"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[expenditure_amounts_STAGING]"
                      name="expenditure_amounts_STAGING"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[ID]"
                      dataType="i4"
                      name="ID" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[LastUpdatedTimestamp]"
                      dataType="dbTimeStamp"
                      name="LastUpdatedTimestamp" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[agency]"
                      dataType="wstr"
                      length="255"
                      name="agency" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[year]"
                      dataType="i4"
                      name="year" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[department]"
                      dataType="wstr"
                      length="255"
                      name="department" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[expense_category]"
                      dataType="wstr"
                      length="255"
                      name="expense_category" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[budget_code]"
                      dataType="wstr"
                      length="255"
                      name="budget_code" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[budget_name]"
                      dataType="wstr"
                      length="255"
                      name="budget_name" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[budget_amounts]"
                      dataType="wstr"
                      length="255"
                      name="budget_amounts" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[expenditure_amounts]"
                      dataType="wstr"
                      length="255"
                      name="expenditure_amounts" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output]"
                  isErrorOut="true"
                  name="OLE DB Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[ID]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[ID]"
                      name="ID" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[agency]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[agency]"
                      name="agency" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[year]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[year]"
                      name="year" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[department]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[department]"
                      name="department" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[expense_category]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[expense_category]"
                      name="expense_category" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[budget_code]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[budget_code]"
                      name="budget_code" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[budget_name]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[budget_name]"
                      name="budget_name" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[budget_amounts]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[budget_amounts]"
                      name="budget_amounts" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[expenditure_amounts]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[expenditure_amounts]"
                      name="expenditure_amounts" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget)"
              componentClassID="Microsoft.OLEDBCommand"
              contactInfo="OLE DB Command;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;2"
              description="Runs an SQL statement for each row in a data flow. For example, call a 'new employee setup' stored procedure for each row in the 'new employees' table. Note: running an SQL statement for each row of a large data flow may take a long time."
              name="Update changed records (Final - Budget)"
              usesDispositions="true"
              version="2">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  expressionType="Notify"
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">UPDATE
    dbo.Budget
SET
    dbo.Budget.[LastUpdatedTimestamp] = ?,
    dbo.Budget.[agency] = ?,
    dbo.Budget.[year] = ?,
    dbo.Budget.[department] = ?,
    dbo.Budget.[expense_category] = ?,
    dbo.Budget.[budget_code] = ?,
    dbo.Budget.[budget_name] = ?,
    dbo.Budget.[budget_amounts] = ?,
    dbo.Budget.[expenditure_amounts] = ?
WHERE
    dbo.Budget.[StagingID] = ?</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  connectionManagerRefId="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input]"
                  errorOrTruncationOperation="Command Execution"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Command Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].Columns[LastUpdatedTimestamp_Derived]"
                      cachedDataType="dbTimeStamp"
                      cachedName="LastUpdatedTimestamp_Derived"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_0]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Derive Current Datetime for Final Budget table.Outputs[Derived Column Output].Columns[LastUpdatedTimestamp_Derived]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].Columns[agency_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="agency_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_1]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[agency_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].Columns[year_STAGING]"
                      cachedDataType="i4"
                      cachedName="year_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_2]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[year_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].Columns[department_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="department_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_3]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[department_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].Columns[expense_category_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expense_category_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_4]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expense_category_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].Columns[budget_code_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_code_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_5]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_code_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].Columns[budget_name_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_name_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_6]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_name_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].Columns[budget_amounts_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_amounts_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_7]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[budget_amounts_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].Columns[expenditure_amounts_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expenditure_amounts_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_8]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[expenditure_amounts_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].Columns[ID_STAGING]"
                      cachedDataType="i4"
                      cachedName="ID_STAGING"
                      cachedSortKeyPosition="1"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_9]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output].Columns[ID_STAGING]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_0]"
                      dataType="dbTimeStamp"
                      name="Param_0">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                          name="DBParamInfoFlags">65</property>
                      </properties>
                    </externalMetadataColumn>
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_1]"
                      dataType="wstr"
                      length="255"
                      name="Param_1">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                          name="DBParamInfoFlags">65</property>
                      </properties>
                    </externalMetadataColumn>
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_2]"
                      dataType="i4"
                      name="Param_2">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                          name="DBParamInfoFlags">81</property>
                      </properties>
                    </externalMetadataColumn>
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_3]"
                      dataType="wstr"
                      length="255"
                      name="Param_3">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                          name="DBParamInfoFlags">65</property>
                      </properties>
                    </externalMetadataColumn>
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_4]"
                      dataType="wstr"
                      length="255"
                      name="Param_4">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                          name="DBParamInfoFlags">65</property>
                      </properties>
                    </externalMetadataColumn>
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_5]"
                      dataType="wstr"
                      length="255"
                      name="Param_5">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                          name="DBParamInfoFlags">65</property>
                      </properties>
                    </externalMetadataColumn>
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_6]"
                      dataType="wstr"
                      length="255"
                      name="Param_6">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                          name="DBParamInfoFlags">65</property>
                      </properties>
                    </externalMetadataColumn>
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_7]"
                      dataType="wstr"
                      length="255"
                      name="Param_7">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                          name="DBParamInfoFlags">65</property>
                      </properties>
                    </externalMetadataColumn>
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_8]"
                      dataType="wstr"
                      length="255"
                      name="Param_8">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                          name="DBParamInfoFlags">65</property>
                      </properties>
                    </externalMetadataColumn>
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input].ExternalColumns[Param_9]"
                      dataType="i4"
                      name="Param_9">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="Parameter information.  Matches OLE DB's DBPARAMFLAGSENUM values."
                          name="DBParamInfoFlags">81</property>
                      </properties>
                    </externalMetadataColumn>
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Outputs[OLE DB Command Output]"
                  exclusionGroup="1"
                  name="OLE DB Command Output"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input]">
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Outputs[OLE DB Command Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Command Error Output"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Outputs[OLE DB Command Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Outputs[OLE DB Command Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[Data Conversion Output]"
              endId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split.Inputs[Conditional Split Input]"
              name="Data Conversion Output"
              startId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Data Conversion - NOT IN USER AT THE MOMENT.Outputs[Data Conversion Output]" />
            <path
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[Delete(StagingID_FINAL not Match any in ID_STAGING)]"
              endId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Delete records (Final - Budget).Inputs[OLE DB Command Input]"
              name="Delete(StagingID_FINAL not Match any in ID_STAGING)"
              startId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split.Outputs[Delete(StagingID_FINAL not Match any in ID_STAGING)]" />
            <path
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[Derived Column Output]"
              endId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0]"
              name="Derived Column Output"
              startId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Derive Current Datetime for Final Budget table.Outputs[Derived Column Output]" />
            <path
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[Insert(ID_STAGING not Match any in StagingID_FINAL)]"
              endId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input]"
              name="Insert(ID_STAGING not Match any in StagingID_FINAL)"
              startId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split.Outputs[Insert(ID_STAGING not Match any in StagingID_FINAL)]" />
            <path
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[Merge Join Output]"
              endId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Derive Current Datetime for Final Budget table.Inputs[Derived Column Input]"
              name="Merge Join Output"
              startId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Outputs[Merge Join Output]" />
            <path
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[OLE DB Source Output]"
              endId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Inputs[Sort Input]"
              name="OLE DB Source Output"
              startId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output]" />
            <path
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[OLE DB Source Output1]"
              endId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Inputs[Sort Input]"
              name="OLE DB Source Output"
              startId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget.Outputs[OLE DB Source Output]" />
            <path
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[Output 0]"
              endId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Data Conversion - NOT IN USER AT THE MOMENT.Inputs[Data Conversion Input]"
              name="Output 0"
              startId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL.Outputs[Output 0]" />
            <path
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[Sort Output]"
              endId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Left Input]"
              name="Sort Output"
              startId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC.Outputs[Sort Output]" />
            <path
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[Sort Output1]"
              endId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join.Inputs[Merge Join Right Input]"
              name="Sort Output"
              startId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC.Outputs[Sort Output]" />
            <path
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[Update(ID Match)]"
              endId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Inputs[Conditional Split Input]"
              name="Update(ID Match)"
              startId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split.Outputs[Update(ID Match)]" />
            <path
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[Update-able Records]"
              endId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget).Inputs[OLE DB Command Input]"
              name="Update-able Records"
              startId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record.Outputs[Update-able Records]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="515,42"
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final"
          TopLeft="365,349" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final">
    <LayoutInfo>
      <GraphLayout
        Capacity="32" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="298,42"
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Derive Current Datetime for Final Budget table"
          TopLeft="651,481" />
        <NodeLayout
          Size="155,42"
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Conditional Split"
          TopLeft="735,716" />
        <NodeLayout
          Size="271,42"
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Update changed records (Final - Budget)"
          TopLeft="703,952" />
        <NodeLayout
          Size="273,42"
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Replace any column that is &quot;-&quot; with NULL"
          TopLeft="667,576" />
        <NodeLayout
          Size="199,42"
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging"
          TopLeft="485,157" />
        <NodeLayout
          Size="224,42"
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Delete records (Final - Budget)"
          TopLeft="1033,840" />
        <NodeLayout
          Size="220,42"
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget_Staging - Sort ID ASC"
          TopLeft="481,272" />
        <NodeLayout
          Size="316,42"
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Data Conversion - NOT IN USER AT THE MOMENT"
          TopLeft="651,643" />
        <NodeLayout
          Size="192,42"
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Find Update-able record"
          TopLeft="736,834" />
        <NodeLayout
          Size="145,42"
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget"
          TopLeft="985,162" />
        <NodeLayout
          Size="214,42"
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Budget - Sort StagingID ASC"
          TopLeft="949,274" />
        <NodeLayout
          Size="130,42"
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Merge Join"
          TopLeft="740,399" />
        <NodeLayout
          Size="300,42"
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000"
          TopLeft="345,837" />
        <EdgeLayout
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[OLE DB Source Output1]"
          TopLeft="1056.75,204">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,70"
              Start="0,0"
              End="0,62.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,62.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[OLE DB Source Output]"
          TopLeft="587.75,199">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,73"
              Start="0,0"
              End="0,65.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,65.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[Merge Join Output]"
          TopLeft="802.5,441">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,40"
              Start="0,0"
              End="0,32.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,32.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[Insert(ID_STAGING not Match any in StagingID_FINAL)]"
          TopLeft="775.75,758">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-280.75,79"
              Start="0,0"
              End="-280.75,71.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,23.2241014799154" />
                  <mssgle:CubicBezierSegment
                    Point1="0,23.2241014799154"
                    Point2="0,27.2241014799154"
                    Point3="-4,27.2241014799154" />
                  <mssgle:LineSegment
                    End="-276.75,27.2241014799154" />
                  <mssgle:CubicBezierSegment
                    Point1="-276.75,27.2241014799154"
                    Point2="-280.75,27.2241014799154"
                    Point3="-280.75,31.2241014799154" />
                  <mssgle:LineSegment
                    End="-280.75,71.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-264.16833984375,32.2241014799154,247.5866796875,11.6630859375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[Derived Column Output]"
          TopLeft="801.75,523">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,53"
              Start="0,0"
              End="0,45.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,45.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[Delete(StagingID_FINAL not Match any in ID_STAGING)]"
          TopLeft="849.25,758">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="295.75,82"
              Start="0,0"
              End="295.75,74.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,24.2579281183932" />
                  <mssgle:CubicBezierSegment
                    Point1="0,24.2579281183932"
                    Point2="0,28.2579281183932"
                    Point3="4,28.2579281183932" />
                  <mssgle:LineSegment
                    End="291.75,28.2579281183932" />
                  <mssgle:CubicBezierSegment
                    Point1="291.75,28.2579281183932"
                    Point2="295.75,28.2579281183932"
                    Point3="295.75,32.2579281183932" />
                  <mssgle:LineSegment
                    End="295.75,74.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="23.11326171875,33.2579281183932,249.5234765625,11.6630859375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[Data Conversion Output]"
          TopLeft="810.75,685">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,31"
              Start="0,0"
              End="0,23.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,23.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[Update-able Records]"
          TopLeft="835.25,876">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,76"
              Start="0,0"
              End="0,68.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,68.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-46.4115234375,28.4453125,92.823046875,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[Update(ID Match)]"
          TopLeft="812.5,758">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="19.5,76"
              Start="0,0"
              End="19.5,68.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,34" />
                  <mssgle:CubicBezierSegment
                    Point1="0,34"
                    Point2="0,38"
                    Point3="4,38" />
                  <mssgle:LineSegment
                    End="15.5,38" />
                  <mssgle:CubicBezierSegment
                    Point1="15.5,38"
                    Point2="19.5,38"
                    Point3="19.5,42" />
                  <mssgle:LineSegment
                    End="19.5,68.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-30.29068359375,43,80.0813671875,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[Sort Output1]"
          TopLeft="1056,316">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-230.666666666667,83"
              Start="0,0"
              End="-230.666666666667,75.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,45.19452887538" />
                  <mssgle:CubicBezierSegment
                    Point1="0,45.19452887538"
                    Point2="0,49.19452887538"
                    Point3="-4,49.19452887538" />
                  <mssgle:LineSegment
                    End="-226.666666666667,49.19452887538" />
                  <mssgle:CubicBezierSegment
                    Point1="-226.666666666667,49.19452887538"
                    Point2="-230.666666666667,49.19452887538"
                    Point3="-230.666666666667,53.19452887538" />
                  <mssgle:LineSegment
                    End="-230.666666666667,75.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[Sort Output]"
          TopLeft="591,314">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="193.666666666667,85"
              Start="0,0"
              End="193.666666666667,77.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,46.3799392097265" />
                  <mssgle:CubicBezierSegment
                    Point1="0,46.3799392097265"
                    Point2="0,50.3799392097265"
                    Point3="4,50.3799392097265" />
                  <mssgle:LineSegment
                    End="189.666666666667,50.3799392097265" />
                  <mssgle:CubicBezierSegment
                    Point1="189.666666666667,50.3799392097265"
                    Point2="193.666666666667,50.3799392097265"
                    Point3="193.666666666667,54.3799392097265" />
                  <mssgle:LineSegment
                    End="193.666666666667,77.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final.Paths[Output 0]"
          TopLeft="806.25,618">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,25"
              Start="0,0"
              End="0,17.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,17.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="0,0,0,0"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Staging - Budget_Staging">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Final - Budget">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Sync to Final\Insert records (Final - Budget) - Batch 100,000">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>