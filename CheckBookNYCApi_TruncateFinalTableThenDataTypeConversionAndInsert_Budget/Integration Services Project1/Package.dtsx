<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="6/10/2020 5:11:34 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="DOT-JCKWHB2"
  DTS:CreatorName="DOT\ykuang"
  DTS:DTSID="{6B353E58-A202-4BC2-B46F-93CD68600CF1}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="12.0.5626.31"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="152"
  DTS:VersionGUID="{4611230C-6108-41E1-8C93-ACFC6F23338B}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{FCA46042-184A-4048-B9D6-000F61268699}"
      DTS:ObjectName="DOTDEV55SQLEE03.CheckBookNYC">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=DOTDEV55SQLEE03;Initial Catalog=CheckBookNYC;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{652B05F1-3B36-4A09-AB11-B782E1E9C30D}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Data Conversion - NOT IN USER AT THE MOMENT"
              componentClassID="Microsoft.DataConvert"
              contactInfo="Data Conversion;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Data Conversion"
              name="Data Conversion - NOT IN USER AT THE MOMENT"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Data Conversion - NOT IN USER AT THE MOMENT.Inputs[Data Conversion Input]"
                  name="Data Conversion Input">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Data Conversion - NOT IN USER AT THE MOMENT.Outputs[Data Conversion Output]"
                  exclusionGroup="1"
                  name="Data Conversion Output"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Data Conversion - NOT IN USER AT THE MOMENT.Inputs[Data Conversion Input]">
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Data Conversion - NOT IN USER AT THE MOMENT.Outputs[Data Conversion Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Data Conversion Error Output"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Data Conversion - NOT IN USER AT THE MOMENT.Inputs[Data Conversion Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Data Conversion - NOT IN USER AT THE MOMENT.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Data Conversion - NOT IN USER AT THE MOMENT.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Data Conversion - NOT IN USER AT THE MOMENT.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Data Conversion - NOT IN USER AT THE MOMENT.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime"
              componentClassID="Microsoft.DerivedColumn"
              contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
              name="Derive Current Datetime"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Inputs[Derived Column Input]"
                  description="Input to the Derived Column Transformation"
                  name="Derived Column Input">
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Output]"
                  description="Default Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  name="Derived Column Output"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Inputs[Derived Column Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Output].Columns[LastUpdatedTimestamp_Derived]"
                      dataType="dbTimeStamp"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Output].Columns[LastUpdatedTimestamp_Derived]"
                      name="LastUpdatedTimestamp_Derived"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Derived Column Expression"
                          name="Expression">[GETDATE]()</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Derived Column Friendly Expression"
                          expressionType="Notify"
                          name="FriendlyExpression">GETDATE()</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Error Output]"
                  description="Error Output of the Derived Column Transformation"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Derived Column Error Output"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Inputs[Derived Column Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000"
              componentClassID="Microsoft.OLEDBDestination"
              contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
              description="OLE DB Destination"
              name="Insert records (Final - Budget) - Batch 100,000"
              usesDispositions="true"
              version="4">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[dbo].[Budget]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">3</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepIdentity">false</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                  name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                <property
                  dataType="System.Int32"
                  description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                  name="FastLoadMaxInsertCommitSize">100000</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  connectionManagerRefId="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input]"
                  errorOrTruncationOperation="Insert"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[ID_STAGING]"
                      cachedDataType="i4"
                      cachedName="ID_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[StagingID]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[ID_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[LastUpdatedTimestamp_Derived]"
                      cachedDataType="dbTimeStamp"
                      cachedName="LastUpdatedTimestamp_Derived"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[LastUpdatedTimestamp]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Output].Columns[LastUpdatedTimestamp_Derived]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[agency_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="agency_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[agency]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[agency_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[year_STAGING]"
                      cachedDataType="i4"
                      cachedName="year_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[year]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[year_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[department_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="department_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[department]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[department_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[expense_category_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expense_category_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[expense_category]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[expense_category_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[budget_code_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_code_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[budget_code]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_code_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[budget_name_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_name_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[budget_name]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_name_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[budget_amounts_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_amounts_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[budget_amounts]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_amounts_STAGING]" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].Columns[expenditure_amounts_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expenditure_amounts_STAGING"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[expenditure_amounts]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[expenditure_amounts_STAGING]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[ID]"
                      dataType="i4"
                      name="ID" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[StagingID]"
                      dataType="i4"
                      name="StagingID" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[LastUpdatedTimestamp]"
                      dataType="dbTimeStamp"
                      name="LastUpdatedTimestamp" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[agency]"
                      dataType="wstr"
                      length="255"
                      name="agency" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[year]"
                      dataType="i4"
                      name="year" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[department]"
                      dataType="wstr"
                      length="255"
                      name="department" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[expense_category]"
                      dataType="wstr"
                      length="255"
                      name="expense_category" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[budget_code]"
                      dataType="wstr"
                      length="255"
                      name="budget_code" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[budget_name]"
                      dataType="wstr"
                      length="255"
                      name="budget_name" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[budget_amounts]"
                      dataType="wstr"
                      length="255"
                      name="budget_amounts" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input].ExternalColumns[expenditure_amounts]"
                      dataType="wstr"
                      length="255"
                      name="expenditure_amounts" />
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Outputs[OLE DB Destination Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Destination Error Output"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;9"
              description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
              name="Replace any column that is &quot;-&quot; with NULL"
              version="9">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="30">
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    /// <summary>
    /// This method is called once, before rows begin to be processed in the data flow.
    ///
    /// You can remove this method if you don't need to do anything here.
    /// </summary>
    public override void PreExecute()
    {
        base.PreExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called after all the rows have passed through this component.
    ///
    /// You can delete this method if you don't need to do anything here.
    /// </summary>
    public override void PostExecute()
    {
        base.PostExecute();
        /*
         * Add your code here
         */
    }

    /// <summary>
    /// This method is called once for every row that passes through the component from Input0.
    ///
    /// Example of reading a value from a column in the the row:
    ///  string zipCode = Row.ZipCode
    ///
    /// Example of writing a value to a column in the row:
    ///  Row.ZipCode = zipCode
    /// </summary>
    /// <param name="Row">The row that is currently passing through the component</param>
    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        /*
         * Add your code here
         */
        try
        {
            Row.agencySTAGING = (Row.agencySTAGING == "-" ? null : Row.agencySTAGING);
            // Row.yearSTAGING = (Row.yearSTAGING == "-" ? null: Row.yearSTAGING);
            Row.departmentSTAGING = (Row.departmentSTAGING == "-" ? null : Row.departmentSTAGING);
            Row.expensecategorySTAGING = (Row.expensecategorySTAGING == "-" ? null : Row.expensecategorySTAGING);
            Row.budgetcodeSTAGING = (Row.budgetcodeSTAGING == "-" ? null : Row.budgetcodeSTAGING);
            Row.budgetnameSTAGING = (Row.budgetnameSTAGING == "-" ? null : Row.budgetnameSTAGING);
            Row.budgetamountsSTAGING = (Row.budgetamountsSTAGING == "-" ? null : Row.budgetamountsSTAGING);
            Row.expenditureamountsSTAGING = (Row.expenditureamountsSTAGING == "-" ? null : Row.expenditureamountsSTAGING);
        }
        catch (Exception ex)
        {
            Row.agencySTAGING = "ERROR";
            // Row.yearSTAGING = "ERROR";
            Row.departmentSTAGING = "ERROR";
            Row.expensecategorySTAGING = "ERROR";
            Row.budgetcodeSTAGING = "ERROR";
            Row.budgetnameSTAGING = "ERROR";
            Row.budgetamountsSTAGING = "ERROR";
            Row.expenditureamountsSTAGING = "ERROR";
        }
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 IDSTAGING
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[0]);
        }
        set
        {
            this[0] = value;
        }
    }
    public bool IDSTAGING_IsNull
    {
        get
        {
            return IsNull(0);
        }
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String agencySTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[1]);
        }
        set
        {
            this[1] = value;
        }
    }
    public bool agencySTAGING_IsNull
    {
        get
        {
            return IsNull(1);
        }
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 yearSTAGING
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[2]);
        }
        set
        {
            this[2] = value;
        }
    }
    public bool yearSTAGING_IsNull
    {
        get
        {
            return IsNull(2);
        }
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String departmentSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[3]);
        }
        set
        {
            this[3] = value;
        }
    }
    public bool departmentSTAGING_IsNull
    {
        get
        {
            return IsNull(3);
        }
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String expensecategorySTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[4]);
        }
        set
        {
            this[4] = value;
        }
    }
    public bool expensecategorySTAGING_IsNull
    {
        get
        {
            return IsNull(4);
        }
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String budgetcodeSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[5]);
        }
        set
        {
            this[5] = value;
        }
    }
    public bool budgetcodeSTAGING_IsNull
    {
        get
        {
            return IsNull(5);
        }
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String budgetnameSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[6]);
        }
        set
        {
            this[6] = value;
        }
    }
    public bool budgetnameSTAGING_IsNull
    {
        get
        {
            return IsNull(6);
        }
        set
        {
            if (value)
            {
                SetNull(6);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String budgetamountsSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[7]);
        }
        set
        {
            this[7] = value;
        }
    }
    public bool budgetamountsSTAGING_IsNull
    {
        get
        {
            return IsNull(7);
        }
        set
        {
            if (value)
            {
                SetNull(7);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String expenditureamountsSTAGING
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[8]);
        }
        set
        {
            this[8] = value;
        }
    }
    public bool expenditureamountsSTAGING_IsNull
    {
        get
        {
            return IsNull(8);
        }
        set
        {
            if (value)
            {
                SetNull(8);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public DateTime LastUpdatedTimestampDerived
    {
        get
        {
            return Buffer.GetDateTime(BufferColumnIndexes[9]);
        }
    }
    public bool LastUpdatedTimestampDerived_IsNull
    {
        get
        {
            return IsNull(9);
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_3e1825733ec74b9bbbc62f8b450c30f3.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{d6261bad-e62e-483f-bca4-f40a32e70938}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_3e1825733ec74b9bbbc62f8b450c30f3</RootNamespace>
    <AssemblyName>SC_3e1825733ec74b9bbbc62f8b450c30f3</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=12.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptComponent" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptComponent" GeneratedNamespace="SC_3e1825733ec74b9bbbc62f8b450c30f3" IconIndex="0"></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_SC120</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_3e1825733ec74b9bbbc62f8b450c30f3.Properties.Settings.get_Default():SC_3e1825733ec74b9bbbc62f8b450c30f3.Properties.Sett" +
    "ings")]

namespace SC_3e1825733ec74b9bbbc62f8b450c30f3.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>SC_3e1825733ec74b9bbbc62f8b450c30f3</msb:CodeName>
		<msb:DisplayName>SC_3e1825733ec74b9bbbc62f8b450c30f3</msb:DisplayName>
		<msb:ProjectId>{86953A54-B584-4ABD-986B-BDE2E05034F2}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_3e1825733ec74b9bbbc62f8b450c30f3.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ComponentWrapper.cs"/>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_3e1825733ec74b9bbbc62f8b450c30f3")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_3e1825733ec74b9bbbc62f8b450c30f3")]
[assembly: AssemblyCopyright("Copyright @  2020")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_3e1825733ec74b9bbbc62f8b450c30f3.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_3e1825733ec74b9bbbc62f8b450c30f3.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_3e1825733ec74b9bbbc62f8b450c30f3.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_3e1825733ec74b9bbbc62f8b450c30f3.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_3e1825733ec74b9bbbc62f8b450c30f3.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="2">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_3e1825733ec74b9bbbc62f8b450c30f3.dll]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDADxtxV8AAAAAAAAAAOAAAiELAQsAACAAAAAIAAAAAAAAzj4A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAHw+AABPAAAAAEAAAAgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAA1B4AAAAgAAAAIAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAAgEAAAAQAAAAAYAAAAiAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAKAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACw
PgAAAAAAAEgAAAACAAUA4CUAAJwYAAABAAAAAAAAACglAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH4CKA0AAAoCAnMyAAAGfQEAAAQCAnMzAAAGfQIAAAQqkgRy
AQAAcBpvDgAACiwVAgUCAygPAAAKDgRzCQAABm8DAAAGKkorBwIDbwQAAAYDbzAAAAYt8SoGKh4C
KBEAAAoqHgIoEgAACioAAAswAwA6AQAAAAAAAAMDbw4AAAZyEQAAcCgTAAAKLQgDbw4AAAYrARRv
DwAABgMDbxYAAAZyEQAAcCgTAAAKLQgDbxYAAAYrARRvFwAABgMDbxoAAAZyEQAAcCgTAAAKLQgD
bxoAAAYrARRvGwAABgMDbx4AAAZyEQAAcCgTAAAKLQgDbx4AAAYrARRvHwAABgMDbyIAAAZyEQAA
cCgTAAAKLQgDbyIAAAYrARRvIwAABgMDbyYAAAZyEQAAcCgTAAAKLQgDbyYAAAYrARRvJwAABgMD
byoAAAZyEQAAcCgTAAAKLQgDbyoAAAYrARRvKwAABt5QJgNyFQAAcG8PAAAGA3IVAABwbxcAAAYD
chUAAHBvGwAABgNyFQAAcG8fAAAGA3IVAABwbyMAAAYDchUAAHBvJwAABgNyFQAAcG8rAAAG3gAq
AAABEAAAAAAAAOnpAFAZAAABHgIoAQAABioqAgMEBSgUAAAKKlICexUAAAoCexYAAAoWlG8XAAAK
KjoCFgOMGgAAASgYAAAKKiICFigZAAAKKloDLAgCFigaAAAKKnIhAABwcxsAAAp6UgJ7FQAACgJ7
FgAACheUbxwAAAoqJgIXAygYAAAKKiICFygZAAAKKloDLAgCFygaAAAKKnIhAABwcxsAAAp6UgJ7
FQAACgJ7FgAAChiUbxcAAAoqOgIYA4waAAABKBgAAAoqIgIYKBkAAAoqWgMsCAIYKBoAAAoqciEA
AHBzGwAACnpSAnsVAAAKAnsWAAAKGZRvHAAACiomAhkDKBgAAAoqIgIZKBkAAAoqWgMsCAIZKBoA
AAoqciEAAHBzGwAACnpSAnsVAAAKAnsWAAAKGpRvHAAACiomAhoDKBgAAAoqIgIaKBkAAAoqWgMs
CAIaKBoAAAoqciEAAHBzGwAACnpSAnsVAAAKAnsWAAAKG5RvHAAACiomAhsDKBgAAAoqIgIbKBkA
AAoqWgMsCAIbKBoAAAoqciEAAHBzGwAACnpSAnsVAAAKAnsWAAAKHJRvHAAACiomAhwDKBgAAAoq
IgIcKBkAAAoqWgMsCAIcKBoAAAoqciEAAHBzGwAACnpSAnsVAAAKAnsWAAAKHZRvHAAACiomAh0D
KBgAAAoqIgIdKBkAAAoqWgMsCAIdKBoAAAoqciEAAHBzGwAACnpSAnsVAAAKAnsWAAAKHpRvHAAA
CiomAh4DKBgAAAoqIgIeKBkAAAoqWgMsCAIeKBoAAAoqciEAAHBzGwAACnpWAnsVAAAKAnsWAAAK
HwmUbx0AAAoqJgIfCSgZAAAKKh4CKB4AAAoqHgIoHwAACio6AiggAAAKAgN9AwAABCo6AiggAAAK
AgN9BAAABCoeAiggAAAKKgAAEzACAC0AAAABAAARfgUAAAQtIHK+AABw0AcAAAIoIgAACm8jAAAK
cyQAAAoKBoAFAAAEfgUAAAQqGn4GAAAEKh4CgAYAAAQqGn4HAAAEKi5zOQAABoAHAAAEKh4CKCcA
AAoqAAAAAAC0AAAAzsrvvgEAAACRAAAAbFN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VSZWFkZXIs
IG1zY29ybGliLCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9r
ZW49Yjc3YTVjNTYxOTM0ZTA4OSNTeXN0ZW0uUmVzb3VyY2VzLlJ1bnRpbWVSZXNvdXJjZVNldAIA
AAAAAAAAAAAAAFBBRFBBRFC0AAAAQlNKQgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAABQBsAAAA
+AgAACN+AABkCQAANAwAACNTdHJpbmdzAAAAAJgVAAAwAQAAI1VTAMgWAAAQAAAAI0dVSUQAAADY
FgAAxAEAACNCbG9iAAAAAAAAAAIAAAFXFaIBCQEAAAD6JTMAFgAAAQAAACIAAAAIAAAABwAAADoA
AAAfAAAAJwAAAA8AAAABAAAAAwAAABcAAAAqAAAAAQAAAAQAAAABAAAAAAAKAAEAAAAAAAYA7gDN
AAYA/gDNAAoAGwEUAQ4ANwEiARIAdgHNAAYAhQHNAAoAcAUUAQoAsweiBwoA5AfPBwoAvQijCAoA
6AjWCAoA/wjWCAoAHAnWCAoAOwnWCAoAVAnWCAoAbQnWCAoAiAnWCAoAownWCAoAvAnWCAoA9QnV
CQoAFQrVCQoAVwoUAQoAXgoUAQYAhwrNAAoAugoUAQoAzQoUAQoA6woUAQoALgsbCwoASwsUAQoA
UAsUAQoAdAvWCA4AoAuKCw4AuQuKCwoAzgvVCQAAAAABAAAAAAABAAEAAQAQADIAAAAFAAEAAQAB
ABAAQAAAAAgAAwAFAAEAEABLAAAACQADAAkAAQAQAFgAAAANAAMAMgABABAAZAAAAA0ABAAzAAAA
EABuAHgADQAFADQAAAEQAKcAeAARAAcAOAAGAFgAEwAGAGQAFwABAJIHagABAJIHagARAMMHdAAR
APAHeAARADQIlgBQIAAAAACGGE8BGwABAHAgAAAAAMYAkwEfAAEAlSAAAAAAxgGgASkABQCoIAAA
AADGAbQBKQAGAKogAAAAAMYAywEbAAcAsiAAAAAAxgDWARsABwC8IAAAAADGALQBKQAHABQiAAAA
AIYYTwEbAAgAHCIAAAAAhhhPAS8ACAAnIgAAAACGCOIBOQALADwiAAAAAIYI8AE9AAsASyIAAAAA
hgj+AUIADABUIgAAAACGCBMCRgAMAGsiAAAAAIYIKAJLAA0AgCIAAAAAhgg6Ak8ADQCKIgAAAACG
CEwCQgAOAJMiAAAAAIYIZQJGAA4AqiIAAAAAhgh+AjkADwC/IgAAAACGCI4CPQAPAM4iAAAAAIYI
ngJCABAA1yIAAAAAhgi1AkYAEADuIgAAAACGCMwCSwARAAMjAAAAAIYI4gJPABEADSMAAAAAhgj4
AkIAEgAWIwAAAACGCBUDRgASAC0jAAAAAIYIMgNLABMAQiMAAAAAhghNA08AEwBMIwAAAACGCGgD
QgAUAFUjAAAAAIYIigNGABQAbCMAAAAAhgisA0sAFQCBIwAAAACGCMIDTwAVAIsjAAAAAIYI2ANC
ABYAlCMAAAAAhgj1A0YAFgCrIwAAAACGCBIESwAXAMAjAAAAAIYIKARPABcAyiMAAAAAhgg+BEIA
GADTIwAAAACGCFsERgAYAOojAAAAAIYIeARLABkA/yMAAAAAhgiRBE8AGQAJJAAAAACGCKoEQgAa
ABIkAAAAAIYIygRGABoAKSQAAAAAhgjqBEsAGwA+JAAAAACGCAgFTwAbAEgkAAAAAIYIJgVCABwA
USQAAAAAhghLBUYAHABoJAAAAACGCHkFVAAdAH4kAAAAAIYImQVCAB0AiCQAAAAAhgDABUIAHQCQ
JAAAAACGAMgFQgAdAJgkAAAAAIYYTwFuAB0ApyQAAAAAhhhPAW4AHgC2JAAAAACDGE8BGwAfAMAk
AAAAAJMIAAh8AB8A+SQAAAAAkwgUCIEAHwAAJQAAAACTCCAIhgAfAAglAAAAAJYIRAiaACAAGyUA
AAAAhhhPARsAIAAPJQAAAACRGOkLBwEgAAAAAQBYCAAAAgBgCAAAAwBqCAAABABxCAAAAQBqCAAA
AQB7CAAAAQB7CAAAAQBqCAAAAgB/CAAAAwBxCAAAAQCTCAAAAQCTCAAAAQCTCAAAAQCTCAAAAQCT
CAAAAQCTCAAAAQCTCAAAAQCTCAAAAQCTCAAAAQCTCAAAAQCTCAAAAQCTCAAAAQCTCAAAAQCTCAAA
AQCTCAAAAQCTCAAAAQCTCAAAAQCTCAAAAQCZCAAAAQCZCAAAAQCTCFEATwFPAFkATwFPAGEATwFP
AGkATwFPAHEATwFPAHkATwFPAIEATwFPAIkATwFPAJEATwFPAJkATwFPAKEATwE9AKkATwEbAAkA
TwEbALEAbwqkAAkAdgqrAMEATwEbAAkAywEbAAkA1gEbALEArgq2ABEATwEvABEAagi8ABEAfwjA
ACkAxArEABEA0wrJABEA3ArPABEA4wo9ANkATwFPACkABQvUACkADwvZABEAwAVCABEAyAVCABkA
TwEbAOEATwEbAOkAYgvfAOkAfQvmAEEATwHrAAEBTwH3ABEBTwEbACEATwEbAC4AGwB8AS4AYwCi
AS4ACwALAS4AEwBTAS4AIwB8AS4AKwB8AS4AMwBTAS4AOwCCAS4AQwB8AS4AWwCZAWMAgwCxAOEA
MwGxAOMACwGxAKkCKwH+AMkCKwH+APIABAABAAcAFQAIABcAAADUBVkAAADeBV0AAADvBWEAAAD9
BV0AAAASBlkAAAAeBl0AAAAxBmEAAABDBl0AAABcBmEAAABzBl0AAACRBmEAAACjBl0AAAC8BmEA
AADOBl0AAADnBmEAAAD8Bl0AAAAYB2EAAAAyB10AAABTB2UAAABvB10AAACzB4wAAAAsCJEAAABQ
CJ8AAgAKAAMAAQALAAMAAQANAAUAAgAMAAUAAQAPAAcAAgAOAAcAAgAQAAkAAQARAAkAAQATAAsA
AgASAAsAAQAVAA0AAgAUAA0AAgAWAA8AAQAXAA8AAgAYABEAAQAZABEAAQAbABMAAgAaABMAAgAc
ABUAAQAdABUAAgAeABcAAQAfABcAAgAgABkAAQAhABkAAQAjABsAAgAiABsAAQAlAB0AAgAkAB0A
AgAmAB8AAQAnAB8AAQApACEAAgAoACEAAQArACMAAgAqACMAAgAsACUAAQAtACUAAgAuACcAAgAv
ACkAAgA1ACsAAgA2AC0AAQA3AC0AAgA4AC8ABIAAAAEAAADXHXZ4AAAAAAAAMwoAAAwAAAAAAAAA
AAAAAAEAsAAAAAAABAAAAAAAAAAAAAAACgALAQAAAAAEAAAAAAAAAAAAAAAKABQBAAAAAAwAAAAA
AAAAAAAAAAEAVQEAAAAAAAAAAAEAAADwCwAAAAAAAAA8TW9kdWxlPgBTQ18zZTE4MjU3MzNlYzc0
YjliYmJjNjJmOGI0NTBjMzBmMy5kbGwAVXNlckNvbXBvbmVudABTY3JpcHRNYWluAElucHV0MEJ1
ZmZlcgBDb25uZWN0aW9ucwBWYXJpYWJsZXMAUmVzb3VyY2VzAFNDXzNlMTgyNTczM2VjNzRiOWJi
YmM2MmY4YjQ1MGMzMGYzLlByb3BlcnRpZXMAU2V0dGluZ3MATWljcm9zb2Z0LlNxbFNlcnZlci5U
eFNjcmlwdABNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZQBTY3JpcHRDb21wb25lbnQA
U2NyaXB0QnVmZmVyAG1zY29ybGliAFN5c3RlbQBPYmplY3QAU3lzdGVtLkNvbmZpZ3VyYXRpb24A
QXBwbGljYXRpb25TZXR0aW5nc0Jhc2UALmN0b3IATWljcm9zb2Z0LlNxbFNlcnZlci5QaXBlbGlu
ZUhvc3QAUGlwZWxpbmVCdWZmZXIAT3V0cHV0TmFtZU1hcABQcm9jZXNzSW5wdXQASW5wdXQwX1By
b2Nlc3NJbnB1dABJbnB1dDBfUHJvY2Vzc0lucHV0Um93AFByZUV4ZWN1dGUAUG9zdEV4ZWN1dGUA
Z2V0X0lEU1RBR0lORwBzZXRfSURTVEFHSU5HAGdldF9JRFNUQUdJTkdfSXNOdWxsAHNldF9JRFNU
QUdJTkdfSXNOdWxsAGdldF9hZ2VuY3lTVEFHSU5HAHNldF9hZ2VuY3lTVEFHSU5HAGdldF9hZ2Vu
Y3lTVEFHSU5HX0lzTnVsbABzZXRfYWdlbmN5U1RBR0lOR19Jc051bGwAZ2V0X3llYXJTVEFHSU5H
AHNldF95ZWFyU1RBR0lORwBnZXRfeWVhclNUQUdJTkdfSXNOdWxsAHNldF95ZWFyU1RBR0lOR19J
c051bGwAZ2V0X2RlcGFydG1lbnRTVEFHSU5HAHNldF9kZXBhcnRtZW50U1RBR0lORwBnZXRfZGVw
YXJ0bWVudFNUQUdJTkdfSXNOdWxsAHNldF9kZXBhcnRtZW50U1RBR0lOR19Jc051bGwAZ2V0X2V4
cGVuc2VjYXRlZ29yeVNUQUdJTkcAc2V0X2V4cGVuc2VjYXRlZ29yeVNUQUdJTkcAZ2V0X2V4cGVu
c2VjYXRlZ29yeVNUQUdJTkdfSXNOdWxsAHNldF9leHBlbnNlY2F0ZWdvcnlTVEFHSU5HX0lzTnVs
bABnZXRfYnVkZ2V0Y29kZVNUQUdJTkcAc2V0X2J1ZGdldGNvZGVTVEFHSU5HAGdldF9idWRnZXRj
b2RlU1RBR0lOR19Jc051bGwAc2V0X2J1ZGdldGNvZGVTVEFHSU5HX0lzTnVsbABnZXRfYnVkZ2V0
bmFtZVNUQUdJTkcAc2V0X2J1ZGdldG5hbWVTVEFHSU5HAGdldF9idWRnZXRuYW1lU1RBR0lOR19J
c051bGwAc2V0X2J1ZGdldG5hbWVTVEFHSU5HX0lzTnVsbABnZXRfYnVkZ2V0YW1vdW50c1NUQUdJ
TkcAc2V0X2J1ZGdldGFtb3VudHNTVEFHSU5HAGdldF9idWRnZXRhbW91bnRzU1RBR0lOR19Jc051
bGwAc2V0X2J1ZGdldGFtb3VudHNTVEFHSU5HX0lzTnVsbABnZXRfZXhwZW5kaXR1cmVhbW91bnRz
U1RBR0lORwBzZXRfZXhwZW5kaXR1cmVhbW91bnRzU1RBR0lORwBnZXRfZXhwZW5kaXR1cmVhbW91
bnRzU1RBR0lOR19Jc051bGwAc2V0X2V4cGVuZGl0dXJlYW1vdW50c1NUQUdJTkdfSXNOdWxsAERh
dGVUaW1lAGdldF9MYXN0VXBkYXRlZFRpbWVzdGFtcERlcml2ZWQAZ2V0X0xhc3RVcGRhdGVkVGlt
ZXN0YW1wRGVyaXZlZF9Jc051bGwATmV4dFJvdwBFbmRPZlJvd3NldABJRFNUQUdJTkcASURTVEFH
SU5HX0lzTnVsbABhZ2VuY3lTVEFHSU5HAGFnZW5jeVNUQUdJTkdfSXNOdWxsAHllYXJTVEFHSU5H
AHllYXJTVEFHSU5HX0lzTnVsbABkZXBhcnRtZW50U1RBR0lORwBkZXBhcnRtZW50U1RBR0lOR19J
c051bGwAZXhwZW5zZWNhdGVnb3J5U1RBR0lORwBleHBlbnNlY2F0ZWdvcnlTVEFHSU5HX0lzTnVs
bABidWRnZXRjb2RlU1RBR0lORwBidWRnZXRjb2RlU1RBR0lOR19Jc051bGwAYnVkZ2V0bmFtZVNU
QUdJTkcAYnVkZ2V0bmFtZVNUQUdJTkdfSXNOdWxsAGJ1ZGdldGFtb3VudHNTVEFHSU5HAGJ1ZGdl
dGFtb3VudHNTVEFHSU5HX0lzTnVsbABleHBlbmRpdHVyZWFtb3VudHNTVEFHSU5HAGV4cGVuZGl0
dXJlYW1vdW50c1NUQUdJTkdfSXNOdWxsAExhc3RVcGRhdGVkVGltZXN0YW1wRGVyaXZlZABMYXN0
VXBkYXRlZFRpbWVzdGFtcERlcml2ZWRfSXNOdWxsAFBhcmVudENvbXBvbmVudABTeXN0ZW0uUmVz
b3VyY2VzAFJlc291cmNlTWFuYWdlcgByZXNvdXJjZU1hbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBD
dWx0dXJlSW5mbwByZXNvdXJjZUN1bHR1cmUAZ2V0X1Jlc291cmNlTWFuYWdlcgBnZXRfQ3VsdHVy
ZQBzZXRfQ3VsdHVyZQBDdWx0dXJlAGRlZmF1bHRJbnN0YW5jZQBnZXRfRGVmYXVsdABEZWZhdWx0
AElucHV0SUQASW5wdXROYW1lAEJ1ZmZlcgBPdXRwdXRNYXAAUm93AEJ1ZmZlckNvbHVtbkluZGV4
ZXMAdmFsdWUAQ29tcG9uZW50AFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAVGFyZ2V0RnJhbWV3
b3JrQXR0cmlidXRlAFN5c3RlbS5SZWZsZWN0aW9uAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNz
ZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUA
QXNzZW1ibHlDb21wYW55QXR0cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJs
eUNvcHlyaWdodEF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBBc3NlbWJseUN1
bHR1cmVBdHRyaWJ1dGUAQXNzZW1ibHlWZXJzaW9uQXR0cmlidXRlAFN5c3RlbS5SdW50aW1lLkNv
bXBpbGVyU2VydmljZXMAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBSdW50aW1lQ29t
cGF0aWJpbGl0eUF0dHJpYnV0ZQBTQ18zZTE4MjU3MzNlYzc0YjliYmJjNjJmOGI0NTBjMzBmMwBT
dHJpbmcAU3RyaW5nQ29tcGFyaXNvbgBFcXVhbHMAR2V0Q29sdW1uSW5kZXhlcwBTU0lTU2NyaXB0
Q29tcG9uZW50RW50cnlQb2ludEF0dHJpYnV0ZQBvcF9FcXVhbGl0eQBFeGNlcHRpb24AR2V0SW50
MzIASW50MzIAc2V0X0l0ZW0ASXNOdWxsAFNldE51bGwASW52YWxpZE9wZXJhdGlvbkV4Y2VwdGlv
bgBHZXRTdHJpbmcAR2V0RGF0ZVRpbWUAU3lzdGVtLkRpYWdub3N0aWNzAERlYnVnZ2VyTm9uVXNl
ckNvZGVBdHRyaWJ1dGUAVHlwZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBB
c3NlbWJseQBnZXRfQXNzZW1ibHkAU3lzdGVtLkNvbXBvbmVudE1vZGVsAEVkaXRvckJyb3dzYWJs
ZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0
ZQAuY2N0b3IAU0NfM2UxODI1NzMzZWM3NGI5YmJiYzYyZjhiNDUwYzMwZjMuUHJvcGVydGllcy5S
ZXNvdXJjZXMucmVzb3VyY2VzAAAAD0kAbgBwAHUAdAAgADAAAAMtAAELRQBSAFIATwBSAACAm0kA
cwBOAHUAbABsACAAcAByAG8AcABlAHIAdAB5ACAAYwBhAG4AbgBvAHQAIABiAGUAIABzAGUAdAAg
AHQAbwAgAEYAYQBsAHMAZQAuACAAQQBzAHMAaQBnAG4AIABhACAAdgBhAGwAdQBlACAAdABvACAA
dABoAGUAIABjAG8AbAB1AG0AbgAgAGkAbgBzAHQAZQBhAGQALgAAcVMAQwBfADMAZQAxADgAMgA1
ADcAMwAzAGUAYwA3ADQAYgA5AGIAYgBiAGMANgAyAGYAOABiADQANQAwAGMAMwAwAGYAMwAuAFAA
cgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAA7cfN64cEKkSuAQJMFaEhgQAI
iYRdzYCAzJEIt3pcVhk04IkDBhIUAwYSGAMgAAEJIAQBCA4SFRIZBSABARIQCSADARIVHQgSGQMg
AAgEIAEBCAMgAAIEIAEBAgMgAA4EIAEBDgQgABEdAygACAMoAAIDKAAOBCgAER0DBhIFBSABARIF
AwYSIQMGEiUEAAASIQQAABIlBQABARIlBAgAEiEECAASJQMGEiAEAAASIAQIABIgBiACAg4RXQUg
AR0ICAQBAAAABQACAg4OAwYSFQMGHQgEIAEICAUgAgEIHAQgAQIIBCABDggFIAERHQgGAAESdRF5
BCAAEn0GIAIBDhJ9BAcBEiEGIAEBEYCFCAEAAgAAAAAAAwAAAUcBABouTkVURnJhbWV3b3JrLFZl
cnNpb249djQuMAEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUQLk5FVCBGcmFtZXdvcmsgNCgBACNT
Q18zZTE4MjU3MzNlYzc0YjliYmJjNjJmOGI0NTBjMzBmMwAABQEAAAAAFgEAEUNvcHlyaWdodCBA
ICAyMDIwAAAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBAAAApD4AAAAA
AAAAAAAAvj4AAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAALA+AAAAAAAAAAAAAAAAX0NvckRsbE1h
aW4AbXNjb3JlZS5kbGwAAAAAAP8lACAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQ
AAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFhA
AACwAwAAAAAAAAAAAACwAzQAAABWAFMAXwBWAEUAUgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv
/gAAAQAAAAEAdnjXHQAAAQB2eNcdPwAAAAAAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYA
YQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAA
ALAEEAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAA7AIAAAEAMAAwADAAMAAwADQA
YgAwAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAQwBfADMAZQAx
ADgAMgA1ADcAMwAzAGUAYwA3ADQAYgA5AGIAYgBiAGMANgAyAGYAOABiADQANQAwAGMAMwAwAGYA
MwAAAEAADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA3ADYAMwA5AC4AMwAw
ADgAMwA4AAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAQwBfADMAZQAxADgA
MgA1ADcAMwAzAGUAYwA3ADQAYgA5AGIAYgBiAGMANgAyAGYAOABiADQANQAwAGMAMwAwAGYAMwAu
AGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkA
ZwBoAHQAIABAACAAIAAyADAAMgAwAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBh
AG0AZQAAAFMAQwBfADMAZQAxADgAMgA1ADcAMwAzAGUAYwA3ADQAYgA5AGIAYgBiAGMANgAyAGYA
OABiADQANQAwAGMAMwAwAGYAMwAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBl
AAAAAABTAEMAXwAzAGUAMQA4ADIANQA3ADMAMwBlAGMANwA0AGIAOQBiAGIAYgBjADYAMgBmADgA
YgA0ADUAMABjADMAMABmADMAAABEAA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAx
AC4AMAAuADcANgAzADkALgAzADAAOAAzADgAAAAAAEgADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYA
ZQByAHMAaQBvAG4AAAAxAC4AMAAuADcANgAzADkALgAzADAAOAAzADgAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAMAAAA0D4AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_3e1825733ec74b9bbbc62f8b450c30f3</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum"
                  typeConverter="NOTBROWSABLE">85d29c61c7c38e29cba6ce30a686381f</property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataShaChecksum"
                  typeConverter="NOTBROWSABLE">c0f826cc283e1471ed4cd24ed869b132ee5a0721</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0]"
                  hasSideEffects="true"
                  name="Input 0">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[ID_STAGING]"
                      cachedDataType="i4"
                      cachedName="ID_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[ID_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[agency_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="agency_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[agency_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[year_STAGING]"
                      cachedDataType="i4"
                      cachedName="year_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[year_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[department_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="department_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[department_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[expense_category_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expense_category_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[expense_category_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[budget_code_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_code_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_code_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[budget_name_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_name_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_name_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[budget_amounts_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="budget_amounts_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_amounts_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[expenditure_amounts_STAGING]"
                      cachedDataType="wstr"
                      cachedLength="255"
                      cachedName="expenditure_amounts_STAGING"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[expenditure_amounts_STAGING]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0].Columns[LastUpdatedTimestamp_Derived]"
                      cachedDataType="dbTimeStamp"
                      cachedName="LastUpdatedTimestamp_Derived"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Output].Columns[LastUpdatedTimestamp_Derived]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Outputs[Output 0]"
                  name="Output 0"
                  synchronousInputId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0]">
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging"
              componentClassID="Microsoft.OLEDBSource"
              contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
              description="OLE DB Source"
              name="Staging - Budget_Staging"
              usesDispositions="true"
              version="7">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[dbo].[Budget_Staging]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">0</property>
                <property
                  dataType="System.String"
                  description="The mappings between the parameters in the SQL command and variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  connectionManagerRefId="Package.ConnectionManagers[DOTDEV55SQLEE03.CheckBookNYC]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output]"
                  name="OLE DB Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[ID_STAGING]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[ID]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[ID_STAGING]"
                      name="ID_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[agency_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[agency]"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[agency_STAGING]"
                      name="agency_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[year_STAGING]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[year]"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[year_STAGING]"
                      name="year_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[department_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[department]"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[department_STAGING]"
                      name="department_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[expense_category_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[expense_category]"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[expense_category_STAGING]"
                      name="expense_category_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_code_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[budget_code]"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_code_STAGING]"
                      name="budget_code_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_name_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[budget_name]"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_name_STAGING]"
                      name="budget_name_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_amounts_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[budget_amounts]"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[budget_amounts_STAGING]"
                      name="budget_amounts_STAGING"
                      truncationRowDisposition="FailComponent" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[expenditure_amounts_STAGING]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[expenditure_amounts]"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].Columns[expenditure_amounts_STAGING]"
                      name="expenditure_amounts_STAGING"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[ID]"
                      dataType="i4"
                      name="ID" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[LastUpdatedTimestamp]"
                      dataType="dbTimeStamp"
                      name="LastUpdatedTimestamp" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[agency]"
                      dataType="wstr"
                      length="255"
                      name="agency" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[year]"
                      dataType="i4"
                      name="year" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[department]"
                      dataType="wstr"
                      length="255"
                      name="department" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[expense_category]"
                      dataType="wstr"
                      length="255"
                      name="expense_category" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[budget_code]"
                      dataType="wstr"
                      length="255"
                      name="budget_code" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[budget_name]"
                      dataType="wstr"
                      length="255"
                      name="budget_name" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[budget_amounts]"
                      dataType="wstr"
                      length="255"
                      name="budget_amounts" />
                    <externalMetadataColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output].ExternalColumns[expenditure_amounts]"
                      dataType="wstr"
                      length="255"
                      name="expenditure_amounts" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output]"
                  isErrorOut="true"
                  name="OLE DB Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[ID]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[ID]"
                      name="ID" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[agency]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[agency]"
                      name="agency" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[year]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[year]"
                      name="year" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[department]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[department]"
                      name="department" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[expense_category]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[expense_category]"
                      name="expense_category" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[budget_code]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[budget_code]"
                      name="budget_code" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[budget_name]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[budget_name]"
                      name="budget_name" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[budget_amounts]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[budget_amounts]"
                      name="budget_amounts" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[expenditure_amounts]"
                      dataType="wstr"
                      length="255"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[expenditure_amounts]"
                      name="expenditure_amounts" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final.Paths[Data Conversion Output]"
              endId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000.Inputs[OLE DB Destination Input]"
              name="Data Conversion Output"
              startId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Data Conversion - NOT IN USER AT THE MOMENT.Outputs[Data Conversion Output]" />
            <path
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final.Paths[Derived Column Output]"
              endId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Inputs[Input 0]"
              name="Derived Column Output"
              startId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Outputs[Derived Column Output]" />
            <path
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final.Paths[OLE DB Source Output]"
              endId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime.Inputs[Derived Column Input]"
              name="OLE DB Source Output"
              startId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging.Outputs[OLE DB Source Output]" />
            <path
              refId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final.Paths[Output 0]"
              endId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Data Conversion - NOT IN USER AT THE MOMENT.Inputs[Data Conversion Input]"
              name="Output 0"
              startId="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL.Outputs[Output 0]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Truncate Final Table - Budget"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{DBD4EF23-3837-4656-A360-91210E68514D}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Truncate Final Table - Budget"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2014; © 2014 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{FCA46042-184A-4048-B9D6-000F61268699}"
          SQLTask:SqlStatementSource="TRUNCATE TABLE Budget" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{651D6D5F-231D-4379-9CDD-B02B64186E3F}"
      DTS:From="Package\Truncate Final Table - Budget"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql12">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="521,42"
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final"
          TopLeft="365,349" />
        <NodeLayout
          Size="219,42"
          Id="Package\Truncate Final Table - Budget"
          TopLeft="512,256" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="623.5,298">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,51"
              Start="0,0"
              End="0,43.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,43.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="199,42"
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging"
          TopLeft="709,291" />
        <NodeLayout
          Size="193,42"
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Derive Current Datetime"
          TopLeft="708,396" />
        <NodeLayout
          Size="273,42"
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Replace any column that is &quot;-&quot; with NULL"
          TopLeft="671,482" />
        <NodeLayout
          Size="316,42"
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Data Conversion - NOT IN USER AT THE MOMENT"
          TopLeft="657,561" />
        <NodeLayout
          Size="300,42"
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000"
          TopLeft="664,705" />
        <EdgeLayout
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final.Paths[Output 0]"
          TopLeft="811.25,524">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,37"
              Start="0,0"
              End="0,29.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,29.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final.Paths[OLE DB Source Output]"
          TopLeft="806.5,333">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,63"
              Start="0,0"
              End="0,55.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,55.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final.Paths[Derived Column Output]"
          TopLeft="806,438">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,44"
              Start="0,0"
              End="0,36.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,36.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final.Paths[Data Conversion Output]"
          TopLeft="814.5,603">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,102"
              Start="0,0"
              End="0,94.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,94.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Staging - Budget_Staging">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Staging To Final - Budget - Convert Staging to appropriate data types and then Insert to Final\Insert records (Final - Budget) - Batch 100,000">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>